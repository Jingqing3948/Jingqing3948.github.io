<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingqing3948 的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-25T12:56:26.210Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jing Qing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL 语句——DQL</title>
    <link href="http://example.com/2022/04/25/SQL%20%E8%AF%AD%E5%8F%A5%E2%80%94%E2%80%94DQL/"/>
    <id>http://example.com/2022/04/25/SQL%20%E8%AF%AD%E5%8F%A5%E2%80%94%E2%80%94DQL/</id>
    <published>2022-04-24T16:00:00.000Z</published>
    <updated>2022-04-25T12:56:26.210Z</updated>
    
    <content type="html"><![CDATA[<p>查询语句。</p><p><em>本节中使用到的例子：主要包含 tb_student 学生表（学号 stu_id，姓名 stu_name，地址 stu_address,所属学院号 col_id）</em></p><p><em>tb_record 记录表，连接学生和所选的课 id 及课程成绩（学号 stu_id，课程号）</em></p><h2 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h2><p>查询所有学生的所有信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from `表名`;-- * 号表示所有字段<br></code></pre></td></tr></table></figure><p>但是这样有一点影响效率，会先查出学生表中有哪些列，再查询这些列的数据。</p><p>实际使用一般都是手动写上所有要查询的字段。（投影 Projection，只查询某几列）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_id`,`stu_sex`,`stu_name`,`stu_address` from `tb_student`;<br></code></pre></td></tr></table></figure><p>如果只查询部分列，就只写那几列就行。</p><h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>给字段或表起别名—— alias，简写为 as。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_id` as `学号` from `tb_student`;<br></code></pre></td></tr></table></figure><p>as 可以省略，不过还是写上可读性高一些。<em>一般字段不省略，表省略。具体还得看公司编程规范的要求，没有就看个人喜好了。</em></p><h2 id="条件"><a href="#条件" class="headerlink" title="条件"></a>条件</h2><p>限制查询记录的条件——where（选择 Selection，只查询某几行）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from table where `stu_sex`=&#x27;M&#x27; or `stu_name`=&#x27;Jingqing&#x27;;<br></code></pre></td></tr></table></figure><p>多个条件之间用 or 连接就是或者的关系，满足一个即可；用 and 连接就是和的关系，同时满足。</p><p><em>性能问题，一般不用 or 而使用 union，结果取并集。</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from table where `stu_sex`=&#x27;M&#x27; <br>union<br>select * from table where `stu_name`=&#x27;Jingqing&#x27;;<br></code></pre></td></tr></table></figure><p><em><strong>如果在 union 后面加 all，意思是并集不会去掉重复的部分，相交的部分会显示两遍。</strong></em></p><p>类似 10&lt;x&lt;30 的形式不可以直接写两个等式，要拆成 x&gt;10 and x&lt;30 。</p><p>这里的字段如果是数字类型的，也可以进行 + - * / % mod（也是取余）以及 &lt; &gt;  = &gt;= &lt;= &lt;&gt; 等形式的运算。</p><p>还有一种条件写法是 <code>between …… and ……</code> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from table where `stu_age` between 10 and 30;-相当于 &lt;=30 and &gt;=10<br></code></pre></td></tr></table></figure><h2 id="分支结构"><a href="#分支结构" class="headerlink" title="分支结构"></a>分支结构</h2><p>如果 sex 是布尔值，1代表男，0代表女，怎么把0和1处理成对应的性别？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select if(`stu_sex`,&#x27;男&#x27;,&#x27;女&#x27;) as &#x27;性别&#x27; from `tb_student`;-- 有点类似三目运算符 ?:<br></code></pre></td></tr></table></figure><p>if 中第一项可以是表达式，如 age &gt; 10.</p><p><strong>这个是 Mysql 数据库的方言，只能在 Mysql 数据库中生效。</strong>比如 Oracle 数据库中对应的函数是 decode，不能通用。</p><p>通用的分支结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select case `sex` when 1 then &#x27;男&#x27; else &#x27;女&#x27; end as &#x27;性别&#x27; from `tb_student`;-- end 表示条件判断结束<br></code></pre></td></tr></table></figure><h2 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h2><p>如：查询所有姓王的学生。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from `student` where `stu_name` like &#x27;王%&#x27;;-- % 代表零个或多个任意字符，表示查询姓的且名字只有2个字的学生<br>select * from `student` where `stu_name` like &#x27;王_&#x27;;-- _ 代表一个任意字符，表示查询姓王的且名字只有2个字的学生<br></code></pre></td></tr></table></figure><p>这里和正则表达式有一定联系，之后会单独学习。</p><p>事实上 Mysql 语句也支持正则表达式的，正则表达式也比这两种模糊查询的通配符功能强大很多。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from `student` where `字段名` regexp &#x27;正则表达式&#x27;;<br></code></pre></td></tr></table></figure><p>模糊查询，特别是 % 在左侧的时候，性能还是比较差的，尽量避免。</p><h2 id="空值处理，以及三值逻辑"><a href="#空值处理，以及三值逻辑" class="headerlink" title="空值处理，以及三值逻辑"></a>空值处理，以及三值逻辑</h2><p><strong>下面两种写法是错误的！</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from `student` where `stu_address` = null;<br>select * from `student` where `stu_address` &lt;&gt; null;<br></code></pre></td></tr></table></figure><p>因为表达式产生的值有三种（三值逻辑），true, false, unknown。和空值做运算的时候，就会得到 unknown 的结果。</p><p>正确做法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from `student` where `stu_address` is null;<br>select * from `student` where `stu_address` is not null;<br></code></pre></td></tr></table></figure><h2 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select distinct `字段名` from `表名`;<br></code></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `字段名` from `表名` order by `字段名1` asc, `字段名2` desc; -- asc: 默认，ascending，升序；desc：descending，降序<br></code></pre></td></tr></table></figure><p>order by 后面跟多个字段，就是先按字段1排序，字段1相等时再按字段2排序。</p><h2 id="当前日期"><a href="#当前日期" class="headerlink" title="当前日期"></a>当前日期</h2><p>curdate()获取当前日期，使用 datediff() 函数可以和出生日期做差获取年龄。</p><p>now()获取当前年月日时分秒（datetime）。</p><h2 id="取整"><a href="#取整" class="headerlink" title="取整"></a>取整</h2><p>floor() 函数是下取整。floor(3.99) = 3.</p><p>ceil() 函数是向上取整，ceil(3.1) = 4.</p><p>round() 函数是四舍五入，第二个参数是保留几位小数的意思，round(3.5,0)=4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select floor(datediff(curdate(),`date`)/365) from `staff`;<br></code></pre></td></tr></table></figure><p><em>可以通过？ functions 查看函数一览。还会有相应的例子提示~</em></p><h2 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h2><p>描述性统计信息：包括集中趋势和离散趋势。</p><p>集中趋势：平均值，中位数等。</p><p>离散趋势：方差，标准差等。</p><p>聚合函数属于 SQL 语句，所有 DBMS 都能用。</p><ul><li><p>min(字段名)</p></li><li><p>max(字段名)</p></li><li><p>avg(字段名) <em>做计算的时候会忽略 null 值</em></p></li><li><p>sum(字段名)</p></li><li><p>count(字段名) <em>做计算的时候会忽略 null 值</em></p><p><em><strong>如果利用 sum()和count() 做除法求平均值，要考虑空值对结果的影响。</strong></em></p><p><em>比如有10个学生，但有一个学生的成绩为空，如果忽略掉成绩为空的学生， sum(score) / count(stu_id) 就是错误的，因为是9个人的成绩 / 10.</em> </p><p><em>如果成绩为空的学生视为 = 0，就要用 sum(score) / count(stu_id)，或者对 avg() 函数做如下处理：</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select avg(ifnull(`score`,0)) from student;<br></code></pre></td></tr></table></figure><p><em>ifnull() 函数也是 mysql 的方言，类似 if。在 Oracle 中就是 nvl。</em></p><p>coalesce() 也可以处理空值，是标准数据库的函数，它会取第一个非空值。如：coalesce(score, 0)。</p></li><li><p>std(字段名)，计算标准差，越小说明越稳定。</p><ul><li>std(), stddev() 和 stddev_pop()：所有数据总体的标准差</li><li>stddev_samp()：样本标准差，抽样计算。</li></ul></li><li><p>variance(字段名)，计算方差，标准差的平方。</p><ul><li>variance(), var_pop()</li><li>var_samp()</li></ul></li></ul><h2 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h2><p>聚合函数通常和分组一起使用。分组是非常重要的操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from `student` group by `sex`;<br></code></pre></td></tr></table></figure><p>PS： Excel 的数据透视表有同样功能：</p><p>插入-数据透视表-选择所有数据范围（选中左上角的单元格，Ctrl + Shift + →，Ctrl + Shift + ↓选中所有有数据的单元格）-选择放置数据表的位置（选择某一列的第一行的单元格，如 J1 或 K1 ）-确认</p><p>行里选择要分组的列（如：销售区域）值选择要分组运算的对应值（如：销售额），值默认做的就是求和运算。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from `student` group by `sex` with rollup; -- with rollup: 在最后一列求个总和<br></code></pre></td></tr></table></figure><p>group by 后面也可以跟多个字段，先按第一个分组，然后在每个组里再按第二个分组。</p><p><strong>如果进行了条件查询，用到了 group by 得到的结果，不能直接用 where，要使用 having.</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_id`,avg(score) from `Score` where avg(score)&gt;90 group by `stu_id`; -- 错误<br>select `stu_id`,avg(score) from `Score` group by `stu_id` having avg(score)&gt;90; -- 正确<br></code></pre></td></tr></table></figure><p>分组以前的筛选： where, 写在分组后</p><p>分组以后的筛选： having, 写在分组后。</p><p><em>其实这里个人有一个小误区：select 不用非得查出 avg() 才能做 having 条件判断。比如要查询平均成绩大于90分的学生学号，就可以改成：</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_id` from `tb_record` group by `stu_id` having avg(score)&gt;90;<br></code></pre></td></tr></table></figure><p><em>也是没有问题的。</em></p><p>查询 1111,2222,3333三门课程平均成绩大于90分的学生的平均成绩：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_id`,avg(score) from `Score` where `cou_id` in (1111,2222,3333) group by `stu_id` having avg(score)&gt;90;<br></code></pre></td></tr></table></figure><h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><p>查询年龄最大的学生的姓名。</p><p>可以先查询出最大年龄，再查询学生表中年龄等于这个值的学生姓名。</p><p>一种方法是嵌套子查询：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_name` from `tb_student` <br>where `stu_birth` = (<br>    select min(`stu_birth`) from `tb_student`<br>);<br></code></pre></td></tr></table></figure><p>另一种方法是定义变量：mysql 定义变量，需要加@（但是不能把多个值赋给一个变量！）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">set @a =(select min(`stu_birth`) from `tb_student`);<br>select @a; -- 可以查看一下 @a 的值。<br></code></pre></td></tr></table></figure><p>如果子查询有很多结果，满足其中一个即可：不能用等号，要用 <strong>in</strong> 。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `name` from `tb_student` <br>where `stu_id` in (<br>    select `stu_id` from `tb_record` group by `stu_id` where count(*)&gt;=2<br>); -- 查询出所有至少选了2门课的学生姓名<br></code></pre></td></tr></table></figure><p>如果用了等号，报错： subquery returns more than 1 row.</p><h2 id="多表连接"><a href="#多表连接" class="headerlink" title="多表连接"></a>多表连接</h2><h3 id="笛卡尔积"><a href="#笛卡尔积" class="headerlink" title="笛卡尔积"></a>笛卡尔积</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_name`,`stu_id`,`col_name`,`tb_college`.`col_id` from `tb_student`,`tb_college`;<br></code></pre></td></tr></table></figure><p>如果不加条件的从两个表中投影出数据，就会获得两个表中所有记录的笛卡尔积，即排列组合。</p><p>本例中，学生表和学员表中都有学院号 col_id 字段，因此投影该字段的时候需要指明是从那个表中得到的，用 表名.字段 指定。</p><h3 id="自然连接"><a href="#自然连接" class="headerlink" title="自然连接"></a>自然连接</h3><ol><li>有外键约束：利用外键连接，不用加条件，自动连接。</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_name`,`stu_id`,`col_name`,`tb_college`.`col_id` <br>from `tb_student` natural join `tb_college`;<br></code></pre></td></tr></table></figure><ol start="2"><li>没有外键，但是两个表中有同名的列（如本例中两个表中都有 col_id 列）也可以进行自然连接。<em>注意：不管有几个同名的列，所有列都会作为连接的条件！</em></li><li>如果没有外键也没有同名列，就只会得到笛卡尔积的结果。</li></ol><h3 id="内-外连接"><a href="#内-外连接" class="headerlink" title="内 / 外连接"></a>内 / 外连接</h3><p>另一种连接方式是 inner join / outer join </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_name`,`stu_id`,`col_name`,`tb_college`.`col_id` <br>from `tb_student` inner join `tb_college` <br>on `tb_student`.`col_id`=`tb_college`.`col_id`; -- 查询所有学生的姓名、学号、对应的学院名、学院号<br></code></pre></td></tr></table></figure><p>inner join：只有左表中有的记录，而且在右表中能找到对应的记录才会呈现出来。</p><p>left outer join：左表中所有内容都会呈现出来，右表中如果没有对应的内容补 null。</p><p>right outer join：右表中所有内容都会呈现出来，左表中如果没有对应的内容补 null。</p><p>full outer join：左右表数据全拿出来，没有对应的内容都补 null。但是 mysql 并不支持全外连接，可以用左外连接 union 右外连接代替。</p><h3 id="θ-连接"><a href="#θ-连接" class="headerlink" title="θ 连接"></a>θ 连接</h3><p>添加条件使得两个表中的数据相互对应：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_name`,`stu_id`,`col_name`,`tb_college`.`col_id` from `tb_student`,`tb_college` <br>where `tb_student`.`col_id`=`tb_college`.`col_id`; -- 查询所有学生的姓名、学号、对应的学院名、学院号<br></code></pre></td></tr></table></figure><h3 id="三表连接"><a href="#三表连接" class="headerlink" title="三表连接"></a>三表连接</h3><p>链接条件用多个条件筛选。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_name`,`tb_student`.`stu_id`,`tb_course`.`cou_name`,`tb_course`.`cou_id` from `tb_student`,`tb_course`, `tb_record`<br>where `tb_course`.`cou_id`=`tb_record`.`cou_id` <br>and `tb_student`.`stu_id`=`tb_record`.`stu_id`;<br><br>select `stu_name`,`tb_student`.`stu_id`,`tb_course`.`cou_name`,`tb_course`.`cou_id` from `tb_student`<br>inner join `tb_record`<br>on `tb_student`.`stu_id`=`tb_record`.`stu_id`<br>inner join `tb_course`<br>on `tb_course`.`cou_id`=`tb_record`.`cou_id`<br>where `tb_course`.`cou_name` is not null; -- where 写在最后<br><br>select `stu_name`,`tb_student`.`stu_id`,`tb_course`.`cou_name`,`tb_course`.`cou_id` from `tb_student`<br>natural join `tb_record`<br>natural join `tb_course`;<br></code></pre></td></tr></table></figure><h2 id="查询小技巧"><a href="#查询小技巧" class="headerlink" title="查询小技巧"></a>查询小技巧</h2><p>百度搜索：filetype:pdf python 搜索带 python 名的 pdf 文件</p><p>python -推广链接 不想看到广告推送</p><p>site:zhihu.com python 只搜索知乎里的 python 内容</p><h2 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h2><p>limit 是 mysql 的方言。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select * from `tb_student` order by `stu_id` desc limit 5;-- 只显示前五条数据.如果不足5条，就有几条显示几条。<br>select * from `tb_student` order by `stu_id` desc limit 5 offset 3;-- 只显示4-8条数据(跳过前3条数据)<br>select * from `tb_student` order by `stu_id` desc limit (3,5);-- 只显示4-8条数据(跳过前3条数据)<br></code></pre></td></tr></table></figure><h2 id="派生表"><a href="#派生表" class="headerlink" title="派生表"></a>派生表</h2><p>select 的返回值也是一个关系。（关系运算的封闭性，关系的运算仍然是关系）</p><p>查询学生姓名和平均成绩。</p><p>查询学生学号和平均成绩的话，可以在 tb_record 表里根据学生学号分组，然后投影出来。但查询学生姓名有需要拿着对应的学号去学生表里连接，要怎么把学生姓名和学生平均成绩关联起来呢？</p><p>先通过一个查询，得到一个派生表：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_id`,avg(score) from `tb_record` group by `stu_id`;<br></code></pre></td></tr></table></figure><p>然后把其结果作为一个新表，和学生表做关联。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select `stu_name`,`avg(score)`from `tb_student`<br>natural join (select `stu_id`,avg(score) from `tb_record` group by `stu_id`) `tb_derived`;-- 最后是起别名的意思<br></code></pre></td></tr></table></figure><p><strong>临时表必须要起别名！！！</strong>不然报错。</p><p><strong>注意：查询学生姓名和选课数 和 查询每个学生姓名和选课数的区别！</strong>因为有的同学没有选课，如果用 natural join，inner join，就只能查询到选了课的学生，<strong>没选课的学生就不会查出来。</strong></p><p>如果要查询每个学生，就要用到外连接。没选课的学生选课数显示 null。（当然可以用 ifnull(字段, 0) 把 null 替换成 0。记得 ifnull 是 mysql 方言）。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;查询语句。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;本节中使用到的例子：主要包含 tb_student 学生表（学号 stu_id，姓名 stu_name，地址 stu_address,所属学院号 col_id）&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;tb_record 记录表，连接学生和所选的课</summary>
      
    
    
    
    <category term="database" scheme="http://example.com/categories/database/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>SQL 语句——DML</title>
    <link href="http://example.com/2022/04/23/SQL%20%E8%AF%AD%E5%8F%A5%E2%80%94%E2%80%94DML/"/>
    <id>http://example.com/2022/04/23/SQL%20%E8%AF%AD%E5%8F%A5%E2%80%94%E2%80%94DML/</id>
    <published>2022-04-22T16:00:00.000Z</published>
    <updated>2022-04-23T05:00:24.898Z</updated>
    
    <content type="html"><![CDATA[<h2 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">insert into `表名` values (对应字段值)(对应字段值)(对应字段值);//写多个括号，可以一次填写多行<br>insert into `表名` (要填写的字段) values (对应字段值); //省略不写的一定是有默认值的或者可以非空的<br></code></pre></td></tr></table></figure><p>注意：对应字段值一定要和字段相匹配。如果有默认值的字段也不要省略不写，要写上 <code>default</code> ，不然系统也难以分辨哪一项使用默认值。</p><p><em>日期可以写字符串 2002-01-01，会自动转换</em></p><p>插入完后显示：1 row(s) affected（如果写了多个括号，一次插入多行，会显示多个 row(s) affected）是影响了几行的意思。</p><p><strong>如果主键、unique 的记录重复会报错。</strong>报错显示： <code>duplicate key for key &#39;定义的约束键名称&#39;</code></p><p><strong>填写了规定的 check 以外的内容会报错。</strong>报错显示：<code>check constraint &#39;定义的约束键名称&#39; is violated.</code> 不过字符串不区分大小写，规定性别只能填 ‘F’ ‘M’ 的话，填 ‘f’ ‘m’ 也行。</p><p><strong>如果对应的外键在原表中没有对应的记录会报错。</strong> 报错显示：<code>cannot add or update a child row: a foreign constraint fails</code> 比如学生表的学院号参照了学院表，但是有学院表中不存在的学院号时。</p><p><strong>如果没有给 NOT NULL且没有默认值的字段赋值时会报错。</strong> 报错显示：<code>Field &#39;字段名&#39; doesn&#39;t have a default value.</code> 尽量不要出现空列，之后处理空值会带来很多麻烦。哪怕用空字符串、0、1代替也更好一些。</p><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mysql">delete from `表名`;//这可不兴用啊！<br>delete from `表名` where `字段名`=&#x27;要删除的记录的对应字段值&#x27;;//不等于可以用&lt;&gt;，有的 DBMS 支持!=<br>delete from `表名` where `字段名` = &#x27;字段值&#x27; or `字段名` = &#x27;字段值&#x27;;//删除多条语句<br>delete from `表名` where `字段名` in (&#x27;字段值&#x27;,&#x27;字段值&#x27;);//删除多条语句<br></code></pre></td></tr></table></figure><p>但是如果要删除的这条记录在其他表里是外键，就无法删除。报错显示： <code>Cannot delete or update a parent row</code> 。</p><p>删除了外键约束之后就可以随意修改两个表对应的值而不报错了。</p><p>另一种删除表的方式是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">truncate table `表名`;<br></code></pre></td></tr></table></figure><p>截断表，这个比 delete 还要危险。delete 了表之后，如果有日志，还是可以找回原数据的。截断就算有日志也没法恢复。</p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">update `表名` set `列名` = &#x27;值&#x27;;//把这一列的数据全都改成这个值，不常用<br>update `表名` set `列名` = &#x27;值&#x27;,`列名` = &#x27;值&#x27;,`列名` = &#x27;值&#x27; where `字段`=&#x27;值&#x27;;//限制条件，只修改某几个记录<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;插入&quot;&gt;&lt;a href=&quot;#插入&quot; class=&quot;headerlink&quot; title=&quot;插入&quot;&gt;&lt;/a&gt;插入&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s</summary>
      
    
    
    
    <category term="database" scheme="http://example.com/categories/database/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>关系型数据库介绍</title>
    <link href="http://example.com/2022/04/21/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D/"/>
    <id>http://example.com/2022/04/21/%E5%85%B3%E7%B3%BB%E5%9E%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E4%BB%8B%E7%BB%8D/</id>
    <published>2022-04-20T16:00:00.000Z</published>
    <updated>2022-04-25T12:56:18.717Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph LR<br>R[关系型数据库]--&gt;T[理论基础]<br>R--&gt;S[具体表象]<br>R--&gt;L[编程语言 SQL]<br>T--&gt;A[关系代数]<br>T--&gt;C[关系运算]<br>T--&gt;P[一阶谓词逻辑]<br>S--&gt;Ta[二维表]<br>L--&gt;D[DDL]<br>L--&gt;M[DML]<br>L--&gt;Q[DQL]<br>L--&gt;DCL[DCL]<br></code></pre></td></tr></table></figure><p>DDL: create / drop / alter （database 或 schema 数据库名 / table 表名）</p><p>DML: insert / update / delete</p><p>DQL: select …… from</p><p>DCL: grant（授权） / revoke（召回权限）</p><table><thead><tr><th>正式的关系模型术语</th><th>非正式的日常用语</th></tr></thead><tbody><tr><td>关系（relation）</td><td>表（table）</td></tr><tr><td>元组（tuple）记录</td><td>行（row）或记录（record）</td></tr><tr><td>势（cardinality）</td><td>行数（number of rows）</td></tr><tr><td>属性（attribute）</td><td>列（column）或字段（field）</td></tr><tr><td>度（degree）</td><td>列数（number of columns）</td></tr><tr><td>定义域（domain）</td><td>列的取值集合（pool of legal values）</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="database" scheme="http://example.com/categories/database/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>SQL 语句——DDL</title>
    <link href="http://example.com/2022/04/19/SQL%20%E8%AF%AD%E5%8F%A5%E2%80%94%E2%80%94DDL/"/>
    <id>http://example.com/2022/04/19/SQL%20%E8%AF%AD%E5%8F%A5%E2%80%94%E2%80%94DDL/</id>
    <published>2022-04-18T16:00:00.000Z</published>
    <updated>2022-04-22T16:11:37.245Z</updated>
    
    <content type="html"><![CDATA[<p>学习于：b站 骆昊jackfrued 老师的网课</p><table><thead><tr><th>SQL 语句</th><th>作用</th><th>使用示例</th></tr></thead><tbody><tr><td>create</td><td>创建数据库 / 表</td><td>create database `数据库名`; / create table `表名` ( 字段描述 );</td></tr><tr><td>drop</td><td>删除数据库 / 表</td><td>drop database `数据库名`; / drop table `表名`;</td></tr><tr><td>use</td><td>选中数据库</td><td>use `数据库名`;</td></tr><tr><td>alter</td><td>更改数据库 / 表信息</td><td>alter table `表名` add constraint `约束名` unique (`字段名`);</td></tr></tbody></table><p>PS： </p><ol><li><p>修改表的引擎 / 更改自增约束初始值是在 create table `表名` () 后面添加的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table `表名`(<br><br>)engine = innodb auto_increment=2 comment &#x27;表示例&#x27;;<br></code></pre></td></tr></table></figure></li></ol><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">primary key (`列名`),<br></code></pre></td></tr></table></figure><p><em>复合主键语法上没错，但是开发使用时非常不好用，需要至少两条字段才能唯一确定一条记录。一般不会用。</em></p><p><em>如选课表，有课程号和学生学号字段，合在一起作为复合主键可以唯一确定记录。但是一般会在新建一个选课id之类的可以唯一确定所有选课记录的字段作为主键。</em></p><h3 id="自增约束、非空约束"><a href="#自增约束、非空约束" class="headerlink" title="自增约束、非空约束"></a>自增约束、非空约束</h3><p>都在字段描述后面写即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">`col_name` int auto_increment not null comment &#x27;列名&#x27;,<br></code></pre></td></tr></table></figure><p>以下三种可以在创建表时写，也可以之后写<code>alter table 表名 add constraint...</code>。</p><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">constraint `uk_col_name` unique (`col_name`),<br></code></pre></td></tr></table></figure><p>类似主键约束，唯一约束也可以设定多个字段，再括号里多写几个字段就行（如选课记录，一个学生不能重复选课，学生学号和课程编号不能重复）</p><h3 id="检查约束"><a href="#检查约束" class="headerlink" title="检查约束"></a>检查约束</h3><p>检查约束可以帮忙检查数据合法性，但是相对的，肯定对性能有损耗。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">constraint `ck_col_sex` check (`col_sex`=&#x27;M&#x27; or `col_sex`=&#x27;F&#x27;),<br></code></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>首先在需要加外键的表中添加和另一个表的主键一样格式（名称可以不一样）的字段。</p><p>外键约束也会损耗性能，要检查对应表中对应字段是否对应。很多公司都不用外键约束，会通过其他方法确定两表特定字段是否对应。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">constraint `fk_col_id` foreign key (`在本表中的字段名`) references `另一个表名` (`在该表中的主键名`),<br></code></pre></td></tr></table></figure><p>结尾其实还有一句默认的话：<code>on delete restrict on update restrict</code> ，就是限制不要随便删除或修改的意思，因为会牵连到别的表。</p><p>如果改成 <code>on delete cascade on update cascade</code> ，修改时就会发生级联，如果删除这个表中的记录中某一字段的数据另一个表中用到了，就会把另一个表中对应记录也删除。</p><p>如果改成 <code>on delete set null</code> ，就是删除这个记录时，在另一个表中对应字段的记录不会删除，而只是把这格子短的位置变成空（<strong>当然，前提是该字段数据可以为空！</strong>）</p><p>最好还是使用默认的 restrict 。</p><p><em>一对多时，多的一方需要加外键约束。</em></p><p>删除约束：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">alter table `表名` drop constraint `要删除的约束名`;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;学习于：b站 骆昊jackfrued 老师的网课&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;SQL 语句&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;th&gt;使用示例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;create&lt;/td&gt;
&lt;t</summary>
      
    
    
    
    <category term="database" scheme="http://example.com/categories/database/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 数据类型</title>
    <link href="http://example.com/2022/04/19/Mysql%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://example.com/2022/04/19/Mysql%20%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</id>
    <published>2022-04-18T16:00:00.000Z</published>
    <updated>2022-04-23T10:23:10.420Z</updated>
    
    <content type="html"><![CDATA[<p>数据类型可以通过 <code>? data types</code> 查看说明，每种数据类型也可以通过 <code>? 数据类型</code> 查看。</p><p><em>除了data types 其他可以用?查看的内容可以输入 <code>? contents</code> 查看。</em></p><table><thead><tr><th>数据类型</th><th>作用</th></tr></thead><tbody><tr><td>整数 (tinyint, smallint, mediumint, int, bigint)</td><td>都是整数型，表示范围为1,2,3,4,8 B（结尾还可以加 unsigned）</td></tr><tr><td>字符串 (char(位数), varchar(位数), text)</td><td>char 长度固定，varchar 长度可变</td></tr><tr><td>小数 (float, double, decimal(总位数, 小数点后位数))</td><td>不要用 float, double！</td></tr><tr><td>时间日期 (year, date, time, datetime, timestamp)</td><td>date：年月日<br />time：时间<br />datetime：年月日时分秒<br />timestamp：时间戳，现在距离 1970-1-1 的毫秒数</td></tr><tr><td>Mysql 中的枚举类型 (enum, boolean)</td><td></td></tr></tbody></table><p>PS: </p><ol><li><p>虽然 text 等类型可以存储很大的数据，不过大数据一般还是不会直接往数据库里存储。如图片，数据库中一般存储其路径、链接。如果非要存储，有 blob (binary large object)。</p></li><li><p>金额等小数一般不会用小数的数据类型存储，而是整数类型/100使用。因为小数形式有误差，比如0.1+0.2=0.30000000004.</p></li><li><p>decimal 这种变长的数据，使用时速度比定长数据慢。而且 decimal 表示范围也有限，不如直接用 bigint。</p></li><li><p>时间戳是有表示范围的，毕竟是个有上限的数，到2038年左右就不好用了。</p><blockquote><p>这里了解到了一个很有趣的[“千年虫”问题](<a href="https://zhuanlan.zhihu.com/p/305603895">漫画：什么是“千年虫”问题？ - 知乎 (zhihu.com)</a>)。</p><p>Grace Murray Hopper，最早的现代编译器、商用编程语言发明者，Bug 和 Debug词汇的流行使用也与她有关。</p><p>早期计算机资源十分稀缺，内存空间必须精打细算。Grace Murray Hopper 采用6位数字组合来存储日期信息 （比如2022/04/19，就是22/04/19）</p><p>尽管节约了内存空间，但是40年后1999-&gt;2000年时，问题就出现了……对计算机来说，相当于99-&gt;00年，年份倒退了。小到银行存款利息变成负的，大到飞机、发电厂运作、核弹发射……都可能出现故障，后果不堪设想。</p><p>如果修改所有程序，是改不过来的。于是程序员们主要采取两种方法：</p><ol><li>只修改核心关键的医疗、航空、金融、军事领域的程序；</li><li>对于大多数不那么核心的程序，采用时间窗口的方式。1910年代表2010年，1920年代表2020年，暂缓问题。在这20年期间，大多数程序设备都已更新换代，现如今千年虫问题已经不那么严重了。</li></ol></blockquote><p>回到刚才的话题，因此时间戳也并不推荐使用。</p></li></ol><p>5.7 之后版本的 Mysql 支持 json 属性，以键值对的方式存储，内容相对灵活。因为虽然数据库结构相对严谨，但是很多时候并不是所有属性都能考虑得到（如二手交易平台，不同的售卖品属性差的很多，如自行车和冰箱）加入相对灵活的 json ，一定程度上就能解决这类问题。包括以前 Mysql 没有这个功能的时候，许多公司也会建一个 varchar() 字段来存储 json 字符串。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;数据类型可以通过 &lt;code&gt;? data types&lt;/code&gt; 查看说明，每种数据类型也可以通过 &lt;code&gt;? 数据类型&lt;/code&gt; 查看。&lt;/p&gt;
&lt;p&gt;&lt;em&gt;除了data types 其他可以用?查看的内容可以输入 &lt;code&gt;? contents&lt;/cod</summary>
      
    
    
    
    <category term="database" scheme="http://example.com/categories/database/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>Mysql Command Line Client 的使用，及常用命令</title>
    <link href="http://example.com/2022/04/18/Mysql%20Command%20Line%20Client%20%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%8C%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://example.com/2022/04/18/Mysql%20Command%20Line%20Client%20%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%8C%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2022-04-18T03:31:43.820Z</published>
    <updated>2022-04-18T03:37:32.364Z</updated>
    
    <content type="html"><![CDATA[<p>Mysql Command Line Client 是官方提供的客户端。之前一直直接用 Windows 的命令提示符窗口输入 Mysql 语句，不知道两者具体区别在哪里。不过还是重新安装了一个尝试一下。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>MYSQL 文件夹里自带有 Installer，在里面选中对应电脑版本的 Mysql Server 下载即可。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>由于安装目录和 Mysql 不一致，缺少配置文件 my.ini 导致 Mysql Command Line Client 一开始无法使用。直接把 Mysql 里的 my.ini 复制到 Mysql Server 目录下就可以了。</p><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p>其实在 cmd 窗口中登录 mysql 时也会给出相应的命令提示，只是当时没有仔细研究。正好借使用 Mysql Command Line Client 的机会了解一下常用的命令。</p><p>开始菜单中出现了两种不同的 Mysql Command Line Client 窗口，其中一种支持 Unicode ，一种不支持。打开后即会提示输入登录密码，登录后就和 cmd 窗口中操作基本一致。</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>\h, ?, ?</td><td>获取帮助</td></tr><tr><td>\c</td><td>清除前面输入的内容（内容输入有误时使用）</td></tr><tr><td>\R</td><td>修改 每次输入命令前左侧的提示样式（默认：’mysql&gt;’）</td></tr><tr><td>? 需要查看帮助的命令;</td><td>显示该命令的帮助（如：? show）</td></tr><tr><td>show databases;</td><td>查看所有数据库</td></tr><tr><td>use ‘数据库名’;</td><td>选中某个数据库</td></tr><tr><td>（选中某个数据库后）show tables;</td><td>查看当前数据库中所有表</td></tr><tr><td>exit / quit</td><td>退出</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Mysql Command Line Client 是官方提供的客户端。之前一直直接用 Windows 的命令提示符窗口输入 Mysql 语句，不知道两者具体区别在哪里。不过还是重新安装了一个尝试一下。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class</summary>
      
    
    
    
    <category term="tools" scheme="http://example.com/categories/tools/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>ER 和 EER 模型</title>
    <link href="http://example.com/2022/04/18/ER%20%E5%92%8C%20EER%20%E6%A8%A1%E5%9E%8B/"/>
    <id>http://example.com/2022/04/18/ER%20%E5%92%8C%20EER%20%E6%A8%A1%E5%9E%8B/</id>
    <published>2022-04-17T16:00:00.000Z</published>
    <updated>2022-04-21T08:01:24.456Z</updated>
    
    <content type="html"><![CDATA[<p>本文思路主要来源于<a href="https://www.bilibili.com/video/BV1rP4y157jW?spm_id_from=333.999.0.0">骆昊jackfrued 老师的网课</a><br>仅供本人学习参考，未做其他用途！</p><p>在此也建议读者通过老师的课程学习。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>为什么要有 ER 图和 EER 图的存在？</p><p><strong>真正做项目、设计数据库时，</strong>实际并没有这么简单，比如还有很多用户看不到、但为了方便 DBA 使用而创建的字段。如 id，一般还会有两条 Date 字段（一表示这条记录被创建的时间，二表示这条记录最后更新的时间），以及预留一个 VARCHAR / json 字段；还有一些其他注意事项（比如 auto-increment 约束其实开发中不常用，更多使用算法比如分布式 ID 生成算法（如 SnowFlake……）当然对课程来说这并不重要）<strong>是不可能一上来就写 SQL 语句的，需要先设计表的结构和表之间的关系。</strong></p><h3 id="ER-模型"><a href="#ER-模型" class="headerlink" title="ER 模型"></a>ER 模型</h3><p>ER 图（Entity Relationship, 实体关系）因此出现。下图是一个 ER 图的示例，其中矩形框代表：表（也就是实体），椭圆框代表：表中的字段（实体的属性），菱形框代表：关系，在连接线上表明了关系的重数。</p><p><img src="https://img-blog.csdnimg.cn/img_convert/e154bec557baf860b9da8b406aa2b411.png" alt="百度百科图片"></p><p>相较于大段的 SQL 建表语句，只要能看懂 ER 图，表的结构、关系一目了然。</p><h3 id="EER-模型"><a href="#EER-模型" class="headerlink" title="EER 模型"></a>EER 模型</h3><p>相较 ER 模型多了泛化层次、汇集层次、弱实体等概念。</p><h4 id="泛化层次"><a href="#泛化层次" class="headerlink" title="泛化层次"></a>泛化层次</h4><p>包括 generalization 和 specialization （泛化和特化）、父类（superclass）和子类（subclass）的概念。</p><p><strong>子类父类</strong>就是类似 Java 的继承，如动物是父类，猫、狗是其子类。</p><p><strong>泛化</strong>又叫归纳，就是将几个类的共同属性提取出来作为父类；</p><p><strong>特化</strong>又叫演绎，就是在父类的基础上添加各自特殊的属性作为子类。</p><p>其中，子类和超类又有两个关系属性：mandatory 和 optional、disjoint 和 overlapping。</p><p><strong>mandatory / optional</strong>：父类中的所有属性都必须包含在每一个子类中 / 不用全部继承，选择部分继承即可（完全性限制）</p><p><strong>disjoint / overlapping</strong>：继承同一个父类的几个子类之间是否可以有相交的属性（相交性限制）</p><p><img src="https://pic1.zhimg.com/80/v2-11dfbdfea0c8705a7e425554b66ef610_1440w.jpg" alt="img"></p><p>图中 运输工具是父类，飞机、火车、汽车是子类。圆圈中写 D / O，表示 disjoint / overlapping。父类和圆圈之间是双实线，表示是 mandatory 完全性继承。</p><h4 id="汇集层次"><a href="#汇集层次" class="headerlink" title="汇集层次"></a>汇集层次</h4><p>Aggregation, 汇集层次不再有父类子类的区别，而是由……组成的区别。</p><p><img src="https://pic4.zhimg.com/80/v2-bcf4d6b1f89bc0b8e12f7f835518537b_1440w.jpg" alt="img"></p><p>如图，房间、门窗、电脑、投影仪等是教室的组成部分，不是继承关系。</p><h4 id="弱实体"><a href="#弱实体" class="headerlink" title="弱实体"></a>弱实体</h4><p>一种实体只有另一种实体存在的时候才有意义。如父母和子女，少了一方另一方就没有意义了。</p><p><img src="https://pic4.zhimg.com/80/v2-2891cd3fb7b84a5b98e158fa77cd3cdb_1440w.jpg" alt="img"></p><p>Workbench 等工具支持画 ER 图，甚至画好后可以自动生成 SQL 语句建表。 Workbench 中的图是 EER 图（扩展的ER 图）</p><p><img src="https://img-blog.csdnimg.cn/img_convert/b7d05f2614049fce76e68e0121c805a0.png" alt="EER 图示例"></p><p>在 EER 图下，点击 DATABASE - FORWARD ENGINEER 正向工程，可以选择要生成的表、字段，生成 SQL 语句建立表。</p><p><em>自动生成的 SQL 语句中，外键下方有两句话<code>ON DELETE NO ACTION</code> <code>ON UPDATE NO ACTION</code>，意为：当外键参考的主键修改/删除时，外键所在的表会受到什么样的影响？——不采取任何行动。建议去掉这两句话。如果去掉，就不能随便修改/删除外键在使用的主键。</em></p><p>同样地，在 SQL 语句页面，点击DATABASE - REVERSE ENGINEER 反向工程，可以根据表的结构生成 EER 图。</p><p><em>Power Designer 建模工具，也支持正 / 反向工程，可以生成 SQL 方言。完整版付费。</em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文思路主要来源于&lt;a href=&quot;https://www.bilibili.com/video/BV1rP4y157jW?spm_id_from=333.999.0.0&quot;&gt;骆昊jackfrued 老师的网课&lt;/a&gt;&lt;br&gt;仅供本人学习参考，未做其他用途！&lt;/p&gt;
&lt;p&gt;在</summary>
      
    
    
    
    <category term="database" scheme="http://example.com/categories/database/"/>
    
    
    <category term="problems" scheme="http://example.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习博客_1 介绍与安装</title>
    <link href="http://example.com/2022/04/14/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_1%20%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/"/>
    <id>http://example.com/2022/04/14/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_1%20%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AE%89%E8%A3%85/</id>
    <published>2022-04-13T16:00:00.000Z</published>
    <updated>2022-04-18T03:37:11.098Z</updated>
    
    <content type="html"><![CDATA[<p>以黑马程序员网课为主。</p><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Java是一个可以跨平台的语言，借助Java虚拟机（Java Virtual Machine, JVM）能够在任意操作系统（operating system, OS）上运行。</p><p>JVM: Java Virtual Machine，在 JRE 的 bin 目录下。JVM 本质上是一个程序，使得 Java 在不同平台上运行时不需要重新编译，只需要执行保存在某字节码文件（.class）中的指令，不管什么平台，只要装有相应平台的 JVM ，字节码文件就可以在该平台上运行。</p><p>JRE: Java Runtime Environment，运行只需要 JRE 就够了。</p><p>JDK: Java Development Kit，Java 程序开发工具包。</p><p><img src="https://s1.328888.xyz/2022/04/14/iUcNe.png" alt="123"></p><p>尽管 JRE 对于运行 java 文件已经足够，作为学习肯定还是要下载 JDK 的~</p><p>JDK 的安装目录如下：</p><table><thead><tr><th>JDK目录名称</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>存放工具命令，如：javac, java, etc.</td></tr><tr><td>conf</td><td>配置文件</td></tr><tr><td>include</td><td>某些平台特定的头文件</td></tr><tr><td>jmods</td><td>模块</td></tr><tr><td>legal</td><td>授权文档</td></tr><tr><td>lib</td><td>补充 JAR 包</td></tr><tr><td>其他</td><td>说明型文档</td></tr></tbody></table><h2 id="在-DOS-窗口下操作命令"><a href="#在-DOS-窗口下操作命令" class="headerlink" title="在 DOS 窗口下操作命令"></a>在 DOS 窗口下操作命令</h2><p>在一开始没有使用 IDEA 等集成开发环境的时候，直接在 DOS ( Disk Operating System ) 窗口运行。Windows 通过 <code>win+R</code> 打开运行窗口，输入 <code>cmd</code> 进入 DOS 窗口。</p><p>常用的DOS窗口命令：</p><table><thead><tr><th>操作</th><th>说明</th></tr></thead><tbody><tr><td><code>盘符名称</code>+<code>:</code>，如<code>D:</code></td><td>切换到该盘</td></tr><tr><td><code>dir</code></td><td>查看当前路径下的内容</td></tr><tr><td><code>cd 目录</code>，如<code>cd java</code></td><td>进入当前路径下的一个单级目录（cd 是 change directory 的意思）</td></tr><tr><td><code>cd ..</code></td><td>回退到上一级目录</td></tr><tr><td><code>cd 目录1\目录2\..</code></td><td>一次性进入多级目录</td></tr><tr><td><code>cd \</code></td><td>回退到盘符目录</td></tr><tr><td><code>cls</code></td><td>清屏</td></tr><tr><td><code>exit</code></td><td>退出 DOS 窗口</td></tr></tbody></table><h2 id="配置-PATH-环境变量"><a href="#配置-PATH-环境变量" class="headerlink" title="配置 PATH 环境变量"></a>配置 PATH 环境变量</h2><p>不得不说虽然之前学习其他语言的时候也做过很多次配置 PATH 环境变量的操作，但是这次才算理解一些意义。</p><p>开发 Java 的时候是肯定会用到 JDK 里的开发工具的，比如编译的 <code>javac</code> ，运行的 <code>java</code>。</p><p>但是没有配置环境变量的时候，cmd 无法直接使用 javac 文件，因为不知道 <code>javac.exe</code> 的路径。</p><p>所以需要输入 <code>&quot;JDK文件的目录\bin\javac.exe&quot; 需要编译的文件的目录\需要编译的文件.java</code> （可以把 javac 和 java 文件直接拖进去，就会自动生成目录）相当麻烦。</p><p>配置环境变量之后，直接在 cmd 窗口里输入 <code>javac 需要编译的文件.java</code> 就能编译。</p><p>配置方法：（ Windows 系统）</p><p>① 此电脑 – 属性 – 高级系统设置 – 环境变量，新建一个用户变量（建议命名和 Java 相关），并放入 JDK 文件夹的路径</p><p>② 在下方系统变量中选中 Path 变量 – 编辑 – 新建 – 命名（建议命名和 Java 相关），并放入 JDK 内 bin 文件夹的路径。</p><p>最后在DOS中输入<code>javac</code>，如果显示使用 javac 的提示信息说明配置成功。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以黑马程序员网课为主。&lt;/p&gt;
&lt;h2 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h2&gt;&lt;p&gt;Java是一个可以跨平台的语言，借助Java虚拟机（Java Virtual Machine, JVM</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习博客_2 入门——基础语法</title>
    <link href="http://example.com/2022/04/14/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_2%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
    <id>http://example.com/2022/04/14/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_2%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</id>
    <published>2022-04-13T16:00:00.000Z</published>
    <updated>2022-04-18T03:37:18.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HelloWorld-案例"><a href="#HelloWorld-案例" class="headerlink" title="HelloWorld 案例"></a>HelloWorld 案例</h2><p>学习的时候除了直接用记事本编辑，推荐使用 Notepad++ 。使用 Notepad++ 前需要设置：<code>设置 -- 首选项 -- 新建 -- 默认语言：Java -- 编码 ANSI</code>。</p><p>新建一个 HelloWorld.java 文件，通过记事本或 Notepad++ 编辑内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloWorld</span> &#123; <span class="hljs-comment">//这里的 class 类名必须和文件名一致</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123; <span class="hljs-comment">//main 方法</span><br>        System.out.println(<span class="hljs-string">&quot;Hello World!&quot;</span>); <span class="hljs-comment">// 单独输出一行的意思。注意大小写不可以出错</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在DOS窗口中进入当前文件所在目录，输入命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">javac HelloWorld.java //编译<br>java HelloWorld //运行<br></code></pre></td></tr></table></figure><p>这里可见，java 和 C、C++ 一样，属于编译型语言（一次性翻译全部源程序，然后执行机器语言程序），而不是解释型语言（源程序逐条翻译并执行）。</p><p>如果顺利运行，就会输出 <code>Hello World!</code>。</p><h2 id="Java-基础语法——主要与C语言比较有哪些不同"><a href="#Java-基础语法——主要与C语言比较有哪些不同" class="headerlink" title="Java 基础语法——主要与C语言比较有哪些不同"></a>Java 基础语法——主要与C语言比较有哪些不同</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>单行注释 <code>//</code> 、多行注释 <code>/* */</code> 都和C一样。还有一个文件注释 <code>/** */</code>暂时用不到，之后了解。</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>字母全部小写。</p><h6 id="数据类型："><a href="#数据类型：" class="headerlink" title="数据类型："></a>数据类型：</h6><p>整数型：byte, short, int, long</p><p>浮点型：float, double</p><p>字符型：char</p><p>布尔型：boolean</p><p>变量的定义和 c 相似，<code>int a=10;</code> 不能重复定义和未初始化就使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">long</span> l=<span class="hljs-number">1000000L</span>;<br><span class="hljs-type">float</span> f=<span class="hljs-number">1.235F</span>; <span class="hljs-comment">//防止 long 类型和 float 类型不兼容</span><br></code></pre></td></tr></table></figure><p>标识符命名：数字、字母（区分大小写）、_、$ 组成，数字不能开头。</p><p><em>命名规范：</em></p><p><em>方法和变量：一个单词时，首字母大写；标识符由多个单词组成时：小驼峰命名法</em></p><p><em>类名：大驼峰命名法</em></p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>+，-，*，/，%，</p><p>+=，-=，*=，/=，%=（隐含了强制类型转换）</p><p>++，–</p><p>==，&gt;=，&lt;=，&gt;，&lt;，!=</p><p>? : </p><p>&amp;，|，^，!（逻辑运算符）</p><p>&amp;&amp;，||（短路逻辑运算符，如果左边足以判断表达式的结果，右边就不会执行）</p><p>与 C 不同的是，Java 里的 + 号可以进行字符串拼接。字符串变量碰到其他类型变量就会拼接。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">1</span>+<span class="hljs-number">99</span>+<span class="hljs-string">&quot;string&quot;</span> <span class="hljs-comment">//&quot;100string&quot;</span><br><span class="hljs-string">&quot;string&quot;</span>+<span class="hljs-number">1</span>+<span class="hljs-number">99</span> <span class="hljs-comment">//&quot;string199&quot;，从左往右计算</span><br></code></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p>自动类型转换：把小范围的变量赋值给大范围的变量</p><p>数据范围从小到大：</p><p><img src="https://s1.328888.xyz/2022/04/14/iX6sR.png" alt="DataTypeRange"></p><p>算术表达式中包含多个基本数据类型的值时，整个算术表达式的类型就会自动提升。</p><p>强制类型转换：赋值运算符中隐含。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">short</span> s=<span class="hljs-number">10</span>;<br>s+=<span class="hljs-number">10</span>;<span class="hljs-comment">//正常</span><br>s=s+<span class="hljs-number">10</span>;<span class="hljs-comment">//错，因为右边发生了自动类型转换，变成了int型</span><br>s=(<span class="hljs-type">short</span>)(s+<span class="hljs-number">10</span>);<span class="hljs-comment">//也可以</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;HelloWorld-案例&quot;&gt;&lt;a href=&quot;#HelloWorld-案例&quot; class=&quot;headerlink&quot; title=&quot;HelloWorld 案例&quot;&gt;&lt;/a&gt;HelloWorld 案例&lt;/h2&gt;&lt;p&gt;学习的时候除了直接用记事本编辑，推荐使用 Notep</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>微信开发者工具和gitee实现多人协作</title>
    <link href="http://example.com/2022/03/27/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E5%92%8Cgitee%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C/"/>
    <id>http://example.com/2022/03/27/%E5%BE%AE%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%E5%92%8Cgitee%E5%AE%9E%E7%8E%B0%E5%A4%9A%E4%BA%BA%E5%8D%8F%E4%BD%9C/</id>
    <published>2022-03-26T16:00:00.000Z</published>
    <updated>2022-04-18T03:36:46.885Z</updated>
    
    <content type="html"><![CDATA[<p>将代码上传到码云实现多人合作开发。</p><h1>1. gitee</h1><p>首先进入gitee，注册一个账号。</p><p>新建一个仓库：</p><p><img src="https://img-blog.csdnimg.cn/5abc8daf23a342a3906c4111e0b2d950.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20220327012843219"></p><p>输入仓库名称，设置为私有，初始化、模板、分支模型都可以不添加。</p><p>点击创建，就建好了一个新的仓库。</p><p><img src="https://img-blog.csdnimg.cn/0f17a2379dd44d23a084ad3df7373c6d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_20,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20220327013057263"></p><p>这里可以看到仓库的https地址，一会会用到。</p><p>因为一会直接将小程序代码文件放进来，暂时先不用添加文件。</p><h1>2. git</h1><p>git是一个开源的分布式版本控制系统，可以高效地实现版本控制。</p><h2>下载</h2><p><a href="https://git-scm.com/downloads">从官网上下载git</a>。</p><h2>注册</h2><p>下载完成后在任意目录下右键，都会出现git GUI here和git Bash here.</p><p>点击git Bash here，在当前目录下开启命令行：</p><p><img src="https://img-blog.csdnimg.cn/2896c2473b5c4d428995b6deb13f0e81.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_14,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20220327013749178"></p><p>输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git config --global user.name &#x27;要注册的git用户名，不可以是中文&#x27;<br>git config --global user.email &#x27;gitee的邮箱&#x27;<br></code></pre></td></tr></table></figure><p>注册完成。</p><h2>克隆远程仓库</h2><p>首先新建一个想要放克隆下来的仓库内容的文件夹，进入该文件夹下。可以直接双击打开文件夹后右键git Bash here，也可以在命令行中使用cd进入文件夹目录下。</p><p>复制新建仓库的https地址：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git clong &#x27;仓库的https地址，如https://github.com/username/try.git&#x27;<br></code></pre></td></tr></table></figure><p>如果克隆的是有内容的仓库，这时就应该可以看到文件夹内出现了仓库里的文件。</p><p>仓库是空，可能会出现warning字样，问题不大。</p><p>然后就可以对内容进行一些修改，项目的开发。</p><h2>推送</h2><p>修改完后要将本地的代码推送到远程仓库。首先提交到本地仓库。通过add添加要提交的文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git add .<br></code></pre></td></tr></table></figure><p>add后面加.的意思是把所有做过修改的文件都添加。如果只想添加部分新修改的文件，add后面根具体的文件名即可。</p><p>再将添加的文件提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git commit -m &#x27;备注，如：提交了app.json文件&#x27;<br></code></pre></td></tr></table></figure><p>若出现<code>1 file changed</code>之类的字样，说明成功提交到了本地仓库。</p><p>最后输入以下代码提交：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git push origin master<br></code></pre></td></tr></table></figure><p>gitee默认分支是master，github默认分支是main，需要先修改分支为main后提交<code>git branch -M main</code></p><p>出现’done’的字样说明成功。</p><p>回到码云仓库，刷新一下，就可以看到新增的文件，以及还会显示commit的内容。</p><p><img src="https://img-blog.csdnimg.cn/97f5848e7a34432fbc24d38f3846595c.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_16,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20220327015550566"></p><p><em>这里出现了不同的commit，是博主在不同时间做的不同修改。</em></p><h1>3. 微信开发者工具</h1><p>通过微信开发者工具，可以不使用命令行操作，直接拉取、推送代码。</p><p>打开对应小程序文件夹，点击右上角版本管理，左侧栏如下：</p><p><img src="https://img-blog.csdnimg.cn/d0e8f12d8b954f11bdd936a70434fe2a.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_7,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20220327015735281"></p><p>首先要在设置中进行认证。点击设置–网络和认证</p><p><img src="https://img-blog.csdnimg.cn/ab9f812446f34fab95604669296032c3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_19,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20220327015821950"></p><p>输入码云的gitee账号和密码。</p><p>博主和朋友尝试将代码上传到github上时，一直在这里有问题。明明用户名和密码正确，推送却会卡住或者显示认证失败。而换成码云就非常顺利。因此更建议使用码云新建仓库、上传代码。</p><p>然后在 远程 中新建仓库信息</p><p><img src="https://img-blog.csdnimg.cn/812100ec678b42e1985baf1e9357ab2d.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_11,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20220327020101940"></p><p>名称就是仓库名称，url是https的仓库地址。</p><p>设置完成后就可以点击左上角抓取远程仓库内容到本地仓库。</p><p>对于修改后的文件以及提交，在工作区进行：</p><p><img src="https://img-blog.csdnimg.cn/d24162c54f604021b31b77586716a8c1.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_18,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20220327020242959"></p><p>这里右边上面勾选文件，就相当于git里的add添加文件。下面的提交就相当于commit。输入信息后点击提交，就上传到本地仓库了。</p><p>然后点击左上角推送，<strong>不要推送到新的分支，勾选中间项：推送到一下远程分支</strong>。这一部相当于git的push。</p><p><img src="https://img-blog.csdnimg.cn/ec5c7bc3581a457cb4ccf654aa10e995.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_15,color_FFFFFF,t_70,g_se,x_16#pic_center" alt="image-20220327020458850"></p><p>点击确定，出现对号就说明成功。接着可以在仓库中刷新看到新的修改。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;将代码上传到码云实现多人合作开发。&lt;/p&gt;
&lt;h1&gt;1. gitee&lt;/h1&gt;

&lt;p&gt;首先进入gitee，注册一个账号。&lt;/p&gt;
&lt;p&gt;新建一个仓库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdnimg.cn/5abc8daf23a342a</summary>
      
    
    
    
    <category term="projects" scheme="http://example.com/categories/projects/"/>
    
    
    <category term="problems" scheme="http://example.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>大二C语言大作业：订餐系统（总结）</title>
    <link href="http://example.com/2022/02/27/%E5%A4%A7%E4%BA%8CC%E8%AF%AD%E8%A8%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E8%AE%A2%E9%A4%90%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <id>http://example.com/2022/02/27/%E5%A4%A7%E4%BA%8CC%E8%AF%AD%E8%A8%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E8%AE%A2%E9%A4%90%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/</id>
    <published>2022-02-26T16:00:00.000Z</published>
    <updated>2022-04-18T03:36:17.718Z</updated>
    
    <content type="html"><![CDATA[<p>尽管快半年没有学c了，好在回顾起来还是蛮快的。而且也发现比去年的自己熟练了许多。<br>小学期要求5人合作，用C语言做一个订餐系统，能够实现用户的登录、选择餐馆、订餐、按各种规则查询与排序、修改个人信息，管理员的登录、添加菜品、按各种规则查询与排序、修改个人信息。<br>首先，我们调研了几个流行的订餐系统，<del>并解决了午饭</del>分析其页面逻辑顺序，借此设定了我们自己的订餐系统的逻辑顺序。<br>感谢blue、peppa、214、Mar鼎力相助！<br><img src="https://img-blog.csdnimg.cn/d8feaa5c8fab43efb78c7dd073d37419.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>至于写法，主要尝试了两个新知识点：<strong>文件操作与链表</strong>。<br>想要实现这样的订餐系统，必须有地方可以存储其数据。不能说放在程序里吧，每次一关一开又恢复原状了。我们使用FILE文件操作，对存放在指定位置的txt进行读写操作，读取其中的数据。<br>至于数据结构采用结构体数组还是链表，在之前学习翁恺老师的网课时我们认识到了结构体数组的一些弊端。数组大小固定，一旦初始化无法修改，少了可能越界，多了浪费内存空间，链表就可以想用一个结点开辟一个结点。而且对于插入、删除等操作还是链表香啊，数组中间插入或删除一个，后面的都要跟着动。<br>至于如何实现多人合作，可参考翁恺老师网课12.3.1多个源代码文件用devc++创建项目的方法。我们每人负责了几个函数，最后对好接口和返回值合并。其实就像同学说的，在合并之前是最没底的，也没法测试知道自己写的什么样。好在最终完成的还算顺利。</p><p>链表中嵌套链表，是这回我们做的一个非常有意思的尝试。我们发现每次订单中所点的菜品及其数量，和每次订单结束后推荐的菜品数量都是不固定的。对于数据结构还没开始学的我们来说有些困难。后来去问了老师，老师给出了“那你们只能在链表里套一个链表了吧”的解决方案。没想到这个方案真的能做，虽然这铁不是最佳方案。但是也非常有趣。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_dish</span> //订单中的菜品链表</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> dish_id; <span class="hljs-comment">//菜品号</span><br><span class="hljs-type">int</span> number; <span class="hljs-comment">//该菜品数量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_dish</span> *<span class="hljs-title">next</span>;</span><br>&#125; LISTDISH;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">recommend_d</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> dish_name[len]; <span class="hljs-comment">//推荐的菜品名称</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">recommend_d</span> *<span class="hljs-title">next</span>;</span><br>&#125; RECOMMEND;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> //订单链表</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> number;<span class="hljs-comment">//订单号</span><br><span class="hljs-type">char</span> user_id[len];<span class="hljs-comment">//用户id，据此可以找到用户地址</span><br><span class="hljs-type">int</span> restaurant_id;<span class="hljs-comment">//餐馆id</span><br><span class="hljs-type">int</span> score;<span class="hljs-comment">//本次订单对餐馆的打分</span><br><span class="hljs-type">int</span> price;<span class="hljs-comment">//本次订单的总价格</span><br>TIME delivery_time_s;<span class="hljs-comment">//起始配送时间。TIME是一个包含月、日、时、分成员的结构体</span><br>TIME delivery_time_e;<span class="hljs-comment">//结束配送时间</span><br>RECOMMEND *recommend_d; <span class="hljs-comment">//本次用户推荐菜品头结点指针 </span><br>LISTDISH *head_ld;<span class="hljs-comment">//本次订单的菜品链表头结点指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> *<span class="hljs-title">next</span>;</span><br>&#125; LIST;<br></code></pre></td></tr></table></figure><p>如上，在订单链表的每个结点中，都包含着一个listdish（存储本次订单所选菜品及其数量）链表的头结点和一个recommend（存储本次订单推荐的菜品）链表的头结点。访问的时候可以通过list-&gt;recommend-&gt;dish_name这样的方法直接得到本次订单中推荐菜品的菜品名称。<br>这样的结构，如何从文件中读取？<br>其他的链表都还好办。至于这三个链表，我们建立了3个txt文件（虽然listdish和recommend有许多链表，但是最好还是都存在一个txt里，不然每次新点订单还要新建txt文件。）其中listdish和recommend文本文档是这样的：<img src="https://img-blog.csdnimg.cn/bcd7964a59194715921f1261517f5d50.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>每一行代表第几个订单。每两个数字为一组，第一个数字为菜品号，第二个数字为该菜品所点数量。由于不固定长度，我们采用两个-1作为结尾，当读到-1时本订单结束。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c">LIST *<span class="hljs-title function_">read_inf_l</span><span class="hljs-params">()</span><br>&#123;<br>LIST *head = (LIST *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LIST))<br>, *last = head, *p, *temp = (LIST *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LIST));<br>head-&gt;next = <span class="hljs-literal">NULL</span>;<br>FILE *fp_l = fopen(<span class="hljs-string">&quot;D:\\小学期\\list.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">fscanf</span>(fp_l, <span class="hljs-string">&quot;%d %s %d %d %d %d %d %d %d %d %d %d %d &quot;</span><br>, &amp;temp-&gt;number, temp-&gt;user_id, &amp;temp-&gt;restaurant_id<br>, &amp;temp-&gt;score, &amp;temp-&gt;price<br>, &amp;temp-&gt;delivery_time_s.month, &amp;temp-&gt;delivery_time_s.day<br>, &amp;temp-&gt;delivery_time_s.hour, &amp;temp-&gt;delivery_time_s.minute<br>, &amp;temp-&gt;delivery_time_e.month, &amp;temp-&gt;delivery_time_e.day<br>, &amp;temp-&gt;delivery_time_e.hour, &amp;temp-&gt;delivery_time_e.minute) != EOF)<br>&#123;<br>p = (LIST *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LIST));<br>p-&gt;next = <span class="hljs-literal">NULL</span>;<br>p-&gt;head_ld = read_inf_ld(temp-&gt;number);<span class="hljs-comment">//跳转到read_inf_ld(int number)函数中获得本次订单listdish链表的头结点，number是订单号</span><br>p-&gt;recommend_d = read_inf_recommend(temp-&gt;number);<span class="hljs-comment">//跳转到read_inf_recommend(int number)函数中获得本次订单recommend链表的头结点，number是订单号</span><br>p-&gt;number = temp-&gt;number;<br><span class="hljs-built_in">strcpy</span>(p-&gt;user_id, temp-&gt;user_id);<br>p-&gt;restaurant_id = temp-&gt;restaurant_id;<br>p-&gt;score = temp-&gt;score;<br>p-&gt;price = temp-&gt;price;<br>p-&gt;delivery_time_s.month = temp-&gt;delivery_time_s.month;<br>p-&gt;delivery_time_s.day = temp-&gt;delivery_time_s.day;<br>p-&gt;delivery_time_s.hour = temp-&gt;delivery_time_s.hour;<br>p-&gt;delivery_time_s.minute = temp-&gt;delivery_time_s.minute;<br>p-&gt;delivery_time_e.month = temp-&gt;delivery_time_e.month;<br>p-&gt;delivery_time_e.day = temp-&gt;delivery_time_e.day;<br>p-&gt;delivery_time_e.hour = temp-&gt;delivery_time_e.hour;<br>p-&gt;delivery_time_e.minute = temp-&gt;delivery_time_e.minute;<br>last-&gt;next = p;<br>last = last-&gt;next;<br>last-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br>fclose(fp_l);<br><span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c">LISTDISH *<span class="hljs-title function_">read_inf_ld</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-comment">//Read the Information of List-Dish linklist</span><br>&#123;<br>LISTDISH *head = (LISTDISH *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LISTDISH))<br>, *last = head, *p, *temp = (LISTDISH *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LISTDISH));<br>head-&gt;next = <span class="hljs-literal">NULL</span>;<br>FILE *fp_ld;<br>fp_ld = fopen(<span class="hljs-string">&quot;D:\\小学期\\listdish.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (id != <span class="hljs-number">0</span>)<br><span class="hljs-keyword">while</span> (cnt != id)<br>&#123;<br><br>temp-&gt;dish_id = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (temp-&gt;dish_id != <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">fscanf</span>(fp_ld, <span class="hljs-string">&quot;%d %d &quot;</span>, &amp;temp-&gt;dish_id, &amp;temp-&gt;number);<br>&#125;<br>cnt++;<br>&#125;<br><span class="hljs-built_in">fscanf</span>(fp_ld, <span class="hljs-string">&quot;%d %d &quot;</span>, &amp;temp-&gt;dish_id, &amp;temp-&gt;number);<br><span class="hljs-keyword">while</span> (temp-&gt;dish_id != <span class="hljs-number">-1</span>)<br>&#123;<br>p = (LISTDISH *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LISTDISH));<br>p-&gt;dish_id = temp-&gt;dish_id;<br>p-&gt;number = temp-&gt;number;<br>last-&gt;next = p;<br>last = last-&gt;next;<br>last-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">fscanf</span>(fp_ld, <span class="hljs-string">&quot;%d %d &quot;</span>, &amp;temp-&gt;dish_id, &amp;temp-&gt;number);<br>&#125;<br>fclose(fp_ld);<br><span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p>比如要读取第三个订单所点菜品信息，传入read_inf_ld()的number订单号为3.<code>int cnt = 1</code>代表当前文件指针读取的订单号，从1开始计数，每次读到-1 -1证明又读完了一单，cnt++，直到cnt == number为止。然后读取接下来的这个链表，最后返回头结点，作为该订单中的一个成员。<br><img src="https://img-blog.csdnimg.cn/6b66117ee8b641998ea580f57da912ee.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c">RECOMMEND *<span class="hljs-title function_">read_inf_recommend</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span><br>&#123;<br>RECOMMEND *head = (RECOMMEND *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(RECOMMEND)),*last=head<br>,*p,*temp = (RECOMMEND *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(RECOMMEND));<br>head-&gt;next=<span class="hljs-literal">NULL</span>;<br>FILE *fp_recommend = fopen(<span class="hljs-string">&quot;D:\\小学期\\recommend.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>); <br><span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (id != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">while</span> (cnt != id)<br>        &#123;<br>            <span class="hljs-built_in">strcpy</span>(temp-&gt;dish_name,<span class="hljs-string">&quot;0&quot;</span>);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">strcmp</span>(temp-&gt;dish_name , <span class="hljs-string">&quot;-1&quot;</span>)!=<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">fscanf</span>(fp_recommend, <span class="hljs-string">&quot;%s &quot;</span>, temp-&gt;dish_name);<br>            &#125;<br>            cnt++;<br>        &#125;<br>    <span class="hljs-built_in">fscanf</span>(fp_recommend, <span class="hljs-string">&quot;%s &quot;</span>, temp-&gt;dish_name);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">strcmp</span>(temp-&gt;dish_name ,<span class="hljs-string">&quot;-1&quot;</span>)!=<span class="hljs-number">0</span>)<br>    &#123;<br>        p = (RECOMMEND *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(RECOMMEND));<br>        <span class="hljs-built_in">strcpy</span>(p-&gt;dish_name, temp-&gt;dish_name);<br>        last-&gt;next = p;<br>        last = last-&gt;next;<br>        last-&gt;next=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">fscanf</span>(fp_recommend, <span class="hljs-string">&quot;%s &quot;</span>, temp-&gt;dish_name);<br>    &#125;<br>fclose(fp_recommend);<br><span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取推荐菜品链表也是类似。<br>得到的链表全都包括头结点（里链表也是），不包含结尾的-1，只要通过-&gt;-&gt;就能访问hh。<br>总之，结束了~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;尽管快半年没有学c了，好在回顾起来还是蛮快的。而且也发现比去年的自己熟练了许多。&lt;br&gt;小学期要求5人合作，用C语言做一个订餐系统，能够实现用户的登录、选择餐馆、订餐、按各种规则查询与排序、修改个人信息，管理员的登录、添加菜品、按各种规则查询与排序、修改个人信息。&lt;br&gt;首</summary>
      
    
    
    
    <category term="clanguage" scheme="http://example.com/categories/clanguage/"/>
    
    
    <category term="homework" scheme="http://example.com/tags/homework/"/>
    
  </entry>
  
  <entry>
    <title>大一C语言大作业：五子棋（总结）</title>
    <link href="http://example.com/2022/02/26/%E5%A4%A7%E4%B8%80C%E8%AF%AD%E8%A8%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E4%BA%94%E5%AD%90%E6%A3%8B%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <id>http://example.com/2022/02/26/%E5%A4%A7%E4%B8%80C%E8%AF%AD%E8%A8%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E4%BA%94%E5%AD%90%E6%A3%8B%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/</id>
    <published>2022-02-25T16:00:00.000Z</published>
    <updated>2022-04-18T03:36:05.639Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算与设计思维大作业"><a href="#计算与设计思维大作业" class="headerlink" title="计算与设计思维大作业"></a>计算与设计思维大作业</h1><p>这次看了几位大佬的做法，我们也做了很多修改尝试。算是第一次尝试合作完成项目。<br>我认为学到的东西：</p><ol><li>第一次尝试写项目，把函数分到不同的.c文件中后更好看了一些。</li><li>在研究过程中应该分清主次。代码正确运行才是基础要求，其他什么美化界面，调字体调颜色都并非重点。（8月4日更新：评价算法的五个特性，正确性，简明性，健壮性，效率，最优性）</li><li>从代码中学到的，①是采用落子数来判断该轮到黑方下还是白方下（落子数为2的倍数时黑方下，否则白方下），这样也能判断出是哪一方胜利，而且落子数还可以判断棋盘是否下满（==16*16时棋盘落满，平局） ②是胜利条件的判断，以中间子为参考，看两边的四个子是否和他颜色相同。</li><li>8月4日更新：在这次尝试中在文件中使用了全局变量，不同文件中用extern调用。但是在后来学习中意识到全局变量最好不要写在文件里，会增加耦合性。以后多人合作写不同函数的时候也要注意，尽量不要出现。</li></ol><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>在一个16*16的棋盘上，黑白双方交替落子，每次落下子后如果棋盘上出现了五个同色棋子横向/竖向/斜向连接，则该方胜利。如果在棋盘下满后（即下了16*16个子后）仍未分出胜负，则为平局。</p><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>初始化棋盘，是一个<code>16*16</code>的二维数组（定义宏 N=16），一开始每一格都初始化为0。用一个不断++的落子数变量%2来判断本回合是黑方下还是白方下，；每次玩家输入横纵坐标，该处的变量值改变（黑子为1，白子为2）。每次落子判断全盘是否有五子连珠，如果有则结束游戏，如果没有则继续下。当落子数达到<code>N*N</code>即棋盘下满，还没有出现五子连珠时，则判断为平局，结束游戏。</p><h2 id="五子棋胜负条件判断"><a href="#五子棋胜负条件判断" class="headerlink" title="五子棋胜负条件判断"></a>五子棋胜负条件判断</h2><p>判断原理 :<br>胜负的判断是在每颗棋子落下之后进行，所以用这一子的坐标为基准前后左右斜各个方向来看是否取胜。<br>具体思想:<br>按照五子棋规则，当一方的棋子，在横向，纵向或斜向连续五个均为同一用户的棋子时，代表胜利。<br>另外，胜利判断只需要在一个新子落子时判断，且仅需要判断新子所在的四条线上(纵横加两个斜线)是否满足条件即可。<br>所以，可以以新子坐标为基准点，判断四次。<br>比如横向的，需要判断左侧和右侧连续的同类棋子个数，如果左侧+右侧+1（自身）总数&gt;=5，则为胜利。<br>在判断胜利的时候,首先我们要排除空子的情况,然后当两个斜线的时候, 无胜情况下，判断直线,当为两斜线及直线无胜情况下，判断横线。<br>参考代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">win</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> arr[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>,l = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>; <br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">2</span>;k&lt;N<span class="hljs-number">-2</span>;k++) <br><span class="hljs-keyword">for</span>(l=<span class="hljs-number">2</span>;l&lt;N<span class="hljs-number">-2</span>;l++)<br>&#123;<br><span class="hljs-keyword">if</span>(arr[k][l]!=<span class="hljs-number">0</span>&amp;&amp;arr[k<span class="hljs-number">-2</span>][l<span class="hljs-number">-2</span>]==arr[k][l]&amp;&amp;arr[k<span class="hljs-number">-1</span>][l<span class="hljs-number">-1</span>]==arr[k][l]&amp;&amp;arr[k+<span class="hljs-number">1</span>][l+<span class="hljs-number">1</span>]==arr[k][l]&amp;&amp;arr[k+<span class="hljs-number">2</span>][l+<span class="hljs-number">2</span>]==arr[k][l])<br>&#123;<br>flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(arr[k][l]!=<span class="hljs-number">0</span>&amp;&amp;arr[k+<span class="hljs-number">2</span>][l<span class="hljs-number">-2</span>]==arr[k][l]&amp;&amp;arr[k+<span class="hljs-number">1</span>][l<span class="hljs-number">-1</span>]==arr[k][l]&amp;&amp;arr[k<span class="hljs-number">-1</span>][l+<span class="hljs-number">1</span>]==arr[k][l]&amp;&amp;arr[k<span class="hljs-number">-2</span>][l+<span class="hljs-number">2</span>]==arr[k][l])<br>&#123;<br>flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>) <br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;N;k++)<br><span class="hljs-keyword">for</span>(l=<span class="hljs-number">2</span>;l&lt;N<span class="hljs-number">-2</span>;l++)<br>&#123;<br><span class="hljs-keyword">if</span>(arr[k][l]!=<span class="hljs-number">0</span>&amp;&amp;arr[k][l<span class="hljs-number">-2</span>]==arr[k][l]&amp;&amp;arr[k][l<span class="hljs-number">-1</span>]==arr[k][l]&amp;&amp;arr[k][l+<span class="hljs-number">1</span>]==arr[k][l]&amp;&amp;arr[k][l+<span class="hljs-number">2</span>]==arr[k][l])<br>&#123;<br>flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>) <br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">2</span>;k&lt;N<span class="hljs-number">-2</span>;k++)<br><span class="hljs-keyword">for</span>(l=<span class="hljs-number">0</span>;l&lt;N;l++)<br>&#123;<br><span class="hljs-keyword">if</span>(arr[k][l]!=<span class="hljs-number">0</span>&amp;&amp;arr[k+<span class="hljs-number">2</span>][l]==arr[k][l]&amp;&amp;arr[k+<span class="hljs-number">1</span>][l]==arr[k][l]&amp;&amp;arr[k<span class="hljs-number">-1</span>][l]==arr[k][l]&amp;&amp;arr[k<span class="hljs-number">-2</span>][l]==arr[k][l])<br>&#123;<br>flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> flag; <br>&#125;<br></code></pre></td></tr></table></figure><p>注:</p><ol><li>   中的arr[k][l]!=0是排除空子的情况。</li><li>最后返回判断结果时, 有胜为1,无为0,谁胜无必要判断，因为，谁尾手了的一定是胜的。<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3>开始<br><img src="https://img-blog.csdnimg.cn/ae0a75087855494bbde21f978da69805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p0d3F3cQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><p>输入坐标<br> <img src="https://img-blog.csdnimg.cn/d5998cff325649e6b674ed2a6051b673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p0d3F3cQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第二回合<br> <img src="https://img-blog.csdnimg.cn/20f9995d17b04e17979f8fdc73b65363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p0d3F3cQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>游戏结束<br> <img src="https://img-blog.csdnimg.cn/500ed64c7833490abfece68802bb8c84.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p0d3F3cQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算与设计思维大作业&quot;&gt;&lt;a href=&quot;#计算与设计思维大作业&quot; class=&quot;headerlink&quot; title=&quot;计算与设计思维大作业&quot;&gt;&lt;/a&gt;计算与设计思维大作业&lt;/h1&gt;&lt;p&gt;这次看了几位大佬的做法，我们也做了很多修改尝试。算是第一次尝试合作完成项目。</summary>
      
    
    
    
    <category term="course" scheme="http://example.com/categories/course/"/>
    
    
    <category term="homework" scheme="http://example.com/tags/homework/"/>
    
  </entry>
  
  <entry>
    <title>关于gets()和scanf()处理空白字符的问题</title>
    <link href="http://example.com/2022/02/26/gets()%E5%92%8Cscanf()%E5%A4%84%E7%90%86%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/02/26/gets()%E5%92%8Cscanf()%E5%A4%84%E7%90%86%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-02-25T16:00:00.000Z</published>
    <updated>2022-04-18T03:37:00.729Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h2><p>scanf()如果读入字符、字符串，就要注意回车、空格、制表符（统称为空白符）的问题。<br>字符还比较好处理，比如要输入abc三个字符，中间就直接不加入任何空白符，直接连着输入”abc”即可。<br>scanf()使用%s读入字符串，读到空白符时会自动结束，所以不能读入英文句子(“hello world”中间有空格，一次只能读一个单词)<br>想要读入带有空格的句子，一种方法是用scanf读入一个个字符串（单词）。字符串以空白符结尾，且当空白符在开头时%s是不会读取空白符的，会跳过这里的空白符（和scanf读入整数或浮点数时类似）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,str1,str2);<span class="hljs-comment">//输入&quot;hello world&quot;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%s\n&quot;</span>,str1,str2);<span class="hljs-comment">//输出&quot;helloworld&quot;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %s\n&quot;</span>,str1,str2);<span class="hljs-comment">//输出&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p>只要补齐空格就可以了。当然这种方法用来读入输出英文句子时局限性很大，每个单词都要定义一个字符串变量（或许可以定义一个char的二维数组/指向char一维数组的指针/指向指针的指针），而且还要自己补空格。<br>另一个有趣的地方是scanf()里可以放空格，意思是跳过这里的空白符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>,str1,str2);<span class="hljs-comment">//输入&quot;hello world&quot;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%s\n&quot;</span>,str1,str2);<span class="hljs-comment">//输出&quot;helloworld&quot;</span><br></code></pre></td></tr></table></figure><p>如果还是上例，其实没有影响，因为就算scanf里没有这个空格，str2也会自动跳过开头的空格从后面的w开始读入。不过这种方法在读入字符的时候处理输入的空白符，以及下文中和gets()的结合中就比较有用。</p><h2 id="gets"><a href="#gets" class="headerlink" title="gets()"></a>gets()</h2><p>gets()就可以读入空白符，空格、回车、制表符都能读入，并且读入回车时结束。因此可以借助gets()读入英文短句式的字符串（带有空格）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">gets(str);<span class="hljs-comment">//输入&quot;hello world\n&quot;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,str);<span class="hljs-comment">//输出&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p>但是要注意回车的问题。<br>当gets()读入的第一个数据是回车，则停止继续读入，并且str的内容就是回车。<br>当gets()读入”hello world\n”,回车是不会被gets()读入的，还留在缓冲区。<br>所以连着使用两个gets()，而中间不想办法处理掉回车，就会出错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">gets(str1);<span class="hljs-comment">//abc\n</span><br>gets(str2);<span class="hljs-comment">//abc\n</span><br>gets(str3);<span class="hljs-comment">//abc\n</span><br><span class="hljs-comment">//输出的结果是：abc\nabc,str2读到的是回车。</span><br></code></pre></td></tr></table></figure><p>此时可以用getchar()读掉中间的回车。<br>在做翁恺老师C语言程序设计的PTA习题时，碰到了这样一道题：<br><img src="https://img-blog.csdnimg.cn/2bf40d6f06ca4f999f51eefe9bea5cfd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p0d3F3cQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>要交替输入浮点数和带空格的字符串，一开始没有细想回车的问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//循环执行：</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,book[i].price);<span class="hljs-comment">//读入浮点数</span><br>gets(books[i].name);<span class="hljs-comment">//读入字符串</span><br></code></pre></td></tr></table></figure><p>后来经一番查询理解了两种函数对空白符的处理，也写了这篇博文。<br>这道题有趣的地方是scanf和gets的结合，因此除了getchar()读掉中间的回车的办法，还可以在scanf末尾加空格：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//循环执行：</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf &quot;</span>,book[i].price);<span class="hljs-comment">//读入浮点数，并读掉结尾的空白符（回车）</span><br>gets(books[i].name);<span class="hljs-comment">//读入字符串</span><br></code></pre></td></tr></table></figure><p>非常巧妙。<br>以上是本人经试验、查询资料后得出的结论，也欢迎读者多多尝试，如有错误，还请读者雅正！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;scanf&quot;&gt;&lt;a href=&quot;#scanf&quot; class=&quot;headerlink&quot; title=&quot;scanf()&quot;&gt;&lt;/a&gt;scanf()&lt;/h2&gt;&lt;p&gt;scanf()如果读入字符、字符串，就要注意回车、空格、制表符（统称为空白符）的问题。&lt;br&gt;字符还比较好处</summary>
      
    
    
    
    <category term="clanguage" scheme="http://example.com/categories/clanguage/"/>
    
    
    <category term="problems" scheme="http://example.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>关于C/C++中结构体指针作为形参传入函数，为什么主函数中实参不会被修改的问题</title>
    <link href="http://example.com/2022/02/26/%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E5%9C%A8%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2022/02/26/%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E5%9C%A8%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2022-02-25T16:00:00.000Z</published>
    <updated>2022-04-18T03:36:38.917Z</updated>
    
    <content type="html"><![CDATA[<p>主函数传入函数的变量叫实参，而函数中的对应变量叫形参。形参实际上是实参的拷贝，所以如果我们修改形参的值，实参不会发生变化。<br>后来学习了指针，指针就相当于钥匙，能打开对应房间（地址）的门。当指针作为函数参数时，实参和形参相当于拷贝的两把钥匙，但他们都指向同一个房间，同一个地址。借由形参访问地址，并改变地址中的值，能够真正修改地址中的值。<br>而在学习结构体、链表时，常常进行的操作是对结构体指针赋值。<br>比如添加新链表结点add函数，传入实参head（要修改的链表的头指针）先将新结点的内容赋给临时结构体指针p，然后将p的值赋给head或last-&gt;next，即挂在链表的结尾。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">head=p;<span class="hljs-comment">//当head为NULL的时候</span><br>last-&gt;next=p;<span class="hljs-comment">//当head不为NULL的时候</span><br></code></pre></td></tr></table></figure><p>最后返回head指针。<br>但是这样做并不会直接对主函数中的head指针进行修改，为什么？<br>因为我们修改的不是指针对应地址中的值，而是直接修改指针的值，改变了指针的指向（对钥匙本身的修改，让这把钥匙指向另一个房间；而不是对钥匙指向房间里的内容的修改）。当我们令head=p时，相当于让head自身的地址值改变，和指针p指向的地址一样。这就和修改普通变量一样，对形参的修改不会影响实参。<br>解决方法：(翁恺老师的建议）</p><ol><li>head定义为全局变量，这样在所有函数中都能访问。但这种方法并不好，只对这个链表的head生效。如果还定义了其他链表，此add函数就不能对其他链表生效了。</li><li>add函数返回新的我们想要的head结构体指针，在原函数中把add函数的返回值赋给head.</li><li>既然可以传递指针对应地址的值，我们就让指针所指的地址中的值是我们要修改的指针，即传入*<em>phead指向指针的指针。这样就可以直接修改</em>phead的值了。</li><li>我们定义一个结构list，其中包含*head。在原函数中定义list，list.head=NULL；然后把list的指针<code>&amp;list</code>传入add函数，add的参数是list的指针，在函数中就可以对list-&gt;head进行修改。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主函数传入函数的变量叫实参，而函数中的对应变量叫形参。形参实际上是实参的拷贝，所以如果我们修改形参的值，实参不会发生变化。&lt;br&gt;后来学习了指针，指针就相当于钥匙，能打开对应房间（地址）的门。当指针作为函数参数时，实参和形参相当于拷贝的两把钥匙，但他们都指向同一个房间，同一</summary>
      
    
    
    
    <category term="clanguage" scheme="http://example.com/categories/clanguage/"/>
    
    
    <category term="problems" scheme="http://example.com/tags/problems/"/>
    
  </entry>
  
  <entry>
    <title>大一C语言大作业：函数动画</title>
    <link href="http://example.com/2022/02/25/%E5%A4%A7%E4%B8%80C%E8%AF%AD%E8%A8%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E5%87%BD%E6%95%B0%E5%8A%A8%E7%94%BB/"/>
    <id>http://example.com/2022/02/25/%E5%A4%A7%E4%B8%80C%E8%AF%AD%E8%A8%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E5%87%BD%E6%95%B0%E5%8A%A8%E7%94%BB/</id>
    <published>2022-02-24T16:00:00.000Z</published>
    <updated>2022-04-18T03:36:26.046Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绘制一个函数动画。"><a href="#绘制一个函数动画。" class="headerlink" title="绘制一个函数动画。"></a>绘制一个函数动画。</h1><p>要求：1.碰到边界反弹；<br>2.会像贪吃蛇一样消失。</p><p>老师已给出提示代码：三个辅助函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-comment">// two functions to clear screen and set cursor position for printing.</span><br><span class="hljs-comment">// one function to take a rest in 10 microseconds.</span><br><br><span class="hljs-comment">// use this function to clear screen</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span><span class="hljs-comment">//清屏</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _WIN32</span><br>    system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined (__LINUX__) || defined(__gnu_linux__) || defined(__linux__)</span><br>    system(<span class="hljs-string">&quot;clear&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined (__APPLE__)</span><br>    system(<span class="hljs-string">&quot;clear&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _WIN32</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;conio.h&gt;</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br>    <span class="hljs-type">void</span> <span class="hljs-title function_">setcursor</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>    &#123;<br>        HANDLE hCon = GetStdHandle(STD_OUTPUT_HANDLE);<br>        COORD setps;<br>        setps.X = x; setps.Y = y;<br>        SetConsoleCursorPosition(hCon, setps);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">// use this function to positioning before calling printf  </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">gotoxy</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><span class="hljs-comment">//光标移动到x,y处</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _WIN32</span><br>    setcursor(y - <span class="hljs-number">1</span>, x - <span class="hljs-number">1</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined (__LINUX__) || defined(__gnu_linux__) || defined(__linux__)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[%d;%dH&quot;</span>, x, y);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined (__APPLE__)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[%d;%dH&quot;</span>, x, y);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br><span class="hljs-type">int</span> factor = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// rest msec * 10 microseconds</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rest</span><span class="hljs-params">(<span class="hljs-type">int</span> msec)</span><span class="hljs-comment">//当前画面静止一定时间</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _WIN32</span><br>    Sleep(msec * factor);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined (__LINUX__) || defined(__gnu_linux__) || defined(__linux__)</span><br>    usleep(msec * <span class="hljs-number">1000</span> * factor);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined (__APPLE__)</span><br>    usleep(msec * <span class="hljs-number">1000</span>* factor);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>clear()</code>函数清屏；<code>gotoxy()</code>函数使光标移动到指定位置；<code>rest()</code>当前画面静止。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.动画绘制<br>动画的原理是一帧帧的图片有短暂的时间间隔，连起来放映之后就产生了会动的感觉。我们可以每打印一个点之后<code>rest()</code>一小段时间来形成动画的效果。</p><p>2.边界反弹<br>即为碰到边界反向输出。我想的方法是纵坐标y1不变，只需要设计分段函数让x反向即可。</p><p>3.延时消失<br>要求的消失是像贪吃蛇一样，前面一边画着点，后面尾巴一边消失。但自己怎么想都只能做到全部绘制完成之后再让它开始消失。<br>请教助教与Mc大佬之后得知他的思路是保留点数。屏幕中最多出现50个点，第51个点之后，打印第x个点时，x-50号点打印空格覆盖，让他消失。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.审题。给定的<code>gotoxy()</code>函数的横纵坐标是反着的，而且从左上角开始为(1,1)。<br>2.<code>rest()</code>的用法非常灵活，比如高人指点：用户可以输入打印速度speed，rest(100-speed)。（妙啊）<br>3.程序中出现几段几乎完全相似的代码（除了字母不同），“代码复制”是程序不良的表现。因为将来做修改、维护的时候要维护很多处。所以比起重复一段好多遍，使用函数会更好。</p><p>感谢Mc、fOrever_jAckY、olinr1222、–_–等人指点！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">zong</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-comment">//纵坐标y1</span><br>&#123;<br><span class="hljs-type">double</span> x=(i<span class="hljs-number">-51</span>);<br><span class="hljs-type">double</span> y=<span class="hljs-number">12.0</span>*<span class="hljs-built_in">sin</span>(x/<span class="hljs-number">7</span>);<br><span class="hljs-type">int</span> y1=(<span class="hljs-type">int</span>)(<span class="hljs-number">15</span>-y);<br><span class="hljs-keyword">return</span> y1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">heng</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-comment">//横坐标j</span><br>&#123;<br><span class="hljs-type">int</span> j=i;<br><span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">101</span>&amp;&amp;i&lt;=<span class="hljs-number">202</span>)j=<span class="hljs-number">203</span>-i;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">202</span>&amp;&amp;i&lt;=<span class="hljs-number">303</span>)j=i<span class="hljs-number">-202</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">303</span>&amp;&amp;i&lt;=<span class="hljs-number">404</span>)j=<span class="hljs-number">405</span>-i;<br><span class="hljs-keyword">return</span> j;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dayin</span><span class="hljs-params">(<span class="hljs-type">char</span> ch,<span class="hljs-type">int</span> j,<span class="hljs-type">int</span> y1)</span><span class="hljs-comment">//在(y1,j)处输出给定字符</span><br>&#123;<br>gotoxy(y1,j);<br><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(y1==<span class="hljs-number">15</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==<span class="hljs-number">51</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;#&quot;</span>);<br>gotoxy(<span class="hljs-number">29</span>-y1,<span class="hljs-number">102</span>-j);<br><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment">//防止坐标点和坐标轴被空格覆盖</span><br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">29</span>-y1==<span class="hljs-number">15</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">102</span>-j==<span class="hljs-number">51</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">29</span>-y1==<span class="hljs-number">26</span>&amp;&amp;<span class="hljs-number">102</span>-j==<span class="hljs-number">49</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-number">29</span>-y1==<span class="hljs-number">26</span>&amp;&amp;<span class="hljs-number">102</span>-j==<span class="hljs-number">50</span>)||(<span class="hljs-number">29</span>-y1==<span class="hljs-number">3</span>&amp;&amp;<span class="hljs-number">102</span>-j==<span class="hljs-number">50</span>))<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">29</span>-y1==<span class="hljs-number">16</span>&amp;&amp;<span class="hljs-number">102</span>-j==<span class="hljs-number">100</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;X&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;#&quot;</span>);<br>gotoxy(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>&#125;<br><br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">float</span> x,y;<br><span class="hljs-type">int</span> tim=<span class="hljs-number">20</span>;<br>system(<span class="hljs-string">&quot;color F0&quot;</span>);<br>system(<span class="hljs-string">&quot;mode con cols=101 lines=30&quot;</span>);<br>clear();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)<span class="hljs-comment">//打印x轴 </span><br>&#123;<br>gotoxy(<span class="hljs-number">15</span>,i+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(i!=<span class="hljs-number">50</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+&quot;</span>);<br>gotoxy(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>rest(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">29</span>;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-comment">//打印y轴 </span><br>&#123;<br>gotoxy(i+<span class="hljs-number">1</span>,<span class="hljs-number">51</span>);<br><span class="hljs-keyword">if</span>(i!=<span class="hljs-number">14</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<br>gotoxy(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>); <br>rest(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">//打印轴上的点</span><br>gotoxy(<span class="hljs-number">16</span>,<span class="hljs-number">52</span>); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;O&quot;</span>);<br><br>gotoxy(<span class="hljs-number">16</span>,<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;X&quot;</span>);<br><br>gotoxy(<span class="hljs-number">1</span>,<span class="hljs-number">49</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Y&quot;</span>);<br><br>gotoxy(<span class="hljs-number">3</span>,<span class="hljs-number">50</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br><br>gotoxy(<span class="hljs-number">26</span>,<span class="hljs-number">49</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br><br><br><br><br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j,y1;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">52</span>;i&lt;=<span class="hljs-number">404</span>;i++)<span class="hljs-comment">//打印函数 </span><br>&#123;<br>j=heng(i),y1=zong(i);<br>dayin(<span class="hljs-string">&#x27;#&#x27;</span>,j,y1);<br>rest(<span class="hljs-number">4</span>);<br><br><span class="hljs-keyword">if</span>(i<span class="hljs-number">-51</span>-tim&gt;<span class="hljs-number">0</span>)<br>&#123;<br>y1=zong(i-tim);<br>j=heng(i-tim);<br>dayin(<span class="hljs-string">&#x27; &#x27;</span>,j,y1);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> r=i-tim;r&lt;=i;r++)<br>&#123;<br>j=heng(r);<br>y1=zong(r);<br>dayin(<span class="hljs-string">&#x27; &#x27;</span>,j,y1);<br>rest(<span class="hljs-number">4</span>);<br>&#125; <br>gotoxy(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>rest(<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;绘制一个函数动画。&quot;&gt;&lt;a href=&quot;#绘制一个函数动画。&quot; class=&quot;headerlink&quot; title=&quot;绘制一个函数动画。&quot;&gt;&lt;/a&gt;绘制一个函数动画。&lt;/h1&gt;&lt;p&gt;要求：1.碰到边界反弹；&lt;br&gt;2.会像贪吃蛇一样消失。&lt;/p&gt;
&lt;p&gt;老师已给出提</summary>
      
    
    
    
    <category term="clanguage" scheme="http://example.com/categories/clanguage/"/>
    
    
    <category term="homework" scheme="http://example.com/tags/homework/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/02/24/hello-world/"/>
    <id>http://example.com/2022/02/24/hello-world/</id>
    <published>2022-02-23T16:00:00.000Z</published>
    <updated>2022-02-26T14:45:53.870Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
