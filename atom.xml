<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingqing3948 的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-05-12T14:07:32.148Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jing Qing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大二 Web 课程大作业——小程序标点地图</title>
    <link href="http://example.com/2026/02/12/%E5%A4%A7%E4%BA%8C%20Web%20%E8%AF%BE%E7%A8%8B%E5%A4%A7%E4%BD%9C%E4%B8%9A%E2%80%94%E2%80%94%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://example.com/2026/02/12/%E5%A4%A7%E4%BA%8C%20Web%20%E8%AF%BE%E7%A8%8B%E5%A4%A7%E4%BD%9C%E4%B8%9A%E2%80%94%E2%80%94%E5%B0%8F%E7%A8%8B%E5%BA%8F/</id>
    <published>2026-02-11T16:00:00.000Z</published>
    <updated>2022-05-12T14:07:32.148Z</updated>
    
    <content type="html"><![CDATA[<p>本次小程序设计主要围绕 map 组件展开。</p><p>我们组设计了一款能够记录地图上的标点信息，并将自己的标点信息发布到帖子上的旅游类app。</p><p><a href="https://github.com/Jingqing3948/DianJi_Demo">github 代码地址</a>，希望对你有所帮助~</p><p><img src="https://s1.328888.xyz/2022/05/12/HN6nM.png" alt="HN6nM.png"></p><p>小程序的主要功能就是记录地图上的标点信息，并上传到云数据库中；</p><p><img src="C:\Users\86138\Desktop\5月12日(2)_.gif" alt="5月12日(2)_"></p><p>以及编辑文章，把文章信息上传到云数据库中；</p><p><img src="C:\Users\86138\Desktop\5月12日_.gif" alt="5月12日_"></p><p>获取云数据库中的文章（最新发布的3篇）。</p><p><img src="C:\Users\86138\Desktop\5月12日(1)_.gif" alt="5月12日(1)_"></p><h1 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h1><p><img src="C:\Users\86138\Desktop\image-20220512182409012.png" alt="image-20220512182409012"></p><p>目前有两个数据库表。databasemarkers 存储本次记录中所有标点信息；databasearticles 存储该文章发布时间、文章标题、备注、内容以及对应的标点记录id（外键）。</p><h1 id="1-地图标点"><a href="#1-地图标点" class="headerlink" title="1. 地图标点"></a>1. 地图标点</h1><p>小程序自带的 map 组件中有一个属性 markers，是一个对象数组。只要把相应格式的对象数组传给 map 组件，就会自动在地图上标记出点的信息。</p><p><img src="C:\Users\86138\Desktop\image-20220512180341165.png" alt="image-20220512180341165"></p><p>wxml 文件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- subkey 用于调整地图样式</span><br><span class="hljs-comment">经纬度 latitude longitude 信息是地图初始的中心点。</span><br><span class="hljs-comment">本例中，要传递给 map 组件的对象数组也命名为 markers，在 js 文件中获取数据后传递给 map--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">map</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;map&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">subkey</span>=<span class="hljs-string">&quot;DKEBZ-LKBW4-B3KUP-DYSCI-IG7OS-SQBJH&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">longitude</span>=<span class="hljs-string">&#x27;&#123;&#123;weidu&#125;&#125;&#x27;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">latitude</span>=<span class="hljs-string">&#x27;&#123;&#123;jingdu&#125;&#125;&#x27;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">scale</span>=<span class="hljs-string">&quot;10&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">layer-style</span>=<span class="hljs-string">&quot;1&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">show-location</span>=<span class="hljs-string">&quot;true&quot;</span> </span><br><span class="hljs-tag">     <span class="hljs-attr">markers</span>=<span class="hljs-string">&quot;&#123;&#123;markers&#125;&#125;&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">map</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--每次点击添加标点按钮，就会获取当前位置信息，存入 markers 数组--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;default&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;recstart&quot;</span>&gt;</span><br>    添加标点<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--点击结束记录，将标点信息上传到数据库 databasemarkers 中，并跳转到文章编辑页面--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;default&quot;</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;recstop&quot;</span>&gt;</span><br>    添加标点<br><span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js 文件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> cnt=cnt+<span class="hljs-number">1</span><br><span class="hljs-keyword">const</span> db=wx.<span class="hljs-property">cloud</span>.<span class="hljs-property">database</span><br><span class="hljs-title class_">Page</span>(&#123;<br>    <span class="hljs-attr">data</span>: &#123;<br>        <span class="hljs-attr">jingdu</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">weidu</span>: <span class="hljs-string">&quot;&quot;</span>,<br>        <span class="hljs-attr">markers</span>: [],<br>    &#125;,<br><span class="hljs-attr">recstart</span>: <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span><br>        cnt = cnt + <span class="hljs-number">1</span><br>        wx.<span class="hljs-title function_">getLocation</span>(&#123;<br>            <span class="hljs-attr">altitude</span>: <span class="hljs-string">&#x27;altitude&#x27;</span>,<br>            <span class="hljs-attr">highAccuracyExpireTime</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">isHighAccuracy</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;gcj02&#x27;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br>                <span class="hljs-keyword">let</span> marker = <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">markers</span><br>                marker.<span class="hljs-title function_">push</span>(&#123;<br>                    <span class="hljs-attr">id</span>: cnt-<span class="hljs-number">1</span>,<br>                    <span class="hljs-attr">latitude</span>: result.<span class="hljs-property">latitude</span>,<br>                    <span class="hljs-attr">longitude</span>: result.<span class="hljs-property">longitude</span>,<br>                    <span class="hljs-attr">width</span>: <span class="hljs-number">20</span>,<br>                    <span class="hljs-attr">height</span>: <span class="hljs-number">30</span><br>                &#125;)<br>                <span class="hljs-comment">// let pointobj = this.data.polyline[0].points</span><br>                <span class="hljs-comment">// console.log(pointobj)</span><br>                <span class="hljs-comment">// pointobj.push(</span><br>                <span class="hljs-comment">//   &#123;</span><br>                <span class="hljs-comment">//   latitude: result.latitude,</span><br>                <span class="hljs-comment">//     longitude: result.longitude,</span><br>                <span class="hljs-comment">//   &#125;</span><br>                <span class="hljs-comment">// )</span><br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(that.<span class="hljs-property">data</span>.<span class="hljs-property">markers</span>)<br>                that.<span class="hljs-title function_">setData</span>(&#123;<br>                    <span class="hljs-attr">jingdu</span>: result.<span class="hljs-property">latitude</span>,<br>                    <span class="hljs-attr">weidu</span>: result.<span class="hljs-property">longitude</span>,<br>                    <span class="hljs-attr">recmode</span>: <span class="hljs-number">1</span>,<br>                    <span class="hljs-attr">markers</span>: marker,<br>                    <span class="hljs-comment">// polyline:[&#123;</span><br>                    <span class="hljs-comment">//   points:pointobj</span><br>                    <span class="hljs-comment">// &#125;]</span><br>                &#125;)<br>            &#125;,<br>            <span class="hljs-comment">// fail: (res) =&gt; &#123;&#125;,</span><br>            <span class="hljs-comment">// complete: (res) =&gt; &#123;&#125;,</span><br>        &#125;)<br>    &#125;,<br>    <span class="hljs-attr">recstop</span>:<span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span><br>      db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&quot;databasemarkers&quot;</span>).<span class="hljs-title function_">add</span>(&#123;<br>        <span class="hljs-attr">data</span>:&#123;<br>          <span class="hljs-attr">markers</span>:<span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-property">markers</span><br>        &#125;<br>      &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;数据添加成功！&quot;</span>)<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>        <span class="hljs-keyword">var</span> docstring=res.<span class="hljs-property">_id</span><br>        wx.<span class="hljs-title function_">navigateTo</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/pages/addarticle/addarticle?docstring=&#x27;</span>+docstring<br>      &#125;)<br>      &#125;)<br>      <br>    &#125;,<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 生命周期函数--监听页面加载</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-title function_">onLoad</span>(<span class="hljs-params">options</span>) &#123;<br>        <span class="hljs-keyword">var</span> that = <span class="hljs-variable language_">this</span><br>        wx.<span class="hljs-title function_">getLocation</span>(&#123;<br>            <span class="hljs-attr">altitude</span>: <span class="hljs-string">&#x27;altitude&#x27;</span>,<br>            <span class="hljs-attr">highAccuracyExpireTime</span>: <span class="hljs-number">0</span>,<br>            <span class="hljs-attr">isHighAccuracy</span>: <span class="hljs-literal">true</span>,<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;type&#x27;</span>,<br>            <span class="hljs-attr">success</span>: <span class="hljs-function">(<span class="hljs-params">result</span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(result)<br>                <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>                    <span class="hljs-attr">jingdu</span>: result.<span class="hljs-property">latitude</span>,<br>                    <span class="hljs-attr">weidu</span>: result.<span class="hljs-property">longitude</span><br>                &#125;)<br>            &#125;<br>            <span class="hljs-comment">// fail: (res) =&gt; &#123;&#125;,</span><br>            <span class="hljs-comment">// complete: (res) =&gt; &#123;&#125;,</span><br>        &#125;)<br>    &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><h1 id="2-发布文章"><a href="#2-发布文章" class="headerlink" title="2. 发布文章"></a>2. 发布文章</h1><p><img src="C:\Users\86138\Desktop\image-20220512180751872.png" alt="image-20220512180751872"></p><p>添加完标点信息后，提示输入文章标题、备注、正文信息，点击提交，文章就会发布到 databasearticles 数据库中。</p><p>wxml：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputbox&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border-top: 1px solid #e4e4e4;&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>题目<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot; 请输入题目&quot;</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">&quot;inputtitle&quot;</span>/&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>备注<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot; 请输入备注信息&quot;</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">&quot;inputcomment&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">view</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;line-content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">label</span>&gt;</span>正文<span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">&quot; 请输入正文&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span> <span class="hljs-attr">bindinput</span>=<span class="hljs-string">&quot;inputcontent&quot;</span> /&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">view</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">bindtap</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br></code></pre></td></tr></table></figure><p>js：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs css">const db=wx<span class="hljs-selector-class">.cloud</span><span class="hljs-selector-class">.database</span>()<br>Page(&#123;<br><br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 页面的初始数据</span><br><span class="hljs-comment">   */</span><br>  data: &#123;<br>    dataobj:&#123;<br>      comment:<span class="hljs-string">&quot;&quot;</span>,<br>      content:<span class="hljs-string">&quot;&quot;</span>,<br>      title:<span class="hljs-string">&quot;&quot;</span>,<br>      markersid:<span class="hljs-string">&quot;&quot;</span><br>    &#125;<br>  &#125;,<br>  inputtitle:<span class="hljs-built_in">function</span>(options)&#123;<br>    <span class="hljs-selector-tag">var</span> value=options<span class="hljs-selector-class">.detail</span><span class="hljs-selector-class">.value</span><br>    console<span class="hljs-selector-class">.log</span>(value)<br>    this<span class="hljs-selector-class">.setData</span>(&#123;<br>      title:value<br>    &#125;)<br>  &#125;,<br>  inputcomment:<span class="hljs-built_in">function</span>(options)&#123;<br>    <span class="hljs-selector-tag">var</span> value=options<span class="hljs-selector-class">.detail</span><span class="hljs-selector-class">.value</span><br>    console<span class="hljs-selector-class">.log</span>(value)<br>    this<span class="hljs-selector-class">.setData</span>(&#123;<br>      comment:value<br>    &#125;)<br>  &#125;,<br>  inputcontent:<span class="hljs-built_in">function</span>(options)&#123;<br>    <span class="hljs-selector-tag">var</span> value=options<span class="hljs-selector-class">.detail</span><span class="hljs-selector-class">.value</span><br>    console<span class="hljs-selector-class">.log</span>(value)<br>    this<span class="hljs-selector-class">.setData</span>(&#123;<br>      <span class="hljs-attribute">content</span>:value<br>    &#125;)<br>  &#125;,<br>  submit()&#123;<br>    <span class="hljs-selector-tag">var</span> mydate=new Date()<br>    db<span class="hljs-selector-class">.collection</span>(&quot;databasearticles&quot;)<span class="hljs-selector-class">.add</span>(&#123;<br>      data:&#123;<br>        <span class="hljs-attribute">content</span>:this.data.content,<br>        markersid:this.data.markersid,<br>        comment:this.data.comment,<br>        title:this.data.title,<br>        createdate:mydate<br>      &#125;<br>    &#125;)<span class="hljs-selector-class">.then</span>(res=&gt;&#123;<br>      console<span class="hljs-selector-class">.log</span>(&quot;数据添加成功！&quot;)<br>        console<span class="hljs-selector-class">.log</span>(res)<br>        wx<span class="hljs-selector-class">.navigateTo</span>(&#123;<br>          url: <span class="hljs-string">&#x27;/pages/success/success&#x27;</span>,<br>        &#125;)<br>    &#125;)<br>  &#125;,<br>  <span class="hljs-comment">/**</span><br><span class="hljs-comment">   * 生命周期函数--监听页面加载</span><br><span class="hljs-comment">   */</span><br>  onLoad(options) &#123;<br>    <span class="hljs-selector-tag">var</span> docstring=options<span class="hljs-selector-class">.docstring</span><br>    console<span class="hljs-selector-class">.log</span>(docstring)<br>    this<span class="hljs-selector-class">.setData</span>(&#123;<br>      markersid:docstring<br>    &#125;)<br>  &#125;,<br>&#125;)<br></code></pre></td></tr></table></figure><p>wxss：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.inputbox</span> &#123;<br>  <span class="hljs-attribute">margin-top</span>:<span class="hljs-number">60</span>rpx;<br>  <span class="hljs-attribute">height</span>: <span class="hljs-number">450</span>rpx;<br>&#125;<br><br><span class="hljs-selector-class">.inputbox</span> <span class="hljs-selector-class">.line</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">min-height</span>:<span class="hljs-number">100</span>rpx;<br>  <span class="hljs-attribute">line-height</span>:<span class="hljs-number">100</span>rpx;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">30</span>rpx;<br>  <span class="hljs-attribute">border-bottom</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#e4e4e4</span>;<br>&#125;<br><br><span class="hljs-selector-class">.inputbox</span> <span class="hljs-selector-class">.line-content</span> &#123;<br>  <span class="hljs-attribute">display</span>: block;<br>  <span class="hljs-attribute">min-height</span>:<span class="hljs-number">300</span>rpx;<br>  <span class="hljs-attribute">line-height</span>:<span class="hljs-number">160</span>rpx;<br>  <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">30</span>rpx;<br>  <span class="hljs-attribute">border-bottom</span>:<span class="hljs-number">1px</span> solid <span class="hljs-number">#e4e4e4</span>;<br>&#125;<br><br><span class="hljs-selector-class">.inputbox</span> <span class="hljs-selector-class">.line</span> <span class="hljs-selector-tag">label</span> &#123;<br>  <span class="hljs-attribute">float</span>: left;<br>&#125;<br><br><span class="hljs-selector-class">.inputbox</span> <span class="hljs-selector-class">.line-content</span> <span class="hljs-selector-tag">label</span> &#123;<br>  <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>&#125;<br><br><span class="hljs-selector-class">.inputbox</span> <span class="hljs-selector-class">.line</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">100</span>rpx;<br>  <span class="hljs-attribute">line-height</span>:<span class="hljs-number">100</span>rpx;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">40</span>rpx;<br>&#125;<br><br><span class="hljs-selector-class">.inputbox</span> <span class="hljs-selector-class">.line-content</span> <span class="hljs-selector-tag">input</span> &#123;<br>  <span class="hljs-attribute">width</span>:<span class="hljs-number">80%</span>;<br>  <span class="hljs-attribute">height</span>:<span class="hljs-number">140</span>rpx;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">140</span>rpx;<br>  <span class="hljs-attribute">float</span>: left;<br>  <span class="hljs-attribute">margin-left</span>:<span class="hljs-number">40</span>rpx;<br>&#125;<br><br><span class="hljs-selector-class">.submit</span> &#123;<br>  <span class="hljs-attribute">position</span>: absolute;<br><span class="hljs-attribute">width</span>: <span class="hljs-number">80%</span>;<br><span class="hljs-attribute">left</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">right</span>: <span class="hljs-number">0</span>;<br><span class="hljs-attribute">margin</span>: <span class="hljs-number">180</span>rpx auto <span class="hljs-number">0</span>;<br>  <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">98</span>rpx;<br>  <span class="hljs-attribute">border</span>: <span class="hljs-number">3</span>rpx solid <span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">167</span>);<br>  <span class="hljs-attribute">color</span>:<span class="hljs-built_in">rgb</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">167</span>);<br><span class="hljs-attribute">display</span>: flex;<br><span class="hljs-attribute">flex-direction</span>: row;<br><span class="hljs-attribute">align-items</span>: center;<br><span class="hljs-attribute">justify-content</span>: center;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="3-获取最新发布的三篇文章"><a href="#3-获取最新发布的三篇文章" class="headerlink" title="3. 获取最新发布的三篇文章"></a>3. 获取最新发布的三篇文章</h1><p><img src="C:\Users\86138\Desktop\image-20220512183340511.png" alt="image-20220512183340511"></p><p>最新发布模块可以获取云数据库中最新发布的三篇文章，原理是根据时间戳倒叙排序后取前三条记录。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript">db.<span class="hljs-title function_">collection</span>(<span class="hljs-string">&quot;databasearticles&quot;</span>)<br>      .<span class="hljs-title function_">orderBy</span>(<span class="hljs-string">&#x27;createdate&#x27;</span>,<span class="hljs-string">&#x27;desc&#x27;</span>)<br>      .<span class="hljs-title function_">limit</span>(<span class="hljs-number">3</span>)<br>      .<span class="hljs-title function_">get</span>(&#123;<br>        <span class="hljs-attr">success</span>:<span class="hljs-function"><span class="hljs-params">res</span>=&gt;</span>&#123;<br>          <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(res)<br>          <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">setData</span>(&#123;<br>            <span class="hljs-attr">new3obj</span>:res.<span class="hljs-property">data</span><span class="hljs-comment">//new3obj 是在 data 中定义的，用来接收最新发布的三篇文章对象集合的变量</span><br>          &#125;)<br>        &#125;<br>      &#125;)<br></code></pre></td></tr></table></figure><p>以上就是本小程序核心功能啦！希望对你有帮助！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本次小程序设计主要围绕 map 组件展开。&lt;/p&gt;
&lt;p&gt;我们组设计了一款能够记录地图上的标点信息，并将自己的标点信息发布到帖子上的旅游类app。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Jingqing3948/DianJi_Demo&quot;&gt;gi</summary>
      
    
    
    
    <category term="miniprogram" scheme="http://example.com/categories/miniprogram/"/>
    
    
    <category term="homework" scheme="http://example.com/tags/homework/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/06/29/Python%20%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8_1/"/>
    <id>http://example.com/2022/06/29/Python%20%E7%88%AC%E8%99%AB%E5%85%A5%E9%97%A8_1/</id>
    <published>2022-06-29T02:49:50.648Z</published>
    <updated>2022-05-19T17:48:41.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h1><p>爬取豆瓣 Top250 电影基本信息，包括名称、评分、评价数、电影概况、电影链接等。</p><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p><a href="https://movie.douban.com/top250">豆瓣电影 Top 250 (douban.com)</a></p><p>爬虫是按照一定<strong>规则</strong>，<strong>自动抓取</strong>互联网信息的程序或脚本。如今主流策略是<strong>根据用户需求定向抓取。</strong></p><p><em>在百度指数中搜索关键词，可以看到该关键词的访问量。</em></p><p>实际上很多网站不自己写内容，爬取其它网站的内容复制到自己这里就方便的多。</p><p>爬虫很早就有，但是最近计算能力上涨，如大数据等应用，使得爬虫的价值继续提升，所以最近火一些~</p><p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220520012210874.png" alt="image-20220520012210874"></p><h2 id="url"><a href="#url" class="headerlink" title="url"></a>url</h2><p>当我们浏览豆瓣 top250电影，进行翻页时，会发现 url 变成了：</p><p><a href="https://movie.douban.com/top250?start=25&filter=">https://movie.douban.com/top250?start=25&amp;filter=</a></p><p>意思是从第26条记录开始显示（默认一页25条）。如果手动改成 start=31，就会从32条开始显示。filter 去掉也可以。</p><p>当我们发送 url 给服务器，服务器返回源代码（html），经过浏览器解析变成看得到的样子。</p><p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220520013155589.png" alt="image-20220520013155589"></p><p>元素中可以看到网页 html 元素</p><p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220520013933832.png" alt="image-20220520013933832"></p><p>network 中可以看到请求状况。（如果请求状况为空：点击 all 全部按钮)</p><p>network - header 中的general 和 response headers 的内容都是我们发给服务期端的，服务器返回的内容在 network - response 响应中。</p><p>其中，user agent 表明浏览器版本，cookie 中包含登陆后的信息。</p><h2 id="找到要获取的文件所在位置"><a href="#找到要获取的文件所在位置" class="headerlink" title="找到要获取的文件所在位置"></a>找到要获取的文件所在位置</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h1&gt;&lt;p&gt;爬取豆瓣 Top250 电影基本信息，包括名称、评分、评价数、电影概况、电影链接等。&lt;/p&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/06/29/Python%E2%80%94%E2%80%94%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802/"/>
    <id>http://example.com/2022/06/29/Python%E2%80%94%E2%80%94%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%802/</id>
    <published>2022-06-29T02:49:50.648Z</published>
    <updated>2022-05-19T16:59:40.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> random<br>x=random.randint(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>)<span class="hljs-comment">#包含0,1,2</span><br></code></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">函数名</span>():<span class="hljs-comment"># 括号内也可以有参数</span><br>    函数体<br>    <span class="hljs-keyword">return</span> x,y<span class="hljs-comment"># 返回值可以是多个</span><br>x,y=函数名()<span class="hljs-comment"># 调用</span><br></code></pre></td></tr></table></figure><h1 id="全局、局部变量"><a href="#全局、局部变量" class="headerlink" title="全局、局部变量"></a>全局、局部变量</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">a = <span class="hljs-number">100</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function</span>():<br>    a = <span class="hljs-number">200</span><span class="hljs-comment"># 局部变量，和原来的a地址不同。不会互相影响</span><br>    b = <span class="hljs-number">200</span><span class="hljs-comment"># 局部变量，作用域只在函数内，在外面使用b会报错</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">function1</span>():<br>    <span class="hljs-keyword">global</span> a<span class="hljs-comment"># 但如果这样声明了，就是使用的全局变量。更改的话全局范围内的a值也会变。</span><br></code></pre></td></tr></table></figure><h1 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<span class="hljs-comment"># w模式下，如果同级目录中没有找到对应文件，就会新建一个。一执行，同级目录下立刻就会新建1.txt</span><br><span class="hljs-comment"># 若非w模式下没找到对应文件，会报错</span><br>f.write(<span class="hljs-string">&quot;hello world!&quot;</span>)<span class="hljs-comment"># 往该文件中写入内容</span><br>f.close()<span class="hljs-comment"># 关闭文件</span><br><br>f1 = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<span class="hljs-comment"># r模式代表只读文件，不存在该文件则报错。</span><br>content1 = f1.read(<span class="hljs-number">5</span>)<span class="hljs-comment"># 读取前五个字符</span><br>content2 = f1.read(<span class="hljs-number">5</span>)<span class="hljs-comment"># 读取6~10个字符</span><br>contentline=f1.readlines()<span class="hljs-comment"># 读取文件中所有行，每行作为列表 contentline 中的一项（字符串元素），并以\n结尾</span><br></code></pre></td></tr></table></figure><p>w：写入，已存在该文件则覆盖，不存在则新建。指针一开始在文件开头，逐渐后移。</p><p>r：读取。指针一开始在文件开头，逐渐后移。</p><p>rb：二进制方式打开文件（只读）</p><p>wb：二进制方式写入文件</p><p>重命名文件、删除文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<span class="hljs-comment"># 重命名和删除文件都要引入 os 模块</span><br>os.rename(<span class="hljs-string">&#x27;1.txt&#x27;</span>,<span class="hljs-string">&#x27;2.txt&#x27;</span>)<span class="hljs-comment"># 重命名</span><br>os.remove(<span class="hljs-string">&#x27;2.txt&#x27;</span>)<span class="hljs-comment"># 删除文件</span><br></code></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><p>就像 java 中，异常会中断程序，可以提前处理。</p><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;123.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<span class="hljs-comment"># 不存在该文件</span><br><span class="hljs-keyword">except</span> IOError:<span class="hljs-comment"># 文件没找到属于 IOError 输入输出异常</span><br>    <span class="hljs-keyword">pass</span><span class="hljs-comment"># 不做任何处理</span><br><br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">print</span>(name)<span class="hljs-comment">#没有定义的变量</span><br><span class="hljs-keyword">except</span> NameError:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;name不存在！&quot;</span>)<br><br><span class="hljs-comment"># 同时捕获多个异常：except (IOError, NameError): 如果发生了其中的一个异常，try 内代码就会停止运行并处理</span><br><span class="hljs-comment"># 其实所有的异常都可以用一个 except Exception 捕获。</span><br><br><span class="hljs-comment"># 获取错误描述：</span><br><span class="hljs-keyword">except</span> Xxx <span class="hljs-keyword">as</span> result:<br>    <span class="hljs-built_in">print</span>(result)<br>    <br><span class="hljs-comment"># try...finally finally 中的内容是必须执行的</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">try</span>:<br>    f.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;123.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<span class="hljs-comment"># f在 try 中定义的，是局部变量。因此如果 finally 要关闭f的话，应该写在 try 内</span><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            content = f.readline()<br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(content)==<span class="hljs-number">0</span>):<br>                <span class="hljs-keyword">break</span><br>            time.sleep(<span class="hljs-number">2</span>)<span class="hljs-comment"># 打印行与行之间间隔2s</span><br>            <span class="hljs-built_in">print</span>(content)<br>    <span class="hljs-keyword">finally</span>:<br>        f.close()<span class="hljs-comment"># 强制关闭，一定执行</span><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;文件关闭&quot;</span>)<br><span class="hljs-keyword">except</span> Exception:<br>    <span class="hljs-keyword">pass</span><br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-keyword">pass</span><span class="hljs-comment"># 如果打开文件失败了，就说明没有这个文件，自然也不用关闭这个文件了</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;导包&quot;&gt;&lt;a href=&quot;#导包&quot; class=&quot;headerlink&quot; title=&quot;导包&quot;&gt;&lt;/a&gt;导包&lt;/h1&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94IO%20%E5%AD%97%E7%AC%A6%E6%B5%81/"/>
    <id>http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94IO%20%E5%AD%97%E7%AC%A6%E6%B5%81/</id>
    <published>2022-06-29T02:49:50.632Z</published>
    <updated>2022-05-23T19:32:28.232Z</updated>
    
    <content type="html"><![CDATA[<p>如果按照之前读取字节流的方法，我们要得到输出内容时需要用 (char) 强制转换。</p><p>如果内容中包含中文，就会输出乱码。因为汉字存储在 GBK 编码下占用2 byte，UTF-8 编码下占用3 byte。所以每次读写一个字节，就会把字节拆开，就输出不了汉字了。</p><p>字符流就会方便很多。</p><h1 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h1><p>字符流=字节流+编码表。</p><p>汉字存储时，不管采用哪种编码方法，第一个字节都是负数，以此判断。</p><h2 id="编码表"><a href="#编码表" class="headerlink" title="编码表"></a>编码表</h2><p>计算机中的信息都是二进制数表示的。</p><p>按照一定规则把字符存储到计算机中，叫编码。</p><p>按照一定规则把字符从计算机中解析，叫解码。</p><h2 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h2><p>一个系统支持的所有字符集合。如 ASCII GBKXXX Unicode 等。</p><p><strong>ASCII码</strong> —ASCII编码表由一个字节表示，128个字符，包含字母、数字、常用符号等。其拓展集128~255方便支持欧洲常用字符。</p><p><strong>GBXXX</strong>—一个小于127的字符意义与原来相同（半角字符）但两个大于127的字符相连，表示一个汉字。甚至一些数学符号、罗马希腊字母、日文假名、原来的数字、标点、字母都被重新编了二字节的编码，即全角字符。</p><p>其中 GBK 是最常用的中文码表，还支持繁体、日韩汉字。</p><p><em>GB18030：最新的中文码表，每个字可以由1、2、4个字节组成，支持少数名族文字。</em></p><p><strong>Unicode</strong>—表达任意语言的任意字符。最常见的就是 UTF-8 编码。前128和 ASCII 一样，1个字节；拉丁文字符2个字节；大部分常用字（包括中文）3个字节；其他辅助字符4个字节。</p><h2 id="字符串的编码解码"><a href="#字符串的编码解码" class="headerlink" title="字符串的编码解码"></a>字符串的编码解码</h2><p>编码：byte[] getBytes() 或 byte[] getBytes(String charsetName) 指定字符集。</p><p>解码：String(byte[] bytes) 或 String(byte[] bytes, String charsetName) 构造方法。</p><p>IDEA 平台默认字符集为 UTF-8。</p><p>在字符流中的解码、编码对应 InputStreamReader、OutputStreamWriter，</p><p>构造方法：InputStreamReader(FileInputStream, String charsetName) </p><p>OutputStreamReader(FileOutputStream, String charsetName) 也可以指定字符集。然后就正常使用 read() write() 方法。</p><p>如果使用 UTF-8 编码就可以直接写入中文字符串。否则需要同样编码方法的读取方法才能正确读取。</p><table><thead><tr><th>写数据方法</th><th>说明</th></tr></thead><tbody><tr><td>void write(int c)</td><td>写一个字符</td></tr><tr><td>void write(char cbuf)</td><td>写入一个字符数组</td></tr><tr><td>void write(char cbuf, int off, int len)</td><td>写入一个字符数组的一部分</td></tr><tr><td>void write(String str)</td><td>写入一个字符串</td></tr><tr><td>void write(String str, int off, int len)</td><td>写入一个字符串的一部分</td></tr></tbody></table><p>这样写完，数据还是在缓冲区中。需要通过 void flush() 方法刷新。</p><p>不过 close() 方法关闭前也会自动刷新一下。只是关闭方法后就不能再写入数据了~</p><table><thead><tr><th>读数据方法</th><th>说明</th></tr></thead><tbody><tr><td>int read()</td><td>读一个字符</td></tr><tr><td>int read(char[] cbuf)</td><td>一次读一个字符数组</td></tr></tbody></table><p>FileReader 和 FileWriter 是两个字符流解码、编码的便捷类。构造方法参数为路径字符串或 File 对象。</p><h2 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h2><p>BufferedReader(Reader in)</p><p>BufferedWriter(Writer out)</p><p>两者自带成员方法：public String readLine() 读一行 和 void newLine() 写一行。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果按照之前读取字节流的方法，我们要得到输出内容时需要用 (char) 强制转换。&lt;/p&gt;
&lt;p&gt;如果内容中包含中文，就会输出乱码。因为汉字存储在 GBK 编码下占用2 byte，UTF-8 编码下占用3 byte。所以每次读写一个字节，就会把字节拆开，就输出不了汉字了。&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94IO%20%E5%AD%97%E8%8A%82%E6%B5%81/"/>
    <id>http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94IO%20%E5%AD%97%E8%8A%82%E6%B5%81/</id>
    <published>2022-06-29T02:49:50.632Z</published>
    <updated>2022-05-23T18:56:52.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="File-类"><a href="#File-类" class="headerlink" title="File 类"></a>File 类</h1><p>在 java.io 包下。</p><p>File 是文件和目录（文件夹）的路径名的抽象表示。</p><h2 id="绝对路径和相对路径"><a href="#绝对路径和相对路径" class="headerlink" title="绝对路径和相对路径"></a>绝对路径和相对路径</h2><p>绝对路径是完整的路径名，不需要其他信息就能定位其所表示的文件。如<code>D:\\文件夹\\java.txt</code>。</p><p>相对路径：必须使用取自其他路径名的信息进行解释。如从源文件目录下开始写：<code>myFile\\java.txt</code>。</p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>File(String pathname)</td><td>通过将给定的路径名字符串转换为抽象路径名创建对象</td></tr><tr><td>File(String parent, String child)</td><td>父子两个路径名字符串</td></tr><tr><td>File(File parent, String child)</td><td></td></tr></tbody></table><p>路径形如：<code>D:\\文件夹\\java.txt</code>。也可以拆分成父<code>D:\\文件夹</code>和子<code>java.txt</code>。也可以第一个 File 对象的路径是<code>D:\\文件夹</code>，子 File 补充<code>java.txt</code>。</p><p>如果直接输出 File 类型，会得到路径。说明 File 类重写了 toString 方法。</p><h2 id="创建功能"><a href="#创建功能" class="headerlink" title="创建功能"></a>创建功能</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public boolean createNewFile()</td><td>若此文件名的文件不存在，则创建一个空的</td></tr><tr><td>public boolean mkdir()</td><td>创建目录</td></tr><tr><td>public boolean mkdirs()</td><td>创建目录，包括任何必须的父目录</td></tr></tbody></table><p>创建成功返回 true，创建失败（如已存在）返回 false。</p><p>如果调错方法了，可能会创建一个名为 java.txt 的文件夹！一定要正确使用创建文件的方法。</p><h2 id="创建获取功能"><a href="#创建获取功能" class="headerlink" title="创建获取功能"></a>创建获取功能</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public boolean isDirectory()</td><td>是否是个目录</td></tr><tr><td>public boolean isFile()</td><td>是否是个文件</td></tr><tr><td>public boolean exists()</td><td>是否存在</td></tr><tr><td>public String getAbsolutePath()</td><td>获取其绝对路径</td></tr><tr><td>public String getPath()</td><td>获取其相对路径</td></tr><tr><td>public String getName()</td><td>获取该文件或目录名</td></tr><tr><td>public String[] list()</td><td>返回此抽象路径名表示的<strong>目录</strong>中的所有文件和目录的名称字符串数组</td></tr><tr><td>public File[] listFiles()</td><td>返回此抽象路径名表示的<strong>目录</strong>中的文件和目录的 File 对象数组</td></tr></tbody></table><h2 id="删除功能"><a href="#删除功能" class="headerlink" title="删除功能"></a>删除功能</h2><p>public boolean delete()</p><p>如果目录中有内容，不能直接删目录。要先删空内容。</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">f</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">1</span>||n==<span class="hljs-number">2</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> f(n-<span class="hljs-number">1</span>)+f(n-<span class="hljs-number">2</span>);<span class="hljs-comment">//斐波那契数列</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果未能跳出递归，方法不断压入堆栈空间，导致内存溢出。</p><h1 id="IO-流"><a href="#IO-流" class="headerlink" title="IO 流"></a>IO 流</h1><p>IO 表示输入输出，流是对数据传输的统称。</p><p>常见应用：文件复制、上传、下载。</p><p>分为字节、字符两种数据类型的输入、输出流。（如果通过记事本打开，你看的懂内容，就是字符流；如果一串乱码，就是字节流）</p><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><p>java.io.InputStream，抽象类，是所有输入字节流的类的超类。</p><p>java.io.OutputStream，抽象类，是所有输出字节流的类的超类。</p><p>子类名称都是以父类作为后缀。</p><h3 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h3><p>数据写入 Stream。</p><p><strong>使用时需要抛出异常，main() throws FileNotFoundException。</strong></p><ol><li><p>创建字节输出流对象</p><p>FileOutputStream(String name) 创建文件输出流，以指定的名称写入文件。name 是路径。如果没有该文件，会创建一个。</p><ol><li>检查有无该文件，若没有自动创建；</li><li>创建 FileOutputStream 对象；</li><li>FileOutputStream 对象指向该文件。</li></ol></li><li><p>调用写数据方法</p><p>写入： void write(int b)。如b=97，就会写入一个字母a。</p><p>void write(byte[] b) 将 b.length 字节从指定的字节数组中写入此文件输入流。（可以通过 String.getBytes() 方法获取字符串对应的字节数组）</p><p>void write(byte[] b, int off, int len) 将从指定偏移量开始处指定长度的字节写入。</p></li><li><p>释放资源</p><p><strong>使用完后要 close()！</strong>关闭该文件输出流并释放相关系统资源。</p></li></ol><p><em>1. 想添加换行内容就在字符串里加 \n 即可。但是 windows 中的换行是 \r\n，Linux 中的是 \n，Mac 中的是 \r.而 idea 直接打开文本文档，则这几种类型的换行都能识别。</em></p><p><em>2. 这种写法每次运行，不是在文档尾追加写入，而是覆盖。想要追加写入，就在创建 FileOutputStream 对象时加一个 boolean 类型的 append 的 true 值：FileOutputStream(String s, boolean append)，就表示追加写入。</em></p><h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h4><p>异常类： IOException</p><p>finally: 在异常处理时提供 finally 执行所有清除操作。其中的内容一定会执行，除非虚拟机退出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">FileOutputStream f=<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">try</span>&#123;<br>    <br>&#125;<br><span class="hljs-keyword">catch</span>()&#123;<br>    <br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br>    <span class="hljs-comment">//执行清除操作</span><br>    <span class="hljs-keyword">if</span>(f!=<span class="hljs-literal">null</span>)f.close();<span class="hljs-comment">//这里可能还会生成一个 try catch</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="FileInputStream"><a href="#FileInputStream" class="headerlink" title="FileInputStream"></a>FileInputStream</h2><ol><li><p>创建字节输入流对象</p><p>构造方法： FileInputStream(File 或 String)</p><ol><li>检查有无该文件，若没有自动创建；</li><li>创建 FileOutputStream 对象；</li><li>FileOutputStream 对象指向该文件。</li></ol></li><li><p>调用读数据方法</p><p>int read() 读取第一个数据。如果到达文档末尾，返回-1.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>((by=f.read())!=-<span class="hljs-number">1</span>)&#123;<br>    System.out.println((<span class="hljs-type">char</span>)by);<br>&#125;<span class="hljs-comment">//读取文件中所有内容，包括换行符</span><br></code></pre></td></tr></table></figure><p>int read(byte[] b)返回读入缓冲区的字节总数。如果到达文档末尾，返回-1.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">byte</span>[] bys=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<span class="hljs-comment">//一次读取一个字节数组</span><br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span>((len=fis.read(bys))!=-<span class="hljs-number">1</span>)&#123;<br>    System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bys,<span class="hljs-number">0</span>,len));<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>释放资源</p></li></ol><h4 id="复制文本文档"><a href="#复制文本文档" class="headerlink" title="复制文本文档"></a>复制文本文档</h4><p>写一个循环，读取复制文件中每个字节的同时，将每个字节写入粘贴文件中。</p><h3 id="复制图像"><a href="#复制图像" class="headerlink" title="复制图像"></a>复制图像</h3><p>复制图像：建议一次读取/写入一个字节数组。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;要复制的图片路径\\文件名&quot;</span>);<br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;要粘贴的文件路径\\文件名&quot;</span>);<br><span class="hljs-type">byte</span>[] bys=<span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span>((len=fis.read(bys))!=-<span class="hljs-number">1</span>)<br>&#123;<br>    fos.write(bys);<br>&#125;<br>fis.close();<br>fos.close();<br></code></pre></td></tr></table></figure><h2 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h2><p>java.io.BufferedOutputStream</p><p>之前 FileOutputStream 每次写入都会导致底层系统的调用，而字节缓冲流可以直接向底层输出流写入字节。实现时间更短。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">BufferedOutputStream bos=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-string">&quot;路径&quot;</span>));<br><span class="hljs-comment">//读写数据方法和之前一样。但是还得靠 File</span><br>bos.write(<span class="hljs-string">&quot;String&quot;</span>.getBytes());<br><span class="hljs-comment">//记得释放资源</span><br>bos.close();<br><br>BufferedInputStream bis=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;路径&quot;</span>));<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span>((len=bis.read(bys)!=-<span class="hljs-number">1</span>))&#123;<br>    System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(bys,<span class="hljs-number">0</span>,len));<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;File-类&quot;&gt;&lt;a href=&quot;#File-类&quot; class=&quot;headerlink&quot; title=&quot;File 类&quot;&gt;&lt;/a&gt;File 类&lt;/h1&gt;&lt;p&gt;在 java.io 包下。&lt;/p&gt;
&lt;p&gt;File 是文件和目录（文件夹）的路径名的抽象表示。&lt;/p&gt;
&lt;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E6%92%AD%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%20GUI_1/"/>
    <id>http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E6%92%AD%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%20GUI_1/</id>
    <published>2022-06-29T02:49:50.632Z</published>
    <updated>2022-05-14T00:48:56.385Z</updated>
    
    <content type="html"><![CDATA[<p>java 也可以在前端进行开发，使用 AWT 和 SWING 完成图形化界面编程。</p><h1 id="AWT"><a href="#AWT" class="headerlink" title="AWT"></a>AWT</h1><p>Abstract Window Toolkit 抽象窗口工具集。它是抽象的，程序只指定某个模块的位置和行为，具体实现（样式等）是由操作系统完成。</p><p>主要包括两个基类： Component 和 MenuComponent。其中 Component 中的 Container 组件可以作为容器，包含其他组件。</p><p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220513151527543.png" alt="image-20220513151527543"></p><p>此外，AWT 还有一个比较重要的知识点 LayoutManager，负责处理布局。</p><p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220513151540412.png" alt="image-20220513151540412"></p><h2 id="Component"><a href="#Component" class="headerlink" title="Component"></a>Component</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>setLocation(int x, int y)</td><td>设置组件位置</td></tr><tr><td>setSize(int width, int height)</td><td>设置组件大小</td></tr><tr><td>setBounds(int x, int y, int width, int height)</td><td>同时设置位置和大小</td></tr><tr><td>setVisible(Boolean b)</td><td>设置该组件的可见性</td></tr></tbody></table><h3 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h3><p>Frame 是继承自 Window 的类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Frame frame=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;标题&quot;</span>);<br>frame.setLocation(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>);<span class="hljs-comment">//位置</span><br>frame.setSize(<span class="hljs-number">500</span>,<span class="hljs-number">300</span>);<span class="hljs-comment">//宽高</span><br>frame.setVisible(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>现在的窗口是没法点击x号关闭的，需要手动停止运行才能结束。</p><h3 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h3><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>Component add(Component comp)</td><td>向该组件中添加其他组件</td></tr><tr><td>Component getComponentAt(int x, int y)</td><td>返回指定位置的组件</td></tr><tr><td>int getComponentCount()</td><td>返回该容器中组件的数量</td></tr><tr><td>Component[] getComponents()</td><td>返回该容器中所有的组件</td></tr></tbody></table><p>容器不能单独存在，必须依附于 Window 存在。</p><p>编写时，先添加 window 窗口，然后添加容器，再在容器中添加组件，最后把容器添加到 Window 中，调整 Window 位置。自己也可以写组件。</p><h4 id="Panel"><a href="#Panel" class="headerlink" title="Panel"></a>Panel</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 创建 window 对象</span><br>Frame myFrame=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>();<br><span class="hljs-comment">//2. 创建 Panel 对象</span><br>Panel p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>();<br><span class="hljs-comment">//创建文本框和按钮，放入 Panel 对象</span><br>p.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextField</span>(<span class="hljs-string">&quot;测试文本&quot;</span>));<br>p.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;测试按钮&quot;</span>));<br><span class="hljs-comment">//出现乱码的话，左上角 PanelTry-添加 VM 选项-输入 -Dfile.encoding=gbk</span><br>myFrame.add(p);<br>myFrame.setBounds(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">500</span>,<span class="hljs-number">300</span>);<br>myFrame.setVisible(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h4 id="ScrollPane"><a href="#ScrollPane" class="headerlink" title="ScrollPane"></a>ScrollPane</h4><p>元素过多时会添加滚动条。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">Frame frame=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;ScrollPane&quot;</span>);<br>ScrollPane sp=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ScrollPane</span>(ScrollPane.SCROLLBARS_ALWAYS);<span class="hljs-comment">//默认是总是有滚动条</span><br>sp.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextField</span>(<span class="hljs-string">&quot;测试文本&quot;</span>));<br>sp.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;测试按钮&quot;</span>));<br>frame.add(sp);<br>frame.setBounds(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">500</span>,<span class="hljs-number">300</span>);<br>frame.setVisible(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>但是实际上按钮把整个页面占满了。测试文本并没有出现。这就涉及到布局管理器的知识了。</p><h2 id="LayoutManager"><a href="#LayoutManager" class="headerlink" title="LayoutManager"></a>LayoutManager</h2><p>相比手动在不同平台上设置各个组件的大小，LayoutManager 会根据不同平台自动调整组件大小，使得程序员即便在不同的平台上也可以做到相同的布局使用体验。</p><p><em>最佳大小：组件刚好和内容一样大小。通过 pack() 方法设置。</em></p><h3 id="FlowLayout"><a href="#FlowLayout" class="headerlink" title="FlowLayout"></a>FlowLayout</h3><p>组件像水流一样流动（排列），碰到障碍（边界）就会折回重新开始。</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>FlowLayout()</td><td>使用默认的对齐方式、垂直间距、水平间距</td></tr><tr><td>FlowLayout(int align)</td><td>设置对齐方式（常量 LEFT RIGHT CENTER）</td></tr><tr><td>FlowLayout(int align, int hgap, int vgap)</td><td>设置对齐方式、垂直间距、水平间距</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Frame f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;Float 测试&quot;</span>);<br>f.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FlowLayout</span>(FlowLayout.LEFT,<span class="hljs-number">20</span>,<span class="hljs-number">20</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">100</span>;i++)&#123;f.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;按钮&quot;</span>+i));&#125;<br>f.pack();<span class="hljs-comment">//最佳大小设置</span><br>f.setVisible(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h3 id="BorderLayout"><a href="#BorderLayout" class="headerlink" title="BorderLayout"></a>BorderLayout</h3><p>分为5各部分，东西南北中。</p><p>往 BorderLayout 中添加组件需要指明放在了哪个区域中。默认在 CENTER 里。</p><p>如果往一个区域中添加了多个组件，后添加的会覆盖新添加的。</p><p><em>因此想如果往一个区域中添加多个组件，不能一个个 add 到这个区域。可以把他们都 add 到容器中，然后把容器 add 到那个区域。</em></p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>BorderLayout()</td><td></td></tr><tr><td>BorderLayout(int hgap, int vgap)</td><td>指定水平垂直间距创建</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">Frame f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;BorderLayoutTry&quot;</span>);<br>f.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BorderLayout</span>(<span class="hljs-number">30</span>,<span class="hljs-number">10</span>));<br>f.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;北侧按钮&quot;</span>),BorderLayout.NORTH);<br>f.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;南侧按钮&quot;</span>),BorderLayout.SOUTH);<br>f.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;中侧按钮&quot;</span>),BorderLayout.CENTER);<br>f.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;西侧按钮&quot;</span>),BorderLayout.WEST);<br>f.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;东侧按钮&quot;</span>),BorderLayout.EAST);<br>f.pack();<br>f.setVisible(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p>没添加内容的区域会被其他区域占用。如西侧没添加，中间的部分就会靠左占掉西侧。</p><p>可以和其他排版结合使用~</p><h3 id="GridLayout"><a href="#GridLayout" class="headerlink" title="GridLayout"></a>GridLayout</h3><p>将容器分割成纵横线分隔的网格，每个网格站的区域大小相同。</p><p>添加组件默认从左往右、从上往下添加。</p><table><thead><tr><th>构造方法</th><th>说明</th></tr></thead><tbody><tr><td>GridLayout(int rows, int cols)</td><td>指定行数列数，间距默认</td></tr><tr><td>GridLayout(int rows, int cols, int hgap, int vgap)</td><td>指定行数、列数、间距</td></tr></tbody></table><h3 id="GridBagLayout"><a href="#GridBagLayout" class="headerlink" title="GridBagLayout"></a>GridBagLayout</h3><p>可以让部分组件占用更多的网格（1*2,3*3……）</p><p>通过 API GridBagConstraints 类设置。</p><p>用起来很复杂，就不用了……因为在 swing 中有更强大的解决方法。</p><h3 id="CardLayout"><a href="#CardLayout" class="headerlink" title="CardLayout"></a>CardLayout</h3><p>卡片布局，把加入容器的所有组件看做一叠卡片，类似队列，最先添加的在最上面，后添加的在下面。</p><table><thead><tr><th>方法</th><th>功能</th></tr></thead><tbody><tr><td>CardLayout()</td><td></td></tr><tr><td>CardLayout(int hgap, int vgap)</td><td>指定卡片与容器左右、上下边距</td></tr><tr><td>first(Container targer)</td><td>第一张卡片</td></tr><tr><td>last(Container targer)</td><td>最后一张卡片</td></tr><tr><td>previous(Container target)</td><td>前一张卡片</td></tr><tr><td>next(Container target)</td><td>后一张卡片</td></tr><tr><td>show(Container target, String name)</td><td>显示指定名字的卡片</td></tr></tbody></table><p>制作一个卡片展示器，有五张卡片，然后5个按钮可以快速查看上一张、下一张、中间一张、第一张、最后一张。</p><p>展示卡片部分是 p 容器，5个按钮部分是 p2 容器。</p><p>这里涉及到一点事件监听器的知识了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs java">Frame f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;卡片布局&quot;</span>);<br>f.setLayout(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BorderLayout</span>());<br>Panel p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>();<br>CardLayout c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CardLayout</span>();<span class="hljs-comment">//需要创建卡片对象</span><br>p.setLayout(c);<br>String[] names=&#123;<span class="hljs-string">&quot;第一张&quot;</span>,<span class="hljs-string">&quot;第二张&quot;</span>,<span class="hljs-string">&quot;第三张&quot;</span>,<span class="hljs-string">&quot;第四张&quot;</span>&#125;;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">4</span>;i++)p.add(names[i],<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(names[i]));<br>f.add(p);<br>Panel p2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>();<br><span class="hljs-type">Button</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;上一张&quot;</span>);<br><span class="hljs-type">Button</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;下一张&quot;</span>);<br><span class="hljs-type">Button</span> <span class="hljs-variable">b3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;第三张&quot;</span>);<br><span class="hljs-type">Button</span> <span class="hljs-variable">b4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;第一张&quot;</span>);<br><span class="hljs-type">Button</span> <span class="hljs-variable">b5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;最后一张&quot;</span>);<br>ActionListener l=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<span class="hljs-comment">//事件监听器</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>        String actionCommand=e.getActionCommand();<span class="hljs-comment">//获取按钮上的文字</span><br>        <span class="hljs-keyword">switch</span>(actionCommand)&#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;上一张&quot;</span>:<br>                c.previous(p);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;下一张&quot;</span>:<br>                c.next(p);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;第三张&quot;</span>:<br>                c.show(p,<span class="hljs-string">&quot;第三张&quot;</span>);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;第一张&quot;</span>:<br>                c.first(p);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;最后一张&quot;</span>:<br>                c.last(p);<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;;<br>b1.addActionListener(l);<br>b2.addActionListener(l);<br>b3.addActionListener(l);<br>b4.addActionListener(l);<br>b5.addActionListener(l);<br>p2.add(b1);<br>p2.add(b2);<br>p2.add(b3);<br>p2.add(b4);<br>p2.add(b5);<br>f.add(p2,BorderLayout.SOUTH);<br>f.pack();<br>f.setVisible(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h3 id="BoxLayout"><a href="#BoxLayout" class="headerlink" title="BoxLayout"></a>BoxLayout</h3><p>是 swing 引入的一个布局管理器，可以简化开发。</p><p>BoxLayout(Container target, int axis)，axis有BoxLayout.X_AXIS 横向和BoxLayout.Y_AXIS 纵向。</p><h1 id="Box"><a href="#Box" class="headerlink" title="Box"></a>Box</h1><p>java.swing 中还提供了一个更简单的容器：Box，默认布局管理器就是 BoxLayout。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>static Box createHorizontalBox()</td><td>创建一个水平排列组件的容器</td></tr><tr><td>static Box createVerticalBox()</td><td>创建一个垂直排列组件的容器</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Box b1=Box.createHorizontalBox();<br>b1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;1&quot;</span>));<br>b1.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;2&quot;</span>));<br>f.add(b1);<br>Box b2=Box.createVerticalBox();<br>b2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;3&quot;</span>));<br>b2.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;4&quot;</span>));<br>f.add(b2,BorderLayout.SOUTH);<br></code></pre></td></tr></table></figure><p>还可以生成一些间隔。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>static Component createHorizontalGlue()</td><td>创建一条水平 Glue</td></tr><tr><td>static Component createVerticalGlue()</td><td>创建一条垂直 Glue</td></tr><tr><td>static Component createHorizontalStrut(int width)</td><td>创建一条指定宽度的 Strut</td></tr><tr><td>static Component createVerticalStrut(int height)</td><td>创建一条指定高度的 Strut</td></tr></tbody></table><p>直接 add 到 Box 中就可以。</p><p><strong>注意：NORTH SOUTH 高度是固定的，和 Glue 连用的时候要注意。</strong></p><p>Glue 随着窗口放缩会变换间距。Strut 间距是固定的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;java 也可以在前端进行开发，使用 AWT 和 SWING 完成图形化界面编程。&lt;/p&gt;
&lt;h1 id=&quot;AWT&quot;&gt;&lt;a href=&quot;#AWT&quot; class=&quot;headerlink&quot; title=&quot;AWT&quot;&gt;&lt;/a&gt;AWT&lt;/h1&gt;&lt;p&gt;Abstract Window T</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94GUI_4%20%E5%BC%B9%E7%90%83%E6%B8%B8%E6%88%8F/"/>
    <id>http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94GUI_4%20%E5%BC%B9%E7%90%83%E6%B8%B8%E6%88%8F/</id>
    <published>2022-06-29T02:49:50.601Z</published>
    <updated>2022-05-17T12:02:23.237Z</updated>
    
    <content type="html"><![CDATA[<h1 id="小游戏——弹球"><a href="#小游戏——弹球" class="headerlink" title="小游戏——弹球"></a>小游戏——弹球</h1><p>每隔几毫秒就重绘一下页面，可以实现动画效果。可以通过定时器 Timer 解决。</p><p>弹球游戏就是打砖块，下面有一块按←→可以左右移动的球拍。球落到球拍下面就算失败。</p><p>思路：</p><ol><li>创建组件作为成员变量，其中固定大小位置的值（final）；</li><li>创建自己的 MyCanvas 类继承 Canvas 类，在其中重写 paint()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.swing.*;<br><span class="hljs-keyword">import</span> java.awt.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MarblesTry</span> &#123;<br>    <span class="hljs-keyword">private</span> Frame frame=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;弹球游戏&quot;</span>);<br>    <span class="hljs-comment">//桌面的大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> TABLE_WIDTH=<span class="hljs-number">300</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> TABLE_HEIGHT=<span class="hljs-number">400</span>;<br>    <span class="hljs-comment">//球拍的大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> RACKET_WIDTH=<span class="hljs-number">60</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> RACKET_HEIGHT=<span class="hljs-number">20</span>;<br>    <span class="hljs-comment">//小球的大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> BALL_SIZE=<span class="hljs-number">16</span>;<br>    <span class="hljs-comment">//定义变量记录小球的坐标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ballX=<span class="hljs-number">150</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ballY=<span class="hljs-number">20</span>;<br>    <span class="hljs-comment">//定义变量记录小球在 x y 方向上移动的速度</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> speedX=<span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> speedY=<span class="hljs-number">10</span>;<br>    <span class="hljs-comment">//定义变量记录球拍的坐标</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> racketX=<span class="hljs-number">150</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> racketY=<span class="hljs-number">340</span>;<span class="hljs-comment">//球拍只能左右移动</span><br>    <span class="hljs-comment">//定义变量标识当前游戏是否已结束</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> isOver=<span class="hljs-literal">false</span>;<br>    <span class="hljs-comment">//定时器</span><br>    <span class="hljs-keyword">private</span> Timer timer;<br><br>    <span class="hljs-comment">//定义一个类绘制内容</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCanvas</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Canvas</span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span>&#123;<br>            <span class="hljs-comment">//TODO 在这里绘制内容</span><br>            <span class="hljs-keyword">if</span>(isOver)&#123;<br>                g.setColor(Color.RED);<br>                g.setFont(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Font</span>(<span class="hljs-string">&quot;Times&quot;</span>,Font.BOLD,<span class="hljs-number">30</span>));<br>                g.drawString(<span class="hljs-string">&quot;游戏结束！&quot;</span>,<span class="hljs-number">80</span>,<span class="hljs-number">150</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//绘制小球和球拍</span><br>                g.setColor(Color.RED);<br>                g.fillOval(ballX,ballY,BALL_SIZE,BALL_SIZE);<br>                g.setColor(Color.PINK);<br>                g.fillRect(racketX,racketY,RACKET_WIDTH,RACKET_HEIGHT);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//创建绘画区域</span><br>    <span class="hljs-keyword">private</span> MyCanvas drawArea=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCanvas</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//组装组件，以及游戏逻辑的控制</span><br>        <span class="hljs-comment">//球拍的事件监听</span><br>        KeyListener listener=<span class="hljs-keyword">new</span> <span class="hljs-title class_">KeyAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">keyPressed</span><span class="hljs-params">(KeyEvent e)</span> &#123;<br>                <span class="hljs-comment">//获取电脑的按键</span><br>                <span class="hljs-type">int</span> keycode=e.getKeyCode();<br>                <span class="hljs-keyword">if</span>(keycode==KeyEvent.VK_LEFT)&#123;<br>                    <span class="hljs-comment">//不可以直接-=10，因为有边界问题</span><br>                    <span class="hljs-keyword">if</span>(racketX&gt;=<span class="hljs-number">10</span>)racketX-=<span class="hljs-number">10</span>;<br>                    drawArea.repaint();<br>                &#125;<br>                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(keycode==KeyEvent.VK_RIGHT)&#123;<br>                    <span class="hljs-keyword">if</span>(racketX&lt;TABLE_WIDTH-RACKET_WIDTH)racketX+=<span class="hljs-number">10</span>;<br>                    drawArea.repaint();<br>                &#125;<br>            &#125;<br>        &#125;;<br>        ActionListener task=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>                <span class="hljs-comment">//触顶，或者球拍碰到球：Y轴方向上调转</span><br>                <span class="hljs-keyword">if</span>(ballY&lt;=<span class="hljs-number">0</span>||(ballY&gt;=racketY-BALL_SIZE&amp;&amp;ballX&gt;=racketX&amp;&amp;ballX&lt;=racketX+RACKET_WIDTH))speedY=-speedY;<br>                <span class="hljs-comment">//左右触及边界：X轴方向上调转</span><br>                <span class="hljs-keyword">if</span>(ballX&lt;=<span class="hljs-number">0</span>||ballX&gt;TABLE_WIDTH-BALL_SIZE)speedX=-speedX;<br>                <span class="hljs-comment">//如果球的下边界低于球拍的上边界，且此时球水平方向上不在球拍的范围内：直接判断游戏失败</span><br>                <span class="hljs-keyword">if</span>(ballY&gt;racketY-BALL_SIZE&amp;&amp;(ballX&lt;racketX||ballX&gt;racketX+RACKET_WIDTH)) &#123;<br>                    timer.stop();<br>                    isOver = <span class="hljs-literal">true</span>;<br>                    drawArea.repaint();<br>                &#125;<br>                ballX+=speedX;<br>                ballY+=speedY;<br>                drawArea.repaint();<br>            &#125;<br>        &#125;;<br>        timer=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Timer</span>(<span class="hljs-number">100</span>,task);<span class="hljs-comment">//第一个参数是间隔时间，第二个参数是监听事件</span><br>        timer.start();<br>        <span class="hljs-comment">//点击 x 号，窗口关闭</span><br>        frame.addWindowListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>        drawArea.setPreferredSize(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(TABLE_WIDTH,TABLE_HEIGHT));<br>        <span class="hljs-comment">//监听器绑定事件源</span><br>        frame.addKeyListener(listener);<br>        drawArea.addKeyListener(listener);<br>        frame.add(drawArea,BorderLayout.NORTH);<br><br>        frame.pack();<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">MarblesTry</span>().init();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;小游戏——弹球&quot;&gt;&lt;a href=&quot;#小游戏——弹球&quot; class=&quot;headerlink&quot; title=&quot;小游戏——弹球&quot;&gt;&lt;/a&gt;小游戏——弹球&lt;/h1&gt;&lt;p&gt;每隔几毫秒就重绘一下页面，可以实现动画效果。可以通过定时器 Timer 解决。&lt;/p&gt;
&lt;p&gt;弹球游</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94GUI_3/"/>
    <id>http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94GUI_3/</id>
    <published>2022-06-29T02:49:50.601Z</published>
    <updated>2022-05-17T16:23:26.027Z</updated>
    
    <content type="html"><![CDATA[<h1 id="菜单组件"><a href="#菜单组件" class="headerlink" title="菜单组件"></a>菜单组件</h1><table><thead><tr><th>菜单组件名称</th><th>功能</th></tr></thead><tbody><tr><td>MenuBar</td><td>菜单条 ， 菜单的容器。</td></tr><tr><td>Menu</td><td>菜单组件 ， 菜单项的容器。 它也是Menultem的子类 ，所以可作为菜单项使用</td></tr><tr><td>PopupMenu</td><td>上下文菜单组件(右键菜单组件)</td></tr><tr><td>Menultem</td><td>菜单项组件</td></tr><tr><td>CheckboxMenuItem</td><td>复选框菜单项组件</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph TB<br>A(MenuComponent)--&gt;B(MenuItem)<br>A--&gt;C(MenuBar)<br>B--&gt;D(CheckBoxMenuItem)<br>B--&gt;E(Menu)<br>C--&gt;I[接口: MenuContainer]<br>E--&gt;F(PopupMenu)<br></code></pre></td></tr></table></figure><p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220516100245252.png" alt="image-20220516100245252"></p><p>Menu 存放 MenuItem，但因为菜单也可以作为菜单项，如上文中的格式是一个菜单，也是编辑菜单中的菜单项。所以 Menu 是 MenuItem 的子类。</p><h2 id="开发逻辑"><a href="#开发逻辑" class="headerlink" title="开发逻辑"></a>开发逻辑</h2><ol><li>准备好菜单项组件</li><li>准备菜单组件 Menu 或 PopupMenu（右键弹出子菜单），添加菜单项组件</li><li>准备菜单条组件，把菜单组件添加进来（frame.addMenuBar(mb);）</li><li>把菜单条组件添加到窗口中</li></ol><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><p>菜单项之间的分割线：<code>Menu.add(new MenuItem(&quot;-&quot;))</code>。</p><p>给某个菜单项关联快捷键功能：<code>new MenuItem(&quot;菜单项名字&quot;,new MenuShortcut(KeyEvent.VK_Q,true))</code>KeyEvent.VK_Q表示 Ctrl + Q，后面加 true 就是 Ctrl+Shift+Q。</p><h2 id="PopupMenu"><a href="#PopupMenu" class="headerlink" title="PopupMenu"></a>PopupMenu</h2><p>右键出现菜单。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PopupMenuTry</span> &#123;<br>    TextArea ta=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextArea</span>(<span class="hljs-number">6</span>,<span class="hljs-number">40</span>);<br>    Frame f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>();<br>    PopupMenu pm=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PopupMenu</span>();<br>    MenuItem mi1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;注释&quot;</span>);<br>    MenuItem mi2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;取消注释&quot;</span>);<br>    MenuItem mi3=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;复制&quot;</span>);<br>    MenuItem mi4=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;保存&quot;</span>);<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        pm.add(mi1);<br>        pm.add(mi2);<br>        pm.add(mi3);<br>        pm.add(mi4);<br>        ta.add(pm);<span class="hljs-comment">//PopupMenu 添加到要右键的组件中</span><br>        f.add(ta);<br>        f.pack();<br>        f.setVisible(<span class="hljs-literal">true</span>);<br>        ta.addMouseListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MouseAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseReleased</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>                <span class="hljs-keyword">if</span>(e.isPopupTrigger())&#123;<span class="hljs-comment">//如果为 true，证明是右键；否则是左键</span><br>                    pm.show(ta,e.getX(),e.getY());<span class="hljs-comment">//三个参数分别是父组件、菜单出现的横纵坐标，用 getXY() 获取当前位置</span><br>                &#125;<br>            &#125;<br>        &#125;);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">PopupMenuTry</span>().init();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h1><p>其实之前学习的各种组件，展现效果不同，都是用 awt 的绘图功能绘制的。</p><p>Graphics 对象进行绘图，在Component类中，又提供了下列三个方法来完成组件图形的绘制与刷新：</p><p>​    paint(Graphics g):绘制组件的外观；</p><p>​    update(Graphics g):内部调用paint方法，刷新组件外观；</p><p>​    repaint():调用update方法，刷新组件外观；</p><p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220516164730275.png" alt="image-20220516164730275"></p><p>paint() 方法系统自动调用，程序员只需要调用 repaint() 完成。</p><p>如果想重写按钮的默认样式，绘制属于自己的图像，需要重写 paint() 中的方法。</p><h2 id="Graphics"><a href="#Graphics" class="headerlink" title="Graphics"></a>Graphics</h2><p>画画需要画布、画笔、以及不同颜色的颜料。</p><p>Canvas 类是画布，Graphics 是画笔，其中的 setColor() 方法设置颜色。</p><h3 id="画图步骤"><a href="#画图步骤" class="headerlink" title="画图步骤"></a>画图步骤</h3><ol><li><p>自定义类继承 Graphics 类，重写 paint() 方法；</p></li><li><p>在 paint() 方法内部，开始绘制之前先设置好颜色、字体等属性，setColor() setFont()。</p></li><li><p>调用 drawXxx() 方法开始绘画。</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>setColor(Color c)</td><td>设置颜色</td></tr><tr><td>setFont(Font font)</td><td>设置字体</td></tr><tr><td>drawLine()</td><td>绘制直线</td></tr><tr><td>drawRect()</td><td>绘制矩形</td></tr><tr><td>drawRoundRect()</td><td>绘制圆角矩形</td></tr><tr><td>drawOval()</td><td>绘制椭圆形</td></tr><tr><td>drawPolygon()</td><td>绘制多边形</td></tr><tr><td>drawArc()</td><td>绘制圆弧</td></tr><tr><td>drawPolyline()</td><td>绘制折线</td></tr><tr><td>fillRect()</td><td>填充矩形区域</td></tr><tr><td>fillRoundRect()</td><td>填充圆角矩形区域</td></tr><tr><td>fillOval()</td><td>填充椭圆区域</td></tr><tr><td>fillPolygon()</td><td>填充多边形区域</td></tr><tr><td>fillArc()</td><td>填充圆弧对应的扇形区域</td></tr><tr><td>drawImage()</td><td>绘制位图</td></tr></tbody></table></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">GraphicsTry</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String OVAL_SHAPE=<span class="hljs-string">&quot;oval&quot;</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String RECT_SHAPE=<span class="hljs-string">&quot;rect&quot;</span>;<br>    <span class="hljs-keyword">private</span> String SHAPE=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">private</span> Frame f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>();<br>    <span class="hljs-keyword">private</span> Button btOval=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;绘制椭圆&quot;</span>);<br>    <span class="hljs-keyword">private</span> Button btRect=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;绘制矩形&quot;</span>);<br>    <span class="hljs-keyword">private</span> Panel p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>();<br>    <span class="hljs-keyword">private</span> MyCanvas mc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCanvas</span>();<span class="hljs-comment">//列出组件，全部是 private 的。 MyCanvas 是继承 Canvas 的类，可以重写 paint() 方法。</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//按钮点击绑定事件</span><br>        btOval.addMouseListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MouseAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseReleased</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>                SHAPE=OVAL_SHAPE;<span class="hljs-comment">//以此判断要绘制的图形是椭圆还是矩形</span><br>                mc.repaint();<br>            &#125;<br>        &#125;);<br>        btRect.addMouseListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MouseAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseReleased</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>                SHAPE=RECT_SHAPE;<br>                mc.repaint();<br>            &#125;<br>        &#125;);<br>        mc.setPreferredSize(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(<span class="hljs-number">300</span>,<span class="hljs-number">200</span>));<span class="hljs-comment">//设置画布大小</span><br>        <span class="hljs-comment">//组装组件</span><br>        p.add(btOval);<br>        p.add(btRect,BorderLayout.EAST);<br>        f.add(mc,BorderLayout.NORTH);<br>        f.add(p);<br>        f.pack();<br>        f.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">GraphicsTry</span>().init();<span class="hljs-comment">//调用 init() 方法</span><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCanvas</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Canvas</span>&#123;<span class="hljs-comment">//重写绘制椭圆和矩形的 paint() 方法</span><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span>&#123;<br>            <span class="hljs-keyword">if</span>(SHAPE.equals(<span class="hljs-string">&quot;oval&quot;</span>))&#123;<br>                g.setColor(Color.RED);<br>                g.drawOval(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>);<br>            &#125;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(SHAPE.equals(<span class="hljs-string">&quot;rect&quot;</span>))&#123;<br>                g.setColor(Color.RED);<br>                g.drawRect(<span class="hljs-number">100</span>,<span class="hljs-number">100</span>,<span class="hljs-number">20</span>,<span class="hljs-number">10</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;菜单组件&quot;&gt;&lt;a href=&quot;#菜单组件&quot; class=&quot;headerlink&quot; title=&quot;菜单组件&quot;&gt;&lt;/a&gt;菜单组件&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;菜单组件名称&lt;/th&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94GUI_2/"/>
    <id>http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94GUI_2/</id>
    <published>2022-06-29T02:49:50.601Z</published>
    <updated>2022-05-16T01:31:29.574Z</updated>
    
    <content type="html"><![CDATA[<h1 id="AWT-常用组件"><a href="#AWT-常用组件" class="headerlink" title="AWT 常用组件"></a>AWT 常用组件</h1><p>Button</p><p>Canvas：用于绘图的画布</p><p>Checkbox，CheckboxGroup：单选框</p><p>Choice：下拉选择框（选择条目通过 add() 添加）</p><p>Frame：窗口</p><p>Label：标签</p><p>List：列表框组件，可以添加多条项目。（项目通过 add() 添加）</p><p>Panel：容器</p><p>ScrollBar：滚动条</p><p>ScrollPane：带滚动条的容器组件</p><p>TextArea：多行文本域</p><p>TextField：单行文本框</p><h1 id="开发逻辑"><a href="#开发逻辑" class="headerlink" title="开发逻辑"></a>开发逻辑</h1><p>所有组件在成员变量处定义，在方法中组装界面，在 main 方法中调用方法。</p><p>布局：从整体到局部。</p><p>写代码时：由局部到整体。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ComponentTry</span> &#123;<br>    Frame f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>();<br>    TextArea ta=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextArea</span>(<span class="hljs-number">5</span>,<span class="hljs-number">20</span>);<br>    Choice colorChooser=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Choice</span>();<br>    CheckboxGroup cbg=<span class="hljs-keyword">new</span> <span class="hljs-title class_">CheckboxGroup</span>();<br>    Checkbox male=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Checkbox</span>(<span class="hljs-string">&quot;男&quot;</span>,cbg,<span class="hljs-literal">true</span>);<br>    Checkbox female=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Checkbox</span>(<span class="hljs-string">&quot;女&quot;</span>,cbg,<span class="hljs-literal">false</span>);<br>    Checkbox isMarried=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Checkbox</span>(<span class="hljs-string">&quot;是否已婚？&quot;</span>);<br>    TextField tf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextField</span>(<span class="hljs-number">30</span>);<br>    Button ok=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;确认&quot;</span>);<br>    List colorList=<span class="hljs-keyword">new</span> <span class="hljs-title class_">List</span>(<span class="hljs-number">6</span>,<span class="hljs-literal">true</span>);<span class="hljs-comment">//支持多选</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Box</span> <span class="hljs-variable">bBox</span> <span class="hljs-operator">=</span> Box.createHorizontalBox();<br>        bBox.add(tf);<br>        bBox.add(ok);<br>        f.add(bBox,BorderLayout.SOUTH);<br>        colorChooser.add(<span class="hljs-string">&quot;红色&quot;</span>);<br>        colorChooser.add(<span class="hljs-string">&quot;蓝色&quot;</span>);<br>        colorChooser.add(<span class="hljs-string">&quot;绿色&quot;</span>);<br>        Box cBox=Box.createHorizontalBox();<br>        cBox.add(colorChooser);<br>        cBox.add(male);<br>        cBox.add(female);<br>        cBox.add(isMarried);<br>        Box topLeft=Box.createVerticalBox();<br>        topLeft.add(ta);<br>        topLeft.add(cBox);<br>        colorList.add(<span class="hljs-string">&quot;红色&quot;</span>);<br>        colorList.add(<span class="hljs-string">&quot;绿色&quot;</span>);<br>        colorList.add(<span class="hljs-string">&quot;蓝色&quot;</span>);<br>        Box top=Box.createHorizontalBox();<br>        top.add(topLeft);<br>        top.add(colorList);<br>        f.add(top);<br>        f.pack();<br>        f.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComponentTry</span>().init();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Dialog"><a href="#Dialog" class="headerlink" title="Dialog"></a>Dialog</h1><p>Dialog 是 Window 类的子类，是 一个容器类，属于特殊组件 。 对话框是可以独立存在的顶级窗口， 因此用法与普通窗口的用法几乎完全一样，但是使用对话框需要注意下面两点：</p><ul><li>对话框通常依赖于其他窗口，就是通常需要有一个父窗口；</li><li>对话框有非模式(non-modal)和模式(modal)两种，当某个模式对话框被打开后，该模式对话框总是位于它的父窗口之上，在模式对话框被关闭之前，父窗口无法获得焦点。</li></ul><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>Dialog(Frame owner, String title, boolean modal)</td><td>创建一个对话框对象：<br/>owner:当前对话框的父窗口<br/>title:当前对话框的标题<br/>modal：当前对话框是否是模式对话框，true/false</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Frame</span> <span class="hljs-variable">frame</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;这里测试Dialog&quot;</span>);<br><br><span class="hljs-type">Dialog</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dialog</span>(frame, <span class="hljs-string">&quot;模式对话框&quot;</span>, <span class="hljs-literal">true</span>);<br><br><span class="hljs-comment">//往对话框中添加内容</span><br><span class="hljs-type">Box</span> <span class="hljs-variable">vBox</span> <span class="hljs-operator">=</span> Box.createVerticalBox();<br><br>vBox.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextField</span>(<span class="hljs-number">15</span>));<br>vBox.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;确认&quot;</span>));<br>d1.add(vBox);<br><br><span class="hljs-type">Button</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;打开模式对话框&quot;</span>);<br><br><span class="hljs-comment">//设置对话框的大小和位置</span><br>d1.setBounds(<span class="hljs-number">20</span>,<span class="hljs-number">30</span>,<span class="hljs-number">200</span>,<span class="hljs-number">100</span>);<br><br><br><span class="hljs-comment">//给b1绑定监听事件</span><br>b1.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>        d1.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>&#125;);<br><br><br><span class="hljs-comment">//把按钮添加到frame中</span><br>frame.add(b1);<br><br><span class="hljs-comment">//设置frame最佳大小并可见</span><br>frame.pack();<br>frame.setVisible(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220514191933447.png" alt="image-20220514191933447"></p><h2 id="FileDialog"><a href="#FileDialog" class="headerlink" title="FileDialog"></a>FileDialog</h2><p>Dialog 的一个子类，可以进行文件操作。</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>FileDialog(Frame parent, String title, int mode)</td><td>创建一个文件对话框：<br/>parent:指定父窗口<br/>title:对话框标题<br/>mode:文件对话框类型，<strong>如果指定为FileDialog.load，用于打开文件，如果指定为FileDialog.SAVE,用于保存文件</strong></td></tr><tr><td>String getDirectory()</td><td>获取被打开或保存文件的绝对路径</td></tr><tr><td>String getFile()</td><td>获取被打开或保存文件的文件名</td></tr></tbody></table><p>Frame frame = new Frame(“这里测试FileDialog”);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileDialog</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileDialog</span>(frame, <span class="hljs-string">&quot;选择需要加载的文件&quot;</span>, FileDialog.LOAD);<br><span class="hljs-type">FileDialog</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileDialog</span>(frame, <span class="hljs-string">&quot;选择需要保存的文件&quot;</span>, FileDialog.SAVE);<br><br><span class="hljs-type">Button</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;打开文件&quot;</span>);<br><span class="hljs-type">Button</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;保存文件&quot;</span>);<br><br><span class="hljs-comment">//给按钮添加事件</span><br>b1.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>        d1.setVisible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//打印用户选择的文件路径和名称</span><br>        System.out.println(<span class="hljs-string">&quot;用户选择的文件路径:&quot;</span>+d1.getDirectory());<br>        System.out.println(<span class="hljs-string">&quot;用户选择的文件名称:&quot;</span>+d1.getFile());<br>    &#125;<br>&#125;);<br><br>System.out.println(<span class="hljs-string">&quot;-------------------------------&quot;</span>);<br>b2.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>        d2.setVisible(<span class="hljs-literal">true</span>);<br>        <span class="hljs-comment">//打印用户选择的文件路径和名称</span><br>        System.out.println(<span class="hljs-string">&quot;用户选择的文件路径:&quot;</span>+d2.getDirectory());<br>        System.out.println(<span class="hljs-string">&quot;用户选择的文件名称:&quot;</span>+d2.getFile());<br>    &#125;<br>&#125;);<br><br><span class="hljs-comment">//添加按钮到frame中</span><br><br>frame.add(b1);<br>frame.add(b2,BorderLayout.SOUTH);<br><br><span class="hljs-comment">//设置frame最佳大小并可见</span><br>frame.pack();<br>frame.setVisible(<span class="hljs-literal">true</span>);<br></code></pre></td></tr></table></figure><h1 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h1><p>为什么之前的窗口点击 x 号不能关闭？</p><p>窗口、组件是不自带事件处理的。</p><p>就像按钮点击触发事件，需要写一个事件监听器；x 号并没有写点击后相应的事件监听器。要添加相应的事件处理才能触发。</p><h2 id="GUI-事件处理机制"><a href="#GUI-事件处理机制" class="headerlink" title="GUI 事件处理机制"></a>GUI 事件处理机制</h2><p>当在某个组件上发生某些操作的时候，会自动的触发一段代码的执行。</p><p>**事件源(Event Source)**：操作发生的场所，通常指某个组件，例如按钮、窗口等；<br><strong>事件（Event）</strong>：在事件源上发生的操作可以叫做事件，GUI会把事件都封装到一个Event对象中，如果需要知道该事件的详细信息，就可以通过Event对象来获取。<br><strong>事件监听器(Event Listener)</strong>:当在某个事件源上发生了某个事件，事件监听器就可以对这个事件进行处理。</p><p><strong>注册监听</strong>：把某个事件监听器(A)通过某个事件(B)绑定到某个事件源(C)上，当在事件源C上发生了事件B之后，那么事件监听器A的代码就会自动执行。</p><p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220515062437913.png" alt="image-20220515062437913"></p><p>实现方式：内部类，当这个事件监听器使用次数不只一次时建议。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">Frame f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;新窗口&quot;</span>);<br>Button b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;输出&quot;</span>);<br>TextArea ta=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextArea</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    b.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyActionListener</span>());<br>    f.add(ta);<br>    f.add(b,BorderLayout.SOUTH);<br>    f.pack();<br>    f.setVisible(<span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyActionListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ActionListener</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输出！&quot;</span>);<br>        ta.setText(<span class="hljs-string">&quot;输出文本&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionTry</span>().init();<br>&#125;<br></code></pre></td></tr></table></figure><p>实现方式：匿名对象，当该事件监听器使用次数较少时建议。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">Frame f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;新窗口&quot;</span>);<br>Button b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;输出&quot;</span>);<br>TextArea ta=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextArea</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>    b.addActionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>()&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;输出！&quot;</span>);<br>        ta.setText(<span class="hljs-string">&quot;输出文本&quot;</span>);<br>    &#125;<br>    &#125;);<br>    f.add(ta);<br>    f.add(b,BorderLayout.SOUTH);<br>    f.pack();<br>    f.setVisible(<span class="hljs-literal">true</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionTry</span>().init();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="低级事件"><a href="#低级事件" class="headerlink" title="低级事件"></a>低级事件</h2><p>基于某个特定动作的事件，如鼠标点击，拖放等。</p><table><thead><tr><th>事件</th><th>触发时机</th></tr></thead><tbody><tr><td>ComponentEvent</td><td>组件事件 ， 当 组件尺寸发生变化、位置发生移动、显示/隐藏状态发生改变时触发该事件。</td></tr><tr><td>ContainerEvent</td><td>容器事件 ， 当容器里发生添加组件、删除组件时触发该事件 。</td></tr><tr><td>WindowEvent</td><td>窗口事件， 当窗 口状态发生改变 ( 如打开、关闭、最大化、最 小化)时触发该事件 。</td></tr><tr><td>FocusEvent</td><td>焦点事件 ， 当组件得到焦点或失去焦点 时触发该事件 。</td></tr><tr><td>KeyEvent</td><td>键盘事件 ， 当按键被按下、松开、单击时触发该事件。</td></tr><tr><td>MouseEvent</td><td>鼠标事件，当进行单击、按下、松开、移动鼠标等动作 时触发该事件。</td></tr><tr><td>PaintEvent</td><td>组件绘制事件 ， 该事件是一个特殊的事件类型 ， 当 GUI 组件调 用 update/paint 方法 来呈现自身时触发该事件，该事件并非专用于事件处理模型 。</td></tr></tbody></table><h2 id="高级事件"><a href="#高级事件" class="headerlink" title="高级事件"></a>高级事件</h2><p>不指向某个特定动作，而是由事件代表的含义表示。</p><table><thead><tr><th>事件</th><th>触发时机</th></tr></thead><tbody><tr><td>ActionEvent</td><td>动作事件 ，当按钮、菜单项被单击，在 TextField 中按 Enter 键时触发</td></tr><tr><td>AjustmentEvent</td><td>调节事件，在滑动条上移动滑块以调节数值时触发该事件。</td></tr><tr><td>ltemEvent</td><td>选项事件，当用户选中某项， 或取消选中某项时触发该事件 。</td></tr><tr><td>TextEvent</td><td>文本事件， 当文本框、文本域里的文本发生改变时触发该事件。</td></tr></tbody></table><h2 id="事件监听器"><a href="#事件监听器" class="headerlink" title="事件监听器"></a>事件监听器</h2><p>不同的事件需要使用不同的监听器监听，不同的监听器需要实现不同的监听器接口， 当指定事件发生后 ， 事件监听器就会调用所包含的事件处理器(实例方法)来处理事件 。</p><table><thead><tr><th>事件类别</th><th>描述信息</th><th>监听器接口名</th></tr></thead><tbody><tr><td>ActionEvent</td><td>激活组件</td><td>ActionListener</td></tr><tr><td>ItemEvent</td><td>选择了某些项目</td><td>ItemListener</td></tr><tr><td>MouseEvent</td><td>鼠标移动</td><td>MouseMotionListener</td></tr><tr><td>MouseEvent</td><td>鼠标点击等</td><td>MouseListener</td></tr><tr><td>KeyEvent</td><td>键盘输入</td><td>KeyListener</td></tr><tr><td>FocusEvent</td><td>组件收到或失去焦点</td><td>FocusListener</td></tr><tr><td>AdjustmentEvent</td><td>移动了滚动条等组件</td><td>AdjustmentListener</td></tr><tr><td>ComponentEvent</td><td>对象移动缩放显示隐藏等</td><td>ComponentListener</td></tr><tr><td>WindowEvent</td><td>窗口收到窗口级事件</td><td>WindowListener</td></tr><tr><td>ContainerEvent</td><td>容器中增加删除了组件</td><td>ContainerListener</td></tr><tr><td>TextEvent</td><td>文本字段或文本区发生改变</td><td>TextListener</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java">Frame f=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>();<br>TextField tf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextField</span>(<span class="hljs-number">30</span>);<br>Choice c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Choice</span>();<br>c.add(<span class="hljs-string">&quot;1&quot;</span>);<br>c.add(<span class="hljs-string">&quot;2&quot;</span>);<br>c.add(<span class="hljs-string">&quot;3&quot;</span>);<br>tf.addTextListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TextListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">textValueChanged</span><span class="hljs-params">(TextEvent e)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;文本内容改变&quot;</span>+tf.getText());<br>    &#125;<br>&#125;);<br>c.addItemListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ItemListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">itemStateChanged</span><span class="hljs-params">(ItemEvent e)</span> &#123;<br>        Object item=c.getSelectedItem();<br>        System.out.println(<span class="hljs-string">&quot;选择框列表改变&quot;</span>+item);<br>    &#125;<br>&#125;);<br>f.addContainerListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ContainerListener</span>() &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">componentAdded</span><span class="hljs-params">(ContainerEvent e)</span> &#123;<br>        Component child=e.getChild();<br>        System.out.println(<span class="hljs-string">&quot;新添加的组件：&quot;</span>+child);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">componentRemoved</span><span class="hljs-params">(ContainerEvent e)</span> &#123;<br><br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="点击-x-号关闭"><a href="#点击-x-号关闭" class="headerlink" title="点击 x 号关闭"></a>点击 x 号关闭</h3><p>思路：很简单，frame 绑定对应的 WindowListener 即可。</p><p>但是问题是 WindowListener 里面有很多抽象方法需要重写。windowClosing（关闭窗口时执行），windowClosed（关闭完窗口后执行），windowOpened（打开窗口后执行）……</p><p>有一种适配器模式 WindowAdapter，原理是 WindowAdapter 继承了 WindowListener 后，重写了以上所有抽象方法（只是简单的重写补全了，没有做任何操作。如 windowOpened(){} windowClosed(){} ）。然后我们可以只重写自己想要重写的方法，而不用把所有方法都重写。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">frame.addWindowListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent e)</span>&#123;<br>        System.exit(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;AWT-常用组件&quot;&gt;&lt;a href=&quot;#AWT-常用组件&quot; class=&quot;headerlink&quot; title=&quot;AWT 常用组件&quot;&gt;&lt;/a&gt;AWT 常用组件&lt;/h1&gt;&lt;p&gt;Button&lt;/p&gt;
&lt;p&gt;Canvas：用于绘图的画布&lt;/p&gt;
&lt;p&gt;Checkbox，C</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94GUI_5/"/>
    <id>http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94GUI_5/</id>
    <published>2022-06-29T02:49:50.601Z</published>
    <updated>2022-05-18T02:07:36.778Z</updated>
    
    <content type="html"><![CDATA[<h1 id="位图"><a href="#位图" class="headerlink" title="位图"></a>位图</h1><p>之前只能绘制一些简单的几何图形。Graphics 的 drawImage() 方法可以绘制位图。Image 对象代表位图。</p><p><strong>位图使用步骤：</strong></p><p>1.创建Image的子类对象 BufferedImage(int width,int height,int ImageType) ,创建时需要指定位图的宽高及类型属性；此时相当于在内存中生成了一张图片；</p><p>2.调用 BufferedImage 对象的 getGraphics() 方法获取画笔，此时就可以往内存中的这张图片上绘图了，绘图的方法和之前学习的一模一样（先绘制到内存上）；</p><p>3.调用组件的 drawImage() 方法，一次性的内存中的图片 BufferedImage 绘制到特定的组件上（内存再绘制到组件上，效率更高些）。</p><p><strong>案例：</strong></p><p>在画布上用鼠标绘制。右键可以改变红绿蓝三种颜色。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.*;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageTry</span> &#123;<br>    <span class="hljs-keyword">private</span> Frame frame=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;绘制位图&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> AREA_HEIGHT=<span class="hljs-number">500</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> AREA_WIDTH=<span class="hljs-number">400</span>;<br>    <span class="hljs-comment">//右键菜单项</span><br>    <span class="hljs-keyword">private</span> PopupMenu colorMenu=<span class="hljs-keyword">new</span> <span class="hljs-title class_">PopupMenu</span>();<br>    <span class="hljs-keyword">private</span> MenuItem redItem=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;红色&quot;</span>);<br>    <span class="hljs-keyword">private</span> MenuItem greenItem=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;绿色&quot;</span>);<br>    <span class="hljs-keyword">private</span> MenuItem blueItem=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;蓝色&quot;</span>);<br>    <span class="hljs-comment">//当前画笔颜色</span><br>    <span class="hljs-keyword">private</span> Color forceColor=Color.BLACK;<br>    <span class="hljs-comment">//上一次画笔位置</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> preX=-<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> preY=-<span class="hljs-number">1</span>;<br>    BufferedImage image=<span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedImage</span>(AREA_WIDTH,AREA_HEIGHT,BufferedImage.TYPE_INT_RGB);<br>    <span class="hljs-comment">//通过类图获取关联的 Graphics 对象</span><br>    <span class="hljs-keyword">private</span> Graphics g= image.getGraphics();<br>    <span class="hljs-comment">//画布区域。自定义一个类继承 Canvas</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCanvas</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Canvas</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span>&#123;<br>            g.drawImage(image,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br>    MyCanvas drawArea=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCanvas</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        ActionListener listener=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ActionListener</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">actionPerformed</span><span class="hljs-params">(ActionEvent e)</span> &#123;<br>                String command=e.getActionCommand();<br>                <span class="hljs-keyword">switch</span> (command)<br>                &#123;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;红色&quot;</span>:<br>                        forceColor= Color.RED;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;绿色&quot;</span>:<br>                        forceColor= Color.GREEN;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;蓝色&quot;</span>:<br>                        forceColor= Color.BLUE;<br>                        <span class="hljs-keyword">break</span>;<br>                    <span class="hljs-keyword">default</span>:<br>                        <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;;<br>        redItem.addActionListener(listener);<br>        greenItem.addActionListener(listener);<br>        blueItem.addActionListener(listener);<br><br>        colorMenu.add(redItem);<br>        colorMenu.add(greenItem);<br>        colorMenu.add(blueItem);<br>        drawArea.add(colorMenu);<br>        drawArea.addMouseListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MouseAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseReleased</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>                <span class="hljs-keyword">if</span>(e.isPopupTrigger())&#123;<br>                    colorMenu.show(drawArea,e.getX(),e.getY());<br>                &#125;<br>                preX=-<span class="hljs-number">1</span>;<br>                preY=-<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;);<br><br>        <span class="hljs-comment">//设置绘图背景为白色</span><br>        g.fillRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,AREA_WIDTH,AREA_HEIGHT);<br>        drawArea.setPreferredSize(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(AREA_WIDTH,AREA_HEIGHT));<br><br>        <span class="hljs-comment">//监听鼠标移动，绘制</span><br>        drawArea.addMouseMotionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MouseMotionAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseDragged</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>                <span class="hljs-keyword">if</span>(preX&gt;=<span class="hljs-number">0</span>&amp;&amp;preY&gt;=<span class="hljs-number">0</span>)&#123;<br>                    g.setColor(forceColor);<br>                    g.drawLine(preX,preY,e.getX(),e.getY());<br>                &#125;<br>                preX=e.getX();<br>                preY=e.getY();<br>                drawArea.repaint();<br>            &#125;<br>        &#125;);<br><br><br><br>        frame.add(drawArea);<br><br>        frame.addWindowListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br><br>        frame.pack();<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageTry</span>().init();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="ImageIO"><a href="#ImageIO" class="headerlink" title="ImageIO"></a>ImageIO</h1><p>位图的读写，非常常用。</p><p>实际生活中，很多软件都支持打开本地磁盘已经存在的图片，进行编辑，然后重新保存到本地磁盘。</p><table><thead><tr><th>方法名称</th><th>方法功能</th></tr></thead><tbody><tr><td>static BufferedImage read(File input)</td><td>读取本地磁盘图片文件</td></tr><tr><td>static BufferedImage read(InputStream input)</td><td>读取本地磁盘图片文件</td></tr><tr><td>static boolean write(RenderedImage im, String formatName, File output)</td><td>往本地磁盘中输出图片文件</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ImageIOTry</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Frame frame=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>(<span class="hljs-string">&quot;查看图片&quot;</span>);<br><br>    <span class="hljs-keyword">private</span> BufferedImage image;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCanvas</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Canvas</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>            <span class="hljs-keyword">if</span>(image!=<span class="hljs-literal">null</span>)<br>                g.drawImage(image,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,image.getWidth(),image.getHeight(),<span class="hljs-literal">null</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> MyCanvas drawArea=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCanvas</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        MenuBar menubar=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuBar</span>();<br>        Menu menu=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Menu</span>(<span class="hljs-string">&quot;文件&quot;</span>);<br>        MenuItem mi1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;打开&quot;</span>);<br>        MenuItem mi2=<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;保存&quot;</span>);<br>        <span class="hljs-comment">//打开一个文件对话框。gdk 9支持λ表达式,也可以这样写</span><br>        mi1.addActionListener(e -&gt; &#123;<br>            FileDialog fileDialog=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileDialog</span>(frame,<span class="hljs-string">&quot;打开图片&quot;</span>);<br>            fileDialog.setVisible(<span class="hljs-literal">true</span>);<br>            String dir= fileDialog.getDirectory();<br>            System.out.println(dir);<br>            String file=fileDialog.getFile();<br>            <span class="hljs-keyword">try</span> &#123;<br>                image=ImageIO.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir,file));<span class="hljs-comment">//输出图片</span><br>                drawArea.repaint();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>                ex.printStackTrace();<br>            &#125;<br>        &#125;);<br>        mi2.addActionListener(e -&gt; &#123;<br>            FileDialog fileDialog=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileDialog</span>(frame,<span class="hljs-string">&quot;保存图片&quot;</span>,FileDialog.SAVE);<br>            fileDialog.setVisible(<span class="hljs-literal">true</span>);<br>            String dir= fileDialog.getDirectory();<br>            String file=fileDialog.getFile();<br>            <span class="hljs-keyword">try</span> &#123;<br>                ImageIO.write(image,<span class="hljs-string">&quot;JPEG&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dir,file));<br>                drawArea.repaint();<br>            &#125; <span class="hljs-keyword">catch</span> (IOException ex) &#123;<br>                ex.printStackTrace();<br>            &#125;<br>        &#125;);<br>        menu.add(mi1);<br>        menu.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MenuItem</span>(<span class="hljs-string">&quot;-&quot;</span>));<br>        menu.add(mi2);<br>        menubar.add(menu);<br>        frame.addWindowListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">WindowAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">windowClosing</span><span class="hljs-params">(WindowEvent e)</span> &#123;<br>                System.exit(<span class="hljs-number">0</span>);<br>            &#125;<br>        &#125;);<br>        frame.setMenuBar(menubar);<br>        frame.add(drawArea);<br>        frame.setBounds(<span class="hljs-number">200</span>,<span class="hljs-number">200</span>,<span class="hljs-number">400</span>,<span class="hljs-number">500</span>);<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIOTry</span>().init();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;位图&quot;&gt;&lt;a href=&quot;#位图&quot; class=&quot;headerlink&quot; title=&quot;位图&quot;&gt;&lt;/a&gt;位图&lt;/h1&gt;&lt;p&gt;之前只能绘制一些简单的几何图形。Graphics 的 drawImage() 方法可以绘制位图。Image 对象代表位图。&lt;/p&gt;
&lt;p&gt;&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94GUI_6%20%E4%BA%94%E5%AD%90%E6%A3%8B%E6%B8%B8%E6%88%8F%EF%BC%88%E4%B8%8D%E8%83%BD%E5%88%A4%E6%96%AD%E8%BE%93%E8%B5%A2%EF%BC%89/"/>
    <id>http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94GUI_6%20%E4%BA%94%E5%AD%90%E6%A3%8B%E6%B8%B8%E6%88%8F%EF%BC%88%E4%B8%8D%E8%83%BD%E5%88%A4%E6%96%AD%E8%BE%93%E8%B5%A2%EF%BC%89/</id>
    <published>2022-06-29T02:49:50.601Z</published>
    <updated>2022-05-18T05:07:28.434Z</updated>
    
    <content type="html"><![CDATA[<p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220518101108824.png" alt="image-20220518101108824"></p><p>鼠标在棋盘上移动时，会显示当前位置放置棋子，会落到的位置，即红框部分。</p><p>点击白棋、黑棋切换棋子，点击删除后点击棋子删除。不能判断输赢。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> javax.imageio.ImageIO;<br><span class="hljs-keyword">import</span> java.awt.*;<br><span class="hljs-keyword">import</span> java.awt.event.MouseAdapter;<br><span class="hljs-keyword">import</span> java.awt.event.MouseEvent;<br><span class="hljs-keyword">import</span> java.awt.event.MouseMotionAdapter;<br><span class="hljs-keyword">import</span> java.awt.image.BufferedImage;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Gobang</span> &#123;<br>    <span class="hljs-keyword">private</span> Frame frame=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Frame</span>();<br>    <span class="hljs-comment">//声明四个 BufferedImage 对象，记录四张图片</span><br>    <span class="hljs-keyword">private</span> BufferedImage table;<br>    <span class="hljs-keyword">private</span> BufferedImage blackChess;<br>    <span class="hljs-keyword">private</span> BufferedImage whiteChess;<br>    <span class="hljs-keyword">private</span> BufferedImage selected;<br><br><br>    <span class="hljs-comment">//宽高必须和图片一样</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> TABLE_WIDTH=<span class="hljs-number">535</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> TABLE_HEIGHT=<span class="hljs-number">536</span>;<br>    <span class="hljs-comment">//横向纵向可以下多少子？</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> BOARD_SIZE=<span class="hljs-number">15</span>;<br>    <span class="hljs-comment">//每个棋子占用棋盘的比例</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> RATE=TABLE_WIDTH/BOARD_SIZE;<br>    <span class="hljs-comment">//声明变量，记录棋子对于 x y 方向上的偏移量</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> X_OFFSET=<span class="hljs-number">5</span>;<br>    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> Y_OFFSET=<span class="hljs-number">6</span>;<br>    <span class="hljs-comment">//二维数组记录棋子，如果值为0：没棋子；1：白棋；2：黑棋；</span><br>    <span class="hljs-type">int</span>[][] board=<span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[BOARD_SIZE][BOARD_SIZE];<br>    <span class="hljs-comment">//声明红色选择框的坐标，就是二维数组中的索引</span><br>    <span class="hljs-type">int</span> selected_X=-<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> selected_Y=-<span class="hljs-number">1</span>;<br>    <span class="hljs-comment">//自定义类继承 Canvas</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ChessBoard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Canvas</span>&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">paint</span><span class="hljs-params">(Graphics g)</span> &#123;<br>            <span class="hljs-comment">//绘图</span><br>            <span class="hljs-comment">//绘制棋盘</span><br>            g.drawImage(table,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">//绘制选择框</span><br>            <span class="hljs-keyword">if</span>(selected_X&gt;=<span class="hljs-number">0</span>&amp;&amp;selected_Y&gt;=<span class="hljs-number">0</span>&amp;&amp;selected_X&lt;<span class="hljs-number">15</span>&amp;&amp;selected_Y&lt;<span class="hljs-number">15</span>)g.drawImage(selected,selected_X*RATE+X_OFFSET,selected_Y*RATE+Y_OFFSET,<span class="hljs-literal">null</span>);<br>            <span class="hljs-comment">//绘制棋子</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;BOARD_SIZE;i++)<br>            &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;BOARD_SIZE;j++)&#123;<br>                    <span class="hljs-keyword">if</span>(board[i][j]==<span class="hljs-number">0</span>)<span class="hljs-keyword">continue</span>;<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(board[i][j]==<span class="hljs-number">1</span>)g.drawImage(whiteChess,i*RATE+X_OFFSET,j*RATE+Y_OFFSET,<span class="hljs-literal">null</span>);<br>                    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(board[i][j]==<span class="hljs-number">2</span>)g.drawImage(blackChess,i*RATE+X_OFFSET,j*RATE+Y_OFFSET,<span class="hljs-literal">null</span>);<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>    ChessBoard chessBoard=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ChessBoard</span>();<br>    <span class="hljs-comment">//声明变量记录当前下棋的颜色，初始黑棋</span><br>    <span class="hljs-type">int</span> board_type=<span class="hljs-number">2</span>;<br>    <span class="hljs-comment">//声明底部用到的组件</span><br>    Panel p=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Panel</span>();<br>    Button whiteBtn=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;白棋&quot;</span>);<br>    Button blackBtn=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;黑棋&quot;</span>);<br>    Button deleteBtn=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Button</span>(<span class="hljs-string">&quot;删除&quot;</span>);<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">refreshBtnColor</span><span class="hljs-params">(Color whiteBtnColor, Color blackBtnColor, Color deleteBtnColor)</span>&#123;<br>        <span class="hljs-comment">//设置按钮颜色的方法：</span><br>        whiteBtn.setBackground(whiteBtnColor);<br>        blackBtn.setBackground(blackBtnColor);<br>        deleteBtn.setBackground(deleteBtnColor);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span>&#123;<br>        chessBoard.setPreferredSize(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dimension</span>(TABLE_WIDTH,TABLE_HEIGHT));<br>        frame.add(chessBoard);<br>        whiteBtn.addActionListener(e -&gt;&#123;<br>            <span class="hljs-comment">//刷新要下的棋子标志为1</span><br>            board_type=<span class="hljs-number">1</span>;<br>            <span class="hljs-comment">//刷新按钮颜色，点击后按钮颜色会改变</span><br>            refreshBtnColor(Color.GREEN,Color.GRAY,Color.GRAY);<br>        &#125;);<br>        blackBtn.addActionListener(e -&gt;&#123;<br>            <span class="hljs-comment">//刷新要下的棋子标志为1</span><br>            board_type=<span class="hljs-number">2</span>;<br>            <span class="hljs-comment">//刷新按钮颜色，点击后按钮颜色会改变</span><br>            refreshBtnColor(Color.GRAY,Color.GREEN,Color.GRAY);<br>        &#125;);<br>        deleteBtn.addActionListener(e -&gt;&#123;<br>            <span class="hljs-comment">//刷新要下的棋子标志为1</span><br>            board_type=<span class="hljs-number">0</span>;<br>            <span class="hljs-comment">//刷新按钮颜色，点击后按钮颜色会改变</span><br>            refreshBtnColor(Color.GRAY,Color.GRAY,Color.GREEN);<br>        &#125;);<br>        p.add(whiteBtn);<br>        p.add(blackBtn);<br>        p.add(deleteBtn);<br>        frame.add(p,BorderLayout.SOUTH);<br>        chessBoard.addMouseMotionListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MouseMotionAdapter</span>()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseMoved</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>                <span class="hljs-comment">//鼠标移动时会调用</span><br>                selected_X=(e.getX()-X_OFFSET)/RATE;<br>                selected_Y=(e.getY()-Y_OFFSET)/RATE;<br>                chessBoard.repaint();<br>            &#125;<br>        &#125;);<br>        chessBoard.addMouseListener(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MouseAdapter</span>() &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseClicked</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>                <span class="hljs-type">int</span> xPos=(e.getX()-X_OFFSET)/RATE;<br>                <span class="hljs-type">int</span> yPos=(e.getY()-Y_OFFSET)/RATE;<br>                <span class="hljs-keyword">if</span>(xPos&lt;BOARD_SIZE&amp;&amp;yPos&lt;BOARD_SIZE)board[xPos][yPos]=board_type;<br>                chessBoard.repaint();<br>            &#125;<br><br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mouseExited</span><span class="hljs-params">(MouseEvent e)</span> &#123;<br>                selected_X=-<span class="hljs-number">1</span>;<br>                selected_Y=-<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;);<br>        <span class="hljs-keyword">try</span> &#123;<br>            table=ImageIO.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\86138\\Documents\\ithema\\java\\代码\\awt编程代码\\awt\\img\\board.jpg&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            whiteChess=ImageIO.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\86138\\Documents\\ithema\\java\\代码\\awt编程代码\\awt\\img\\white.gif&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            blackChess=ImageIO.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\86138\\Documents\\ithema\\java\\代码\\awt编程代码\\awt\\img\\black.gif&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            selected=ImageIO.read(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\86138\\Documents\\ithema\\java\\代码\\awt编程代码\\awt\\img\\selected.gif&quot;</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>        frame.pack();<br>        frame.setVisible(<span class="hljs-literal">true</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gobang</span>().init();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\86138\Desktop\sa3yy-b9n46.gif" alt="image preview"></p><p>但是运行时因为不停地重绘，画面一直在闪。因为这种绘制方法没有用到缓冲区，每次都是直接绘制在组件上的。</p><p>只要把 Frame 改成 JFrame，Canvas 改成 JPanel 即可。下节课开始详细介绍 swing.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220518101108824.png&quot; alt=&quot;image-20220518101108824&quot;&gt;&lt;/p&gt;
&lt;p&gt;鼠标在</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94GUI_7/"/>
    <id>http://example.com/2022/06/29/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94GUI_7/</id>
    <published>2022-06-29T02:49:50.601Z</published>
    <updated>2022-05-20T18:54:22.655Z</updated>
    
    <content type="html"><![CDATA[<p>实际使用 Java 开发图形界面程序时 ，很少使用 AWT 组件，绝大部分时候都是用 Swing 组件开发的 。 </p><p>Swing是<strong>由100%纯 Java实现的，不再依赖于本地平台的 GUI</strong>， 因此可以在所有平台上都保持相同的界面外观。</p><p>独立于本地平台的Swing组件被称为<strong>轻量级组件</strong>;而依赖于本地平台的 AWT 组件被称为<strong>重量级组件</strong>。</p><p><em>由于 Swing 的所有组件完全采用 Java 实现，不再调用本地平台的 GUI，所以导致 Swing 图形界面的显示速度要比 AWT 图形界面的显示速度慢一些，但相对于快速发展的硬件设施而言，这种微小的速度差别无妨大碍。</em></p><p>Swing 组件不再依赖于本地平台的 GUI，无须采用各种平台的 GUI 交集 ，因此 Swing 提供了大量图形界面组件 ， 远远超出了 AWT 所提供的图形界面组件集。用户也可以选择自己喜欢的样式。</p><p>Swing 组件采用 MVC(Model-View-Controller， 即模型一视图一控制器)设计模式.</p><pre><code>模型(Model): 用于维护组件的各种状态；视图(View): 是组件的可视化表现；控制器(Controller):用于控制对于各种事件、组件做出响应 。当模型发生改变时，它会通知所有依赖它的视图，视图会根据模型数据来更新自己。Swing使用UI代理来包装视图和控制器， 还有一个模型对象来维护该组件的状态。例如，按钮JButton有一个维护其状态信息的模型ButtonModel对象 。 Swing组件的模型是自动设置的，因此一般都使用JButton，而无须关心ButtonModel对象。</code></pre><p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220518132257874.png" alt="image-20220518132257874"></p><p><strong>Swing组件和AWT组件的对应关系：</strong></p><p>​    大部分情况下，只需要在AWT组件的名称前面加个J，就可以得到其对应的Swing组件名称，但有几个例外：</p><p>​        1. JComboBox: 对应于 AWT 里的 Choice 组件，但比 Choice 组件功能更丰富 。<br>​        2. JFileChooser: 对应于 AWT 里的 FileDialog 组件 。<br>​        3. JScrollBar: 对应于 AWT 里的 Scrollbar 组件，注意两个组件类名中 b 字母的大小写差别。<br>​        4. JCheckBox : 对应于 AWT 里的 Checkbox 组件， 注意两个组件类名中 b 字母的大小 写差别 。<br>​        5. JCheckBoxMenultem: 对应于 AWT 里的 CheckboxMenuItem 组件，注意两个组件类名中 b字母的大小写差别。</p><p><strong>Swing组件按照功能来分类：</strong></p><pre><code>1. 顶层容器: JFrame、JApplet、JDialog 和 JWindow 。2. 中间容器: JPanel 、 JScrollPane 、 JSplitPane 、 JToolBar 等 。3. 特殊容器:在用户界面上具有特殊作用的中间容器，如 JIntemalFrame 、 JRootPane 、 JLayeredPane和 JDestopPane 等 。4. 基本组件 : 实现人机交互的组件，如 JButton、 JComboBox 、 JList、 JMenu、 JSlider 等 。5. 不可编辑信息的显示组件:向用户显示不可编辑信息的组件，如JLabel 、 JProgressBar 和 JToolTip等。6. 可编辑信息的显示组件:向用户显示能被编辑的格式化信息的组件，如 JTable 、 JTextArea 和JTextField 等 。7. 特殊对话框组件:可以直接产生特殊对话框的组件 ， 如 JColorChooser 和 JFileChooser 等。</code></pre><h1 id="AWT组件的Swing实现"><a href="#AWT组件的Swing实现" class="headerlink" title="AWT组件的Swing实现"></a>AWT组件的Swing实现</h1><p>​    Swing 为除 Canvas 之外的所有 AWT 组件提供了相应的实现，Swing 组件比 AWT 组件的功能更加强大。相对于 AWT 组件， Swing 组件具有如下 4 个额外的功能 :</p><ol><li>可以为 Swing 组件设置提示信息。使用 setToolTipText()方法，为组件设置对用户有帮助的提示信息 。</li><li>很多 Swing 组件如按钮、标签、菜单项等，除使用文字外，还可以使用图标修饰自己。为了允许在 Swing 组件中使用图标， Swing为Icon 接口提供了 一个实现类: Imagelcon ，该实现类代表一个图像图标。</li><li>支持插拔式的外观风格。每个 JComponent 对象都有一个相应的 ComponentUI 对象，为它完成所有的绘画、事件处理、决定尺寸大小等工作。 ComponentUI 对象依赖当前使用的 PLAF ， 使用 UIManager.setLookAndFeel()方法可以改变图形界面的外观风格 。</li><li>支持设置边框。Swing 组件可以设置一个或多个边框。 Swing 中提供了各式各样的边框供用户边 用，也能建立组合边框或自己设计边框。 一种空白边框可以用于增大组件，同时协助布局管理器对容器中的组件进行合理的布局。</li></ol><p>每个 Swing 组件都有一个对应的UI 类，可以切换其外观。例如 JButton组件就有一个对应的 ButtonUI 类来作为UI代理 。每个 Swing组件的UI代理的类名总是将该 Swing 组件类名的 J 去掉，然后在后面添加 UI 后缀 。 </p><p>对于 awt 中的一些监听事件，swing 会有更简便的解决方法。</p><p>右键菜单：<code>f.setComponentPopupMenu(自己定义的右键菜单)</code></p><p>关闭窗口：</p><p><code>f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE)</code></p><p>更改样式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">changeFlavor</span><span class="hljs-params">(String command)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>       <span class="hljs-keyword">switch</span> (command)&#123;<br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Metal 风格&quot;</span>:<br>               UIManager.setLookAndFeel(<span class="hljs-string">&quot;javax.swing.plaf.metal.MetalLookAndFeel&quot;</span>);<br>               <span class="hljs-keyword">break</span>;<br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Nimbus 风格&quot;</span>:<br>               UIManager.setLookAndFeel(<span class="hljs-string">&quot;javax.swing.plaf.nimbus.NimbusLookAndFeel&quot;</span>);<br>               <span class="hljs-keyword">break</span>;<br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Windows 风格&quot;</span>:<br>               UIManager.setLookAndFeel(<span class="hljs-string">&quot;com.sun.java.swing.plaf.windows.WindowsLookAndFeel&quot;</span>);<br>               <span class="hljs-keyword">break</span>;<br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Windows 经典风格&quot;</span>:<br>               UIManager.setLookAndFeel(<span class="hljs-string">&quot;com.sun.java.swing.plaf.windows.WindowsClassicLookAndFeel&quot;</span>);<br>               <span class="hljs-keyword">break</span>;<br>           <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;Motif 风格&quot;</span>:<br>               UIManager.setLookAndFeel(<span class="hljs-string">&quot;com.sun.java.swing.plaf.motif.MotifLookAndFeel&quot;</span>);<br>               <span class="hljs-keyword">break</span>;<br>       &#125;<br><br>       <span class="hljs-comment">//更新f窗口内顶级容器以及所有组件的UI</span><br>       SwingUtilities.updateComponentTreeUI(f.getContentPane());<br>       <span class="hljs-comment">//更新mb菜单条及每部所有组件UI</span><br>       SwingUtilities.updateComponentTreeUI(mb);<br>       <span class="hljs-comment">//更新右键菜单及内部所有菜单项的UI</span><br>       SwingUtilities.updateComponentTreeUI(pop);<br>   &#125;<br></code></pre></td></tr></table></figure><h1 id="图标展示"><a href="#图标展示" class="headerlink" title="图标展示"></a>图标展示</h1><p>构造对象时，可以加一个图像参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">JButton b=<span class="hljs-keyword">new</span> <span class="hljs-title class_">JButton</span>(<span class="hljs-string">&quot;确定&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ImageIcon</span>(<span class="hljs-string">&quot;相对路径&quot;</span>));<br></code></pre></td></tr></table></figure><h1 id="组件边框"><a href="#组件边框" class="headerlink" title="组件边框"></a>组件边框</h1><p><img src="C:\Users\86138\AppData\Roaming\Typora\typora-user-images\image-20220520212709348.png" alt="image-20220520212709348"></p><p><strong>特殊的Border：</strong></p><ol><li>TitledBorder:它的作用并不是直接为其他组件添加边框，而是为其他边框设置标题，创建该类的对象时，需要传入一个其他的Border对象；</li><li>ComoundBorder:用来组合其他两个边框，创建该类的对象时，需要传入其他两个Border对象，一个作为内边框，一个座位外边框</li></ol><p><strong>给组件设置边框步骤：</strong></p><ol><li>使用BorderFactory或者XxxBorder创建Border的实例对象；</li><li>调用Swing组件的setBorder（Border b）方法为组件设置边框；</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;实际使用 Java 开发图形界面程序时 ，很少使用 AWT 组件，绝大部分时候都是用 Swing 组件开发的 。 &lt;/p&gt;
&lt;p&gt;Swing是&lt;strong&gt;由100%纯 Java实现的，不再依赖于本地平台的 GUI&lt;/strong&gt;， 因此可以在所有平台上都保持相同的界面</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>正则表达式_1</title>
    <link href="http://example.com/2022/05/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F_1/"/>
    <id>http://example.com/2022/05/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F_1/</id>
    <published>2022-05-08T16:00:00.000Z</published>
    <updated>2022-05-08T16:21:32.523Z</updated>
    
    <content type="html"><![CDATA[<p>正则表达式可以被视作是增强版的通配符，可以匹配制定规则的字符串。</p><h1 id="练习方法"><a href="#练习方法" class="headerlink" title="练习方法"></a>练习方法</h1><p>可以在编译器中自带的查找功能尝试，也可以在 <a href="https://regex101.com/">regex101.com</a> 在线测试工具中尝试。</p><h1 id="限定符-Quantifiers"><a href="#限定符-Quantifiers" class="headerlink" title="限定符 Quantifiers"></a>限定符 Quantifiers</h1><p>? 表示前面的字符需要出现0次或1次。</p><p>如：<code>used?</code> 可以匹配 use 和 used.</p><p>* 表示前面的字符需要出现0次或多次。</p><p>如：<code>ab*c</code>会匹配ac、abc、abbbc……但不能匹配到 adc。</p><p>+ 表示前面的字符需要出现1次或多次。</p><p>如上例，<code>ab+c</code>不会匹配 ac。</p><p>{数字} 表示前面的字符需要出现多少次。</p><p>如：<code>ab&#123;6&#125;c</code>表示 abbbbbbc，<code>ab&#123;2,6&#125;c</code> 表示b出现2~6次，<code>ab&#123;2,&#125;c</code>表示b出现2次以上。</p><p>() 用于限定多个字符。</p><p>如：<code>(ab)?c</code>表示c或abc。</p><h1 id="或运算-or"><a href="#或运算-or" class="headerlink" title="或运算 or"></a>或运算 or</h1><p><code>a (cat|dog)</code> 表示 a cat 或 a dog.<strong>括号不能少</strong></p><h1 id="字符类-Character-Classes"><a href="#字符类-Character-Classes" class="headerlink" title="字符类 Character Classes"></a>字符类 Character Classes</h1><p>[]+，用于匹配单词，单词的字符只能取自方括号内。</p><p>如：<code>[abc]+</code>表示只由 abc 组成的字符，<code>aabbcc</code>等。</p><p><code>[a-z]+</code>表示所有小写字母</p><p><code>[a-zA-Z]+</code>表示所有字母</p><p><code>[0-9]+</code>表示所有数字</p><p>方括号内加^表示取反，如<code>[^a-z]+</code>表示所有非小写字母的字符（甚至包括换行符）</p><h1 id="元字符-Meta-characters"><a href="#元字符-Meta-characters" class="headerlink" title="元字符 Meta-characters"></a>元字符 Meta-characters</h1><p>\d：数字字符</p><p>\D：非数字字符</p><p>\w：单词字符（英文字符、数字字符、下划线）</p><p>\W：非单词字符</p><p>\s：空白字符（Tab、空格、换行符）</p><p>\S：非空白字符</p><p>\b：单词字符的边界，相当于文本的开头或结束。</p><p>.：任意字符（不包括换行符）</p><p>^：匹配行首，如<code>^a</code>只会匹配出现在行开头的a</p><p>$：匹配行尾，如<code>a$</code>只会匹配出现在行开头的a</p><p>反斜杠用在符号前还可以做转义，如\.表示.字符。</p><h1 id="贪婪与懒惰匹配-Greedy-vs-Lazy-Match"><a href="#贪婪与懒惰匹配-Greedy-vs-Lazy-Match" class="headerlink" title="贪婪与懒惰匹配 Greedy vs Lazy Match"></a>贪婪与懒惰匹配 Greedy vs Lazy Match</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>This is a simple text<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果想匹配所有的标签，也就是匹配&lt;&gt;，中间的内容是一个或多个任意字符。</p><p><code>&lt;.+&gt;</code></p><p>但是这样匹配，会把整行都匹配起来，而不是每个标签单独匹配。这就是贪婪匹配，会尽可能多地匹配。因为.也会匹配&gt;号。</p><p><code>&lt;.+?&gt;</code></p><h1 id="例：-IP-地址"><a href="#例：-IP-地址" class="headerlink" title="例： IP 地址"></a>例： IP 地址</h1><p>IP 地址形如 192.168.0.1</p><p>由四部分数字和三个.组成，每部分数字都不能大于255.</p><p>首先表示出四部分数字+3个.的形式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">(\d+\.)&#123;3&#125;(\d+)<br></code></pre></td></tr></table></figure><p>然后再考虑处理数字大小的问题。</p><p>首先，如果百位是2，十位是5，个位只能取0-5</p><p>如果百位是2，十位是0-4，个位任意数字</p><p>如果百位是0或1，十位和个位可以是任意数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">((25[0-5]|2[0-4]\d|[01]\d\d)\.)&#123;3&#125;(25[0-5]|2[0-4]\d|[01]\d\d)<br></code></pre></td></tr></table></figure><p>然后考虑百位和十位可能不存在的问题：用?处理这两位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">((25[0-5]|2[0-4]\d|[01]?\d?\d)\.)&#123;3&#125;(25[0-5]|2[0-4]\d|[01]?\d?\d)<br></code></pre></td></tr></table></figure><p>最后首尾加一个\b限定字符边界</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">\b((25[0-5]|2[0-4]\d|[01]?\d?\d)\.)&#123;3&#125;(25[0-5]|2[0-4]\d|[01]?\d?\d)\b<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;正则表达式可以被视作是增强版的通配符，可以匹配制定规则的字符串。&lt;/p&gt;
&lt;h1 id=&quot;练习方法&quot;&gt;&lt;a href=&quot;#练习方法&quot; class=&quot;headerlink&quot; title=&quot;练习方法&quot;&gt;&lt;/a&gt;练习方法&lt;/h1&gt;&lt;p&gt;可以在编译器中自带的查找功能尝试，也可以在 </summary>
      
    
    
    
    <category term="regex" scheme="http://example.com/categories/regex/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式_2</title>
    <link href="http://example.com/2022/05/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F_2/"/>
    <id>http://example.com/2022/05/09/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F_2/</id>
    <published>2022-05-08T16:00:00.000Z</published>
    <updated>2022-05-09T10:01:17.406Z</updated>
    
    <content type="html"><![CDATA[<h1 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h1><p>() 是有分组提取功能的。如提取电话号码可以<code>/(\d&#123;4&#125;)\-(\d&#123;7&#125;)/</code>，就会把<code>1111-1111111</code>的电话号码提取为<code>1111</code>和<code>1111111</code>。</p><p>如果想使用分组的功能，但是又不想提取，就可以使用(?:)。如提取电话号码<code>/(?:\d&#123;4&#125;)\-(\d&#123;7&#125;)/</code>，就只会提取出后七位<code>1111111</code>。</p><h2 id="分组使用示例：提取日期"><a href="#分组使用示例：提取日期" class="headerlink" title="分组使用示例：提取日期"></a>分组使用示例：提取日期</h2><p>日期格式各种各样，如：</p><p>2022-05-09</p><p>2022-5-9</p><p>20220509</p><p>2022 5 9</p><p>2022.05.09</p><p>统一提取这些不同格式日期的方法：用[]处理年月日分隔处可能出现的字符。</p><p><code>(\d&#123;4&#125;)[\-\. ]?(\d&#123;1,2&#125;)[\-\. ]?(\d&#123;1,2&#125;)</code>[]里的内容表示分隔符可能是-，.，空格，还可能没有（用?处理）。</p><p>(\d{1,2})表示月日可能1位或2位。</p><h1 id="分组的回溯引用"><a href="#分组的回溯引用" class="headerlink" title="分组的回溯引用"></a>分组的回溯引用</h1><p>对于刚才分组得到的数据，可以通过反向引用来获取。</p><p>如查询 abcabc 式的数据：<code>/(abc)(\1)/</code>.</p><p>查询abcdefdefabc：<code>/(abc)(def)(\2)(\1)/</code>.</p><h1 id="先行断言"><a href="#先行断言" class="headerlink" title="先行断言"></a>先行断言</h1><p>或者叫环视、预搜索。</p><h2 id="正向先行断言"><a href="#正向先行断言" class="headerlink" title="正向先行断言"></a>正向先行断言</h2><p>(?=表达式)，指在某个位置向右看，表示所在位置右侧必须能匹配<code>表达式</code>。</p><p>如：<code>/我爱(?=你)</code>表示我爱右边必须要有你。</p><p>检验密码中必须要有大写和小写字母：</p><p><code>(?=.*?[a-z])(?=.*?[A-Z]).+</code></p><p>检验密码中必须要有大写小写字母、数字，长度还要&gt;=8：</p><p><code>(?=.*?[a-z])(?=.*?[A-Z])(?=.*?[0-9]).&#123;8,&#125;</code></p><h2 id="反向先行断言"><a href="#反向先行断言" class="headerlink" title="反向先行断言"></a>反向先行断言</h2><p>(?!表达式)，指在某个位置向右看，表示所在位置右侧必须<strong>不匹配</strong><code>表达式</code>。</p><p>如：<code>/我爱(?!你)</code>表示我爱右边必须<strong>没有</strong>你。</p><h2 id="正向后行断言"><a href="#正向后行断言" class="headerlink" title="正向后行断言"></a>正向后行断言</h2><p>(?&gt;=表达式)，从右往左看。</p><p>如：<code>(?&lt;=我)爱你</code>表示爱你左边必须有我。</p><h2 id="反向后行断言"><a href="#反向后行断言" class="headerlink" title="反向后行断言"></a>反向后行断言</h2><p>(?&gt;!表达式)</p><p>如：<code>(?&lt;!我)爱你</code>表示爱你左边必须<strong>没有</strong>我。</p><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><p>匹配质数个x。如xx，xxx，xxxxx。</p><p>首先，质数只能被1和它自身整除。所以只需要排除掉可以被2整除，被3整除，被4整除……的数即可。也就是2以上的数字要重复出现两次以上。<br>出现2以上的数字次数的x是(..+)，但是不能用(..+)+，因为+号并不保证每次括号内的字符数相同（可能是2+3+4+……）。所以要用\1反向引用(..+)，再让\1重复出现1次以上，因此(..+)\1+就是任意一个&gt;2的数* 任意一个&gt;=2的数，涵盖了所有合数。<br>最后取反，再限制一下行首行尾就能得出所有质数。<em>有一个小问题好像这样会把x也看做质数。</em></p><p>因此答案是：<code>^(?!(..+)\1+$)</code>.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;分组&quot;&gt;&lt;a href=&quot;#分组&quot; class=&quot;headerlink&quot; title=&quot;分组&quot;&gt;&lt;/a&gt;分组&lt;/h1&gt;&lt;p&gt;() 是有分组提取功能的。如提取电话号码可以&lt;code&gt;/(\d&amp;#123;4&amp;#125;)\-(\d&amp;#123;7&amp;#125;)/&lt;/co</summary>
      
    
    
    
    <category term="regex" scheme="http://example.com/categories/regex/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习博客_14 入门——集合进阶1</title>
    <link href="http://example.com/2022/05/08/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_14%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B61/"/>
    <id>http://example.com/2022/05/08/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_14%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E9%9B%86%E5%90%88%E8%BF%9B%E9%98%B61/</id>
    <published>2022-05-07T16:00:00.000Z</published>
    <updated>2022-05-08T06:03:20.506Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph LR<br>A[集合]--&gt;C[Collection]<br>A--&gt;M[Map]<br>C--&gt;L[List]<br>C--&gt;S[Set]<br>L--&gt;AL(ArrayList)<br>L--&gt;LL(LinkedList)<br>S--&gt;HS(HashSet)<br>S--&gt;TS(TreeSet)<br>M--&gt;HM(HashMap)<br></code></pre></td></tr></table></figure><p>其中方形的是接口，圆角的是实现类。</p><p>因此先学习 Collection 和 Map 接口后，只需要学习下一级的特有的部分。</p><h1 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h1><p>java.util.Collection</p><p>Collection 是单例集合的最高级接口。他表示一组对象，这些对象也被称为 Collection 的元素。</p><p>无法直接实现。可以用多态的方式实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Collection&lt;String&gt; c=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br><span class="hljs-comment">//add(E e) 方法添加元素</span><br>c.add(<span class="hljs-string">&quot;Hello&quot;</span>);<br>c.add(<span class="hljs-string">&quot;World&quot;</span>);<br>System.out.println(c);<span class="hljs-comment">//输出[&#x27;Hello&#x27;,&#x27;World&#x27;]，因为 ArrayList 中重写了 toString 方法，所以得到的不是一串地址</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean add(E e)</td><td>添加元素，永远返回 true</td></tr><tr><td>boolean remove(Object o)</td><td>从集合中移除指定的元素，成功移除返回 true</td></tr><tr><td>void clear()</td><td>清空集合中的元素</td></tr><tr><td>boolean contains(Object o)</td><td>判断集合中是否存在指定的元素</td></tr><tr><td>boolean isEmpty()</td><td>判断集合是否为空</td></tr><tr><td>int size()</td><td>集合长度</td></tr></tbody></table><p>快捷键：Alt+7，能看到类的所有信息</p><h2 id="迭代器-iterator"><a href="#迭代器-iterator" class="headerlink" title="迭代器 iterator"></a>迭代器 iterator</h2><p>java.util.Iterator</p><p>Iterator 是一个接口。使用 Iterator 迭代器遍历集合元素。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Iterator&lt;String&gt; it=c.iterator();<span class="hljs-comment">//通过集合对象中的迭代方法获取对象</span><br></code></pre></td></tr></table></figure><p>追根溯源可以得知，Collection.iterator()方法返回的是一个实现了 Iterator 接口的类：Itr.</p><p>所以实际上是通过多态的方式实例化的。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>E next()</td><td>返回下一个元素（越界访问：NoSuchElementException，被请求的元素不存在）</td></tr><tr><td>boolean hasNext()</td><td>如果存在下一个元素，返回 true</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br>    String s=it.next();<span class="hljs-comment">//这样更好一些，因为元素可能还要做其他操作</span><br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><p>it.next() 像指针一样从0开始遍历。</p><h1 id="List"><a href="#List" class="headerlink" title="List"></a>List</h1><p>java.util.List</p><p>继承自 Collection 类，可以使用其中的方法。</p><p>List 是有序、有索引的。相较于集合 Set，List 中的元素可以重复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; l=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>l.add(<span class="hljs-string">&quot;Hello&quot;</span>);<br>l.add(<span class="hljs-string">&quot;World&quot;</span>);<br>System.out.println(l);<span class="hljs-comment">//按存储的顺序输出，[&quot;Hello&quot;,&quot;World&quot;]</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>void add(int index,E element)</td><td>感觉并不用解释</td></tr><tr><td>E remove(int index)</td><td></td></tr><tr><td>E set(int index,E element)</td><td></td></tr><tr><td>E get(int index)</td><td></td></tr></tbody></table><p>越界报错 IndexOutOfException。</p><p>另一种遍历集合的方法是 for 循环。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l.size();i++)System.out.println(l.get(i));<br></code></pre></td></tr></table></figure><h2 id="并发修改异常"><a href="#并发修改异常" class="headerlink" title="并发修改异常"></a>并发修改异常</h2><p>当不允许这样的修改时，会抛出此方法。</p><p>如：在使用 iterator 遍历过程中，在集合中添加了新的元素。</p><p>iterator 调用 next() 方法时，会先调用 checkForComodification() 方法。</p><p>checkForComodification() 会检验 modCount 修改集合的次数和expectedModCount 预期修改集合的次数是否相等。</p><p>modCount 来自于 ArrayList 的父类：AbstractList，初始值为0.每次使用 add() 方法时，modCount 就会++。</p><p>expectedCount 来自于 Itr 类，且初始值为 <code>expectedCount=modCount</code>.</p><p>每次实例化一个 Iterator 类，都会调用其子类 Itr 类，使得 expectedCount 等于当前的 modCount。</p><p>然后遍历过程中每次调用 next() 方法时，都会先检查一下<code>expectedCount==modCount</code>，即集合有没有被修改。如果没有修改就可以顺利地返回下一个元素；如果有异常 checkForComodificationException，就会终止运行。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph TB<br>C[Collection]--&gt;|获取迭代对象|I[iterator]<br>C--&gt;|多态|Arr[Arraylist]<br>I--&gt;|多态|Itr[Itr]<br>I--&gt;W&#123;&quot;iterator.hasNext()==true&quot;&#125;<br>Itr--&gt;A(expectedCount=modCount)<br>W--&gt;|no|en(遍历结束)<br>W--&gt;|yes|N(&quot;iterator.next()&quot;)<br>N--&gt;cf(&quot;checkForComodification()&quot;)<br>cf--&gt;cfe&#123;&quot;expectedCount==modCount&quot;&#125;<br><br>X--&gt;W<br>cfe--&gt;|no|Y(checkForComodificationException)<br>cfe--&gt;|yes|X(&quot;集合没有被修改,继续遍历&quot;)<br></code></pre></td></tr></table></figure><p>但是通过 for 循环遍历集合，在遍历过程中对集合进行修改，不会报异常。</p><h2 id="ListInterator"><a href="#ListInterator" class="headerlink" title="ListInterator"></a>ListInterator</h2><p>通过 List 中的 listInterator() 方法得到。可以从各个方向遍历，迭代期间可以修改列表，还可以获取列表迭代器的当前位置。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>boolean hasNext()</td><td></td></tr><tr><td>E next()</td><td></td></tr><tr><td>boolean hasPrevious()</td><td>反向遍历用到</td></tr><tr><td>E previous()</td><td>反向遍历用到</td></tr><tr><td>void add(E e)</td><td>添加元素，<strong>注意是通过 listInterator 添加的，不是通过集合添加的！</strong></td></tr><tr><td></td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; l=<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>l.add(<span class="hljs-string">&quot;Hello&quot;</span>);<br>l.add(<span class="hljs-string">&quot;World&quot;</span>);<br>l.add(<span class="hljs-string">&quot;java&quot;</span>);<br>ListInterator&lt;String&gt; li=l.listInterator();<span class="hljs-comment">//实际上是 listItr 类作为 listInterator 类的子类，通过多态实现</span><br><span class="hljs-keyword">while</span>(li.hasNext())&#123;<br>    System.out.println(l.next());<br>&#125;<br><br><span class="hljs-keyword">while</span>(li.hasPrevious())&#123;<br>    System.out.println(l.previous());<br>&#125;<br><br><span class="hljs-keyword">while</span>(li.hasNext())&#123;<br>    String s=l.next();<br>    <span class="hljs-keyword">if</span>(s.equals(<span class="hljs-string">&quot;World&quot;</span>))&#123;<br>        li.add(<span class="hljs-string">&quot;!!!&quot;</span>);<span class="hljs-comment">//特别注意，并不是调用了l的 add() 方法，而是 li 的 add() 方法！</span><br>    &#125;<br>    System.out.println(s);<br>&#125;<br></code></pre></td></tr></table></figure><p>在 listItr 类中的 add() 方法，添加完元素之后，有一句<code>expectedModCount=modCount;</code>重新把实际修改值赋给了预期修改值。因此 next() 方法中判断<code>expectedModCount==modCount</code>，即使添加了新元素也仍然是 true. 不会发生并发修改异常。</p><h2 id="增强-for"><a href="#增强-for" class="headerlink" title="增强 for"></a>增强 for</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(E e:数组或 Collection 的集合)<br>&#123;<br><span class="hljs-comment">//在这里使用变量e，把其当做集合元素来用</span><br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:arr)&#123;<br>    System.out.println(i);<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:list)&#123;<br>    System.out.println(i);<br>&#125;<br><span class="hljs-comment">//内部是一个 iterator 迭代器，不可以中途修改数据，会引发并发修改异常。</span><br></code></pre></td></tr></table></figure><h2 id="几种遍历方式的选择"><a href="#几种遍历方式的选择" class="headerlink" title="几种遍历方式的选择"></a>几种遍历方式的选择</h2><p>单纯的遍历：增强 for 最简单。</p><p>需要用到索引：普通 for。</p><p>迭代器也要会用。</p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p>后入先出 FILO。</p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>先入先出 FIFO。</p><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>可以根据索引查找，查找效率高；增删效率低。</p><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><p>每个结点存储数据和下一个结点的地址值。最后一个结点地址值为空。</p><p>相比数组，增删只需要修改增删处前后结点的地址值，效率更高。</p><p>但是查询必须从头开始，效率低。</p><h1 id="List-的子类"><a href="#List-的子类" class="headerlink" title="List 的子类"></a>List 的子类</h1><p>ArrayList 底层数据结构是数组，LinkedList 底层数据结构是链表。</p><p>用法一模一样，查询效率高就用 ArrayList，增删效率高用 LinkedList。</p><h2 id="LinkList-特有功能"><a href="#LinkList-特有功能" class="headerlink" title="LinkList 特有功能"></a>LinkList 特有功能</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public void addFirst(E e)</td><td></td></tr><tr><td>public void addLast(E e)</td><td></td></tr><tr><td>public E getFirst()</td><td></td></tr><tr><td>public E getLast()</td><td></td></tr><tr><td>public void removeFirst()</td><td></td></tr><tr><td>public void removeLast()</td><td></td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span c</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习博客_13 入门——异常</title>
    <link href="http://example.com/2022/05/07/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_13%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%BC%82%E5%B8%B8/"/>
    <id>http://example.com/2022/05/07/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_13%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%BC%82%E5%B8%B8/</id>
    <published>2022-05-06T16:00:00.000Z</published>
    <updated>2022-05-07T07:51:50.045Z</updated>
    
    <content type="html"><![CDATA[<p>有时因为编译错误，会提示一些信息（如：数组越界 ArrayIndexOutOfBoundException) 其实这些提示信息也是类。</p><h1 id="Throwable"><a href="#Throwable" class="headerlink" title="Throwable"></a>Throwable</h1><p>Throwable 是所有错误、异常的父类。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mermaid">graph LR<br>A[Throwable]--&gt;B[Error]<br>A--&gt;C[异常]<br>C--&gt;R[RuntimeException 运行型异常]<br>C--&gt;O[其他 编译型异常]<br></code></pre></td></tr></table></figure><p>Error 程序无法处理，而异常程序可以处理。</p><p>RuntimeException：运行时异常，非受检异常， 可以先不处理，真的异常了再进行处理。在编译期间不会检查，其他类错误在编译期间检查。</p><p>编译时异常：受检异常，不管运行会不会异常，都需要进行异常处理，不然无法编译。</p><h1 id="处理异常"><a href="#处理异常" class="headerlink" title="处理异常"></a>处理异常</h1><p>JVM 对异常的默认处理方式：输出异常名称、位置、原因，并停止运行。</p><p>程序员还可以有自己的处理异常方法，如 try…catch 和 throw。</p><h2 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>    可能出现异常的代码;<br>&#125;<br><span class="hljs-keyword">catch</span>(异常类名 变量名)&#123;<br>    出现异常后的处理代码;<br>&#125;<br><br>String s=<span class="hljs-string">&quot;2022-05-07&quot;</span>;<br>SimpleDateFormat sdf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-mm-dd&quot;</span>);<br>sdf.parse(s);<span class="hljs-comment">//这个方法不能直接用，必须要加异常处理</span><br><br><span class="hljs-keyword">try</span>&#123;<br>    sdf.parse(s);<br>&#125;<br><span class="hljs-keyword">catch</span>(ParseException e)&#123;<br>    System.out.print(<span class="hljs-string">&quot;parseException!&quot;</span>);<span class="hljs-comment">//不管会不会发生异常，都要写</span><br>&#125;<br></code></pre></td></tr></table></figure><p>出现异常时，异常对象会被提交给 Java 运行时系统，如果和 catch 中的异常类匹配就会进行异常的处理，<strong>处理完成后可以继续执行。</strong></p><p>如果异常变量命名为 e ,尝试调用 e 的成员方法<code>e.printStackTrace()</code>就会输出平时出现异常时系统默认提示的信息：<code>java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3  at com.ithema_02.ExceptionDemo02.method..... </code></p><p>但是通过这种方法处理异常之后，异常后面的部分仍然可以执行。</p><h3 id="Throwable-的成员方法"><a href="#Throwable-的成员方法" class="headerlink" title="Throwable 的成员方法"></a>Throwable 的成员方法</h3><p>Throwable 作为超类，其所有子类都可以使用他的成员方法。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public String getMessage()</td><td>返回此 Throwable 的详细消息字符串</td></tr><tr><td>public String toString()</td><td>返回此可抛出的简短描述</td></tr><tr><td>public void printStackTrace()</td><td>把异常的错误信息输出到控制台</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">e.getMessage():  Index 3 out of bounds for length 3<br>e.toString(): java . lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3<br>e.printStackTrace(): java.lang.ArrayIndexOutOfBoundsException: Index 3 out of bounds for length 3  at com.ithema_02.ExceptionDemo02.method.....<br></code></pre></td></tr></table></figure><p>利用 Ctrl B 追根溯源可以得知， getMessage() 内部大概是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Throwable</span> &#123;<br>    <span class="hljs-keyword">private</span> String detailMessage;<span class="hljs-comment">//Throwable 类中的一个成员方法</span><br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Throwable</span><span class="hljs-params">(String message)</span>&#123;<br>        detailMessage=message;<span class="hljs-comment">//构造方法。出现异常时，会通过这种方法构造一个异常对象</span><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMessage</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> detailMessage;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Throws"><a href="#Throws" class="headerlink" title="Throws"></a>Throws</h2><p>可以抛出异常给 try catch 处理，但是自身不能解决。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">throws</span> 异常类名;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    System.out.println(<span class="hljs-string">&quot;运行开始&quot;</span>);<br>    method1();<br>    <span class="hljs-keyword">try</span>&#123;<br>        method2();<span class="hljs-comment">//抛出给了 try catch 处理</span><br>    &#125;<br>    <span class="hljs-keyword">catch</span>(ParseException e)<br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;运行错误&quot;</span>);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;运行结束&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method1</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ArrayIndexOutOfException&#123;<br>    <span class="hljs-type">int</span>[] arr=&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br>    System.out.println(arr[<span class="hljs-number">3</span>]);<span class="hljs-comment">//会报错并停止运行， throws 并没有解决异常</span><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ParseException&#123;<br>    String s=<span class="hljs-string">&quot;2022-05-07&quot;</span>;<br>SimpleDateFormat sdf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-mm-dd&quot;</span>);<br>sdf.parse(s);<span class="hljs-comment">//因为抛出，可以使用了。如果异常，try catch 会显示“运行结束”并继续运行。</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> class 类名 <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<br>    无参构造<br>    带参构造<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScoreException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Exception</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ScoreException</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ScoreException</span><span class="hljs-params">(message)</span>&#123;<br>        <span class="hljs-built_in">super</span>(message);<span class="hljs-comment">//把 message 传给父类处理</span><br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//异常类的使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">throws</span> ScoreException&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">checkScore</span><span class="hljs-params">(<span class="hljs-type">int</span> score)</span><br>    &#123;<br>        <span class="hljs-keyword">if</span>(score&lt;<span class="hljs-number">0</span>||score&gt;<span class="hljs-number">100</span>)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScoreException</span>(<span class="hljs-string">&quot;输入分数有误！请重新输入&quot;</span>);<span class="hljs-comment">//throw 不是 throws!</span><br>            <span class="hljs-comment">/*throw 写在方法体内，throws 写在类定义里。</span><br><span class="hljs-comment">            throws 不一定有异常，而 throw 一定是抛出了异常。*/</span><br>        &#125;<br>        <span class="hljs-keyword">else</span><br>            System.out.println(<span class="hljs-string">&quot;分数正常&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>    Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>    <span class="hljs-type">int</span> score=sc.nextInt();<br>    Teacher t=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>    <span class="hljs-keyword">try</span>&#123;<span class="hljs-comment">//调用方法时，要处理抛过来的异常</span><br>        t.checkScore(score);<br>    &#125;<br>    <span class="hljs-keyword">catch</span>(ScoreException e)&#123;<br>        e.printStackTrace();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//异常时就会输出：异常类型 ScoreException，异常原因&quot;输入分数有误！请重新输入&quot;，异常位置。</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;有时因为编译错误，会提示一些信息（如：数组越界 ArrayIndexOutOfBoundException) 其实这些提示信息也是类。&lt;/p&gt;
&lt;h1 id=&quot;Throwable&quot;&gt;&lt;a href=&quot;#Throwable&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习博客_11 入门——内部类</title>
    <link href="http://example.com/2022/05/05/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_11%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>http://example.com/2022/05/05/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_11%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%86%85%E9%83%A8%E7%B1%BB/</id>
    <published>2022-05-04T16:00:00.000Z</published>
    <updated>2022-05-05T02:49:56.316Z</updated>
    
    <content type="html"><![CDATA[<p>以黑马程序员全套Java教程网课为主。</p><p>在类中定义一个类。</p><h1 id="内部类和外部类的互相使用"><a href="#内部类和外部类的互相使用" class="headerlink" title="内部类和外部类的互相使用"></a>内部类和外部类的互相使用</h1><p>无论外部类的成员变量的权限修饰符是什么（private, public……）内部类都可以直接访问外部类的全部成员变量。</p><p>而外部类如果想访问内部类的成员，需要先创建一个内部类对象再访问。</p><p><em>因为都在同一个类中，所以即使权限修饰符是 private 也可以访问。</em></p><h1 id="外界使用内部类"><a href="#外界使用内部类" class="headerlink" title="外界使用内部类"></a>外界使用内部类</h1><p>外界使用内部类：<code>Outer.Inner oi=new Outer().new Inner();</code></p><p>如果 inner 是私有的，或者是局部内部类，则不能通过上述方法调用。但是可以在 outer 里定义一个公开的方法，在方法中 new 一个 inner 并使用其中的成员方法。对于外部的调用者来说，他只需调用 outer 的这个方法，就可以访问 inner 的成员方法。不过对使用者来说他并不知道内部结构如此。</p><h1 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h1><p>在类的成员位置定义：成员内部类</p><p>在类的局部定义：局部内部类。</p><h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2><p>不能从外界直接创建对象，只能通过调用方法来创建类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(num);<span class="hljs-comment">//局部内部类可以访问外部类的成员变量，或 method 方法中的局部变量</span><br>            &#125;<br>        &#125;<br>        Inner i=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Inner</span>();<span class="hljs-comment">//在方法中创建内部对象</span><br>        i.show();<span class="hljs-comment">//创建对象之后，记得调用内部方法的成员变量</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2><p>继承了另一个类，或实现了接口的子类匿名对象。</p><p>首先有一个父类/接口，其中有具体的/抽象的方法，然后匿名内部类对其进行重写/实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口文件 inter.java 中：</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">inter</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>;<span class="hljs-comment">//抽象方法</span><br>&#125;<br><br><span class="hljs-comment">//外部类文件 Outer.java 中</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> num=<span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">inter</span> &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类&quot;</span>);<br>            &#125;<br>        &#125;.show();<span class="hljs-comment">//创建匿名对象之后，记得调用成员变量</span><br>        <br>        <span class="hljs-comment">//另一种方法：</span><br>        inter i=<span class="hljs-keyword">new</span> <span class="hljs-title class_">inter</span> &#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类&quot;</span>);<br>            &#125;<br>        &#125;<br>        i.show();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用示例：假如我们有一个 jump 接口，有一个 jumpoperator 类，其中包含 method(Jump j) 执行j的 jump 。</p><p>我们要让不同动物都能 jump，就要在不同动物类中 implements jump 接口，并重写其中的抽象方法；</p><p>然后用堕胎的方式<code>jump c=new cat(); jump d=new dog();</code> 新建对象并传给 method 方法。</p><p>但是可以通过匿名内部类的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">jo.method(<span class="hljs-keyword">new</span> <span class="hljs-title class_">jump</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jump</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;猫跳高&quot;</span>);<br>    &#125;<br>&#125;);<br><br>jo.method(<span class="hljs-keyword">new</span> <span class="hljs-title class_">jump</span>()&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">jump</span><span class="hljs-params">()</span><br>    &#123;<br>        System.out.println(<span class="hljs-string">&quot;狗跳高&quot;</span>);<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>直接穿一个匿名内部类参数给 method 方法，就不用新建文件重新定义类了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以黑马程序员全套Java教程网课为主。&lt;/p&gt;
&lt;p&gt;在类中定义一个类。&lt;/p&gt;
&lt;h1 id=&quot;内部类和外部类的互相使用&quot;&gt;&lt;a href=&quot;#内部类和外部类的互相使用&quot; class=&quot;headerlink&quot; title=&quot;内部类和外部类的互相使用&quot;&gt;&lt;/a&gt;内部类和外部</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>Java 学习博客_12 入门——常用 API</title>
    <link href="http://example.com/2022/05/05/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_12%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%20API/"/>
    <id>http://example.com/2022/05/05/Java%20%E5%AD%A6%E4%B9%A0%E5%8D%9A%E5%AE%A2_12%20%E5%85%A5%E9%97%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%20API/</id>
    <published>2022-05-04T16:00:00.000Z</published>
    <updated>2022-05-05T02:50:22.594Z</updated>
    
    <content type="html"><![CDATA[<p>以黑马程序员全套Java教程网课为主。</p><h1 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h1><p>不用导包，成员变量、方法都带有static修饰，可以直接通过类名访问。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public static int abs(int a)</td><td>绝对值，支持 double  float int long 类型</td></tr><tr><td>public static double ceil(double a)</td><td>向上取整，返回一个 double 值</td></tr><tr><td>public static double floor(double a)</td><td>向下取整，返回一个 double 值</td></tr><tr><td>public static int round(float a)</td><td>四舍五入</td></tr><tr><td>public static int max(int a,int b)</td><td></td></tr><tr><td>public static int min(int a,int b)</td><td></td></tr><tr><td>public static double pow(double a,double b)</td><td>a 的 b 次幂</td></tr><tr><td>public static double random()</td><td>随机数，范围 [0.0,1.0)</td></tr></tbody></table><p>随机数想要其他范围可以做算术运算。如 [0.0, 100.0)就用<code>random()*100</code>。</p><h1 id="System"><a href="#System" class="headerlink" title="System"></a>System</h1><p>不用导包，不能实例化，static</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public static void exit(int status)</td><td>终止运行 JVM，非零表示非正常终止</td></tr><tr><td>public static long currentTimeMillis()</td><td>返回当前时间到1970年1月1日的时间间隔，以毫秒为单位</td></tr></tbody></table><p>currentTimeMillis() 可以整除求得当前年份；可以用两个 currentTimeMillis() 值做差求时间间隔等。</p><h1 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h1><p>Object 类是所有类的根类。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public String toString()</td><td>返回对象的字符串表示形式。建议子类全部重写该方法</td></tr><tr><td>public boolean equals(Object obj)</td><td>比较对象是否相等（默认比较地址）。重写可以比较对象内容</td></tr></tbody></table><h2 id="toString-方法"><a href="#toString-方法" class="headerlink" title="toString() 方法"></a>toString() 方法</h2><p>Object 中包含 toString 方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> getClass().getName() + <span class="hljs-string">&quot;@&quot;</span> + Integer.toHexString(hashCode());<br>&#125;<br></code></pre></td></tr></table></figure><p>输出类名@+一串哈希值。</p><p>一般重写 toString() 方法，用于输出简明扼要的类信息。IDEA 中可以像构造方法和 getter / setter 一样自动生成。类似：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//手动实现</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&#123; Person:name=&quot;</span> + name +<span class="hljs-string">&quot; age=&quot;</span> + age+<span class="hljs-string">&quot;&#125;&quot;</span>;<span class="hljs-comment">// name 和 age 都是本类中的成员变量</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="equals"><a href="#equals" class="headerlink" title="equals"></a>equals</h2><p><code>s1.equals(s2)</code>本质上是比较两个对象的地址，肯定是 false。</p><p>一般也会重写/自动生成可以比较两个对象内容是否一致的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>==o) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>; <span class="hljs-comment">//同一个对象</span><br>    <span class="hljs-keyword">if</span>(o==<span class="hljs-literal">null</span>||getClass()!=o.getClass()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<span class="hljs-comment">//o是空对象，或这两个对象不属于一个类</span><br>    Student student=(Student) o;<span class="hljs-comment">//因为调用 equals 传参的时候向上转型了，o 变成了 Object 类，要转回来</span><br>    <span class="hljs-keyword">if</span> (age!=student.age)<span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <br>    <span class="hljs-keyword">return</span> name!=<span class="hljs-literal">null</span>?name.equals(student.name):student.name==<span class="hljs-literal">null</span>;<span class="hljs-comment">//要么 name 都是空字符串，要么相同。equals() 方法只有非空字符串才能调用</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="Arrays-类"><a href="#Arrays-类" class="headerlink" title="Arrays 类"></a>Arrays 类</h1><p>需要导包 <code>java.util.Arrays</code>，不能创建对象，成员是 static的。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public static String toString(int[] a)</td><td>返回形如 “[a, b, c]” 的字符串形式</td></tr><tr><td>public static void sort(int[] a)</td><td>按数字顺序排列指定的数组</td></tr></tbody></table><h1 id="补充：工具类"><a href="#补充：工具类" class="headerlink" title="补充：工具类"></a>补充：工具类</h1><p>以上工具类的特点都是：不能创建对象，但是成员方法都是 static 修饰，可以直接用类名访问。</p><p>不能创建对象的方法是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Math</span><span class="hljs-params">()</span>&#123;&#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Arrays</span><span class="hljs-params">()</span>&#123;&#125;;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">System</span><span class="hljs-params">()</span>&#123;&#125;;<br></code></pre></td></tr></table></figure><p>自己写了无参构造方法，会把系统默认的无参构造方法覆盖。而该方法又是私有的，因此外界无法访问创建对象。</p><h1 id="基本类型包装类"><a href="#基本类型包装类" class="headerlink" title="基本类型包装类"></a>基本类型包装类</h1><p>其中有一些方法能更好地处理基本数据类型。</p><p>包括：Byte, Short, Integer, Long, Float, Double, Character, Boolean</p><h2 id="方法示例"><a href="#方法示例" class="headerlink" title="方法示例"></a>方法示例</h2><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public static Integer valueOf(int i)</td><td>把 int 转换为 Integer 类型</td></tr><tr><td>public static Integer valueOf(String s)</td><td>把 String 转换为 Integer 类型</td></tr></tbody></table><p>public String[] split(String regex) 把给定字符串用 regex 分隔开。</p><p>如给定字符串 s 是”1 2 3 4”，<code>s.split(&quot; &quot;)</code>就会得到4个字符串：”1””2””3””4”。</p><h2 id="基本类型转换"><a href="#基本类型转换" class="headerlink" title="基本类型转换"></a>基本类型转换</h2><p>int -&gt; String：</p><p>① 空字符串””+int 类型</p><p>② String s=String.valueOf(i)</p><p>String -&gt; int：</p><p>① Integer in=Integer.valueOf(s);</p><p>int i=intValue(in);</p><p>② int i=Integer.parseInt(s);</p><h2 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h2><p>装箱：基本类型-&gt;对应的包装类型</p><p>拆箱：包装类型-&gt;基本类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer i=Integer.valueOf(<span class="hljs-number">100</span>);<span class="hljs-comment">//装箱</span><br>Integer ii=<span class="hljs-number">100</span>;<span class="hljs-comment">//自动装箱</span><br><br>ii=ii.intValue()+<span class="hljs-number">200</span>;<span class="hljs-comment">//拆箱</span><br>ii+=<span class="hljs-number">200</span>;<span class="hljs-comment">//自动拆箱</span><br><br>Integer i3=<span class="hljs-literal">null</span>;<br>i3+=<span class="hljs-number">300</span>;<span class="hljs-comment">//NullPointerException。因此对象使用之前最好先判断是否为 null</span><br></code></pre></td></tr></table></figure><h1 id="日期类"><a href="#日期类" class="headerlink" title="日期类"></a>日期类</h1><h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><p>Date 类，需要导包。<strong>注意是 java.util 下的，而不是 java.sql 下的！</strong>java.util 下的 Date 类非最终类，所以可以有子类， java.sql 下的 Date 类就是其子类。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public Date()</td><td>初始化一个 Date 对象，值为其被分配时的时间，精确到毫秒</td></tr><tr><td>public Date(long Date)</td><td>分配一个 Date 对象，值为从标准时间起指定的毫秒数</td></tr><tr><td>public long getTime()</td><td>获取日期对象从标准时间到现在的毫秒数</td></tr><tr><td>public void setTime(long time)</td><td>设置时间，单位为毫秒</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//输出 Date 对象，得到：星期 月份 日期 时 分 秒 CST 年份</span><br><br><span class="hljs-type">long</span> d=<span class="hljs-number">1000</span>*<span class="hljs-number">60</span>*<span class="hljs-number">60</span>;<br>Date da=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(d);<span class="hljs-comment">//标准时间往后1h，即1970.1.1 上午9点（不是1点，因为 CST 有时差）</span><br><br><span class="hljs-type">long</span> time=System.currentTimeMillis();<span class="hljs-comment">//可以这样获取当前时间，然后传给 Date() 或 setTime()</span><br></code></pre></td></tr></table></figure><h2 id="SimpleDateFormat"><a href="#SimpleDateFormat" class="headerlink" title="SimpleDateFormat"></a>SimpleDateFormat</h2><p>可以自己设置日期格式。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public SimpleDateFormat()</td><td>构造方法，并使用系统默认的 Date 格式</td></tr><tr><td>public SimpleDateFormat(String pattern)</td><td>构造方法，并使用自己规定的格式</td></tr><tr><td>public final String format(Date d)</td><td>将日期对象转换为相应格式的字符串</td></tr><tr><td>public final Date parse(String s)</td><td>将字符串转换为日期</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Parse Exception&#123;<span class="hljs-comment">//结尾要加一些东西，在 IDEA 中可以自动补全</span><br>    Date d=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>;<span class="hljs-comment">//被分配时的时间</span><br>    SimpleDateFormat sdf=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy年-MM月-dd日 HH:mm:ss&quot;</span>);<br>    String s=sdf.format(d);<br>    System.out.println(s);<span class="hljs-comment">//输出格式就形如 2022年-05月-05日 10:24:00</span><br>    <br>    String ss=<span class="hljs-string">&quot;2022-05-05 10:24:00&quot;</span>;<br>    SimpleDateFormat sdf1=<span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleDateFormat</span>(<span class="hljs-string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);<br>    Date d1=sdf1.parse(ss);<br>&#125;<br></code></pre></td></tr></table></figure><p>y 年 M 月 d 日</p><p>H 时 m 分 s 秒</p><p>（实际运用的时候，也可以让用户自己指定格式。比如单独写一个日期工具类，有两个方法，把Date转换为String和把String转换为Date；这两个方法可以设置两个传入参数：</p><p>public static String dateToString(Date d, String format)</p><p>public static String StringTodate(String s, String format)</p><p>在方法内根据传入的字符串格式，利用SimpleDateFormat的方法进行转换。）</p><h2 id="Calendar-类"><a href="#Calendar-类" class="headerlink" title="Calendar 类"></a>Calendar 类</h2><p>需要导包<code>java.util.Calendar</code>，是一个抽象类。</p><p>为某一时刻和某些日历字段的转换，以及操作日历字段提供了一些方法。</p><p>Calendar 类有一个类方法可以获取 Calendar 对象。可是 Calendar 类不是抽象类吗？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Calendar rightnow=Calendar.getInstance();<br></code></pre></td></tr></table></figure><p>其实这个方法和 Calendar 的直接子类有关，所以这个实例化相当于多态。</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>public int get(int field)</td><td>获取给定日历字段的值</td></tr><tr><td>public abstract void add(int field, int amount)</td><td>添加/减去给定的日历字段</td></tr><tr><td>public final void set(int year, int month, int date)</td><td>设置日历的年月日</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">y=c.get(Calendar.YEAR);<br>m=c.get(Calendar.MONTH)+<span class="hljs-number">1</span>;<span class="hljs-comment">//month 是从0开始的，所以要+1</span><br>d=c.get(Calendar.DATE);<br><br><span class="hljs-comment">//例：求2020年2月有多少天?</span><br>Calendar c=Calendar.getInstance();<br>c.set(<span class="hljs-number">2020</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<span class="hljs-comment">//设置为3月1日</span><br>c.add(Calendar.DATE,-<span class="hljs-number">1</span>);<span class="hljs-comment">//倒退1天，就是2月的最后一天</span><br>System.out.println(<span class="hljs-string">&quot;2020年2月有&quot;</span>+c.get(Calendar.DATE)+<span class="hljs-string">&quot;天&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;以黑马程序员全套Java教程网课为主。&lt;/p&gt;
&lt;h1 id=&quot;Math&quot;&gt;&lt;a href=&quot;#Math&quot; class=&quot;headerlink&quot; title=&quot;Math&quot;&gt;&lt;/a&gt;Math&lt;/h1&gt;&lt;p&gt;不用导包，成员变量、方法都带有static修饰，可以直接通过类名访问。</summary>
      
    
    
    
    <category term="java" scheme="http://example.com/categories/java/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>html_css_案例_1</title>
    <link href="http://example.com/2022/05/04/html%20css_%E6%A1%88%E4%BE%8B_1%20Header/"/>
    <id>http://example.com/2022/05/04/html%20css_%E6%A1%88%E4%BE%8B_1%20Header/</id>
    <published>2022-05-03T16:00:00.000Z</published>
    <updated>2022-05-04T04:24:07.600Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.bilibili.com/video/BV14J4114768?p=1">黑马程序员pink老师前端入门教程，零基础必看的h5(html5)+css3+移动端前端视频教程_哔哩哔哩_bilibili</a></p><p><img src="https://s1.328888.xyz/2022/05/02/Av2CA.png" alt="Av2CA.png"></p><p>以上为学成在线网页案例。本文主要涉及老师讲解的 Header 部分。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>建议样式设置遵循以下步骤：</p><ol><li><strong>布局定位属性：display / position / float / clear / visibility / overflow</strong></li><li><strong>自身属性：width / height / margin / padding / border / background</strong></li><li><strong>文本属性：color / font / text-decoration / text-align / vertical-align / white-space / break-word</strong></li><li><strong>其他属性：content / cursor / border-radius / box-shadow / text-shadow / background: linear-gradient……</strong></li></ol><p>设计思路：</p><ol><li>确定版心（在页面最中央的），宽度一旦确定不能更改</li><li>确定行模块（标准流）和列模块（浮动）。<em>网页布局第一准则</em></li><li>确定浮动元素中每个列的大小和位置。<em>网页布局第二准则</em></li><li><strong>先理清布局结构，再写代码。</strong></li></ol><h1 id="写代码"><a href="#写代码" class="headerlink" title="写代码"></a>写代码</h1><p>首先记得清除全局样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">* &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="版心"><a href="#版心" class="headerlink" title="版心"></a>版心</h3><p>利用 Ps 测量知，版心部分宽1200像素，并且全部居中对齐。</p><p>因为涉及到好几个块级元素都是这样的样式，所以用类选择器。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.w</span> &#123;<span class="hljs-comment">/*版心的宽度、居中样式*/</span><br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">1200px</span>;<br>    <span class="hljs-attribute">margin</span>: auto;<span class="hljs-comment">/*设置 margin-left 和 right 都是 auto，就会居中*/</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后设计顺序是先把一行设计完（包括这行内的所有元素），然后再设计下一行。</p><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p><img src="https://s1.328888.xyz/2022/05/02/AEZUX.png" alt="AEZUX.png"></p><p>从左到右依次为：logo，导航栏 nav，搜索 search，头像 user 四列。</p><p>四列有着同样的高度，设置这一行的盒子的样式第一种做法是一整个盒子把这一行四列包起来，这个盒子和这四个元素一样高，然后设置上下外边距；（老师的方法）</p><p>第二种做法是一整个盒子包住这四个元素，但是这个盒子更大一些，在盒子内部设置内边距留有一些空间；解法很多。</p><p>记得 header 盒子要同时选中 header 和版心 w 两个样式类。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;header w&quot;</span>&gt;</span>头部盒子<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>测量得知：logo 高度42像素，上下各有30像素的空白。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.header</span> &#123;<span class="hljs-comment">/*包裹 header 一行的盒子的样式*/</span><br><span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">30px</span> auto;<span class="hljs-comment">/*表示：上下30px，左右水平居中*/</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="logo：学成在线"><a href="#logo：学成在线" class="headerlink" title="logo：学成在线"></a>logo：学成在线</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;image/logo.png&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>logo 图标高42像素，宽200像素。此外记得，这几个盒子横向放在一行中，所以都要加 float 属性。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.logo</span> &#123;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;<br>    <span class="hljs-attribute">height</span>:<span class="hljs-number">42px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h4><p><strong>实际开发中，导航栏是采用 li 包裹 a 标签的方法实现的</strong>，这样使得链接标签结构更加清晰，而且如果堆叠 a 标签，有可能被搜索引擎怀疑恶意堆砌关键字而降权。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;nav&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>课程<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">li</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>职业规划<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><p>先把页面中的所有 li 标签前面的圆点去掉，然后写 nav 类选择器。</p><p>测量得知，其距离左边的 logo 图标60像素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">li</span> &#123;<br>    line-style: none;<br>&#125;<br><span class="hljs-selector-class">.nav</span> &#123;<br>    <span class="hljs-attribute">float</span><span class="hljs-selector-pseudo">:left</span>;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">60px</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于具体的三个导航栏，浮动要给 li 标签设置而不是 a 标签设置。每个导航栏按钮之间相距30像素。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后，真正想实现点击跳转的链接效果，点击范围不只局限于文字区域，而是整块盒子可以点击。所以要给 a 设置为块级元素属性。</p><p>三个导航栏长度随其内容的长度而变化，所以要设置水平方向上内边距 padding 而不能设置盒子具体大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">text-decoration</span>: none;<span class="hljs-comment">/*去掉链接标签自带的下划线*/</span><br>&#125;<br><br><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span> &#123;<br>    <span class="hljs-attribute">display</span>: block;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">0</span> <span class="hljs-number">10px</span>;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">42px</span>;<span class="hljs-comment">/*使得文字内容垂直居中对齐*/</span><br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">18px</span>;<br>    <span class="hljs-attribute">color</span>: black;<br>&#125;<br></code></pre></td></tr></table></figure><p>li 标签不用设置宽度，一方面是浮动的块级元素的特性：其宽度会和内容一样宽；</p><p>一方面考虑到以后可能还会添加新的导航栏。</p><p>最后是期望鼠标经过导航栏链接元素的时候，文字变成蓝色，且盒子底部会出现蓝色的线提示鼠标悬停在该块上。用 hover 完成。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.nav</span> <span class="hljs-selector-tag">li</span> <span class="hljs-selector-tag">a</span><span class="hljs-selector-pseudo">:hover</span> &#123;<br><span class="hljs-attribute">border-bottom</span>: blue;<span class="hljs-comment">/*线宽和文字内容一样宽*/</span><br>    <span class="hljs-attribute">color</span>: blue;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="搜索框"><a href="#搜索框" class="headerlink" title="搜索框"></a>搜索框</h4><p><img src="https://s1.328888.xyz/2022/05/03/hdRMC.png" alt="hdRMC.png"></p><p>一个大盒子包住，左侧：输入文本框；右侧：按钮。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;search&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> / <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;输入关键词&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> /&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.search</span> &#123;<br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">410px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">50px</span>;<br>&#125;<br><br><span class="hljs-selector-class">.search</span> <span class="hljs-selector-tag">input</span> &#123;<span class="hljs-comment">/*虽然相邻的行内块元素会放在同一行，但是行内块元素之间有默认空隙，所以要加浮动。*/</span><br>    <span class="hljs-attribute">float</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">345px</span>;<span class="hljs-comment">/*其实整个输入框宽360px。只是因为盒子设置了宽度，再有了 padding-left 会撑大盒子。因此要360-15*/</span><br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-attribute">padding-left</span>: <span class="hljs-number">15px</span>;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid blue;<br>    <span class="hljs-attribute">border-right</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/*因为右边是搜索按钮，可以不用边框*/</span><br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#bfbfbf</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<span class="hljs-comment">/*Ps 中测量得到的 pt 单位和 px 一样大*/</span><br>&#125;<br><br><span class="hljs-selector-class">.search</span> <span class="hljs-selector-tag">button</span> &#123;<span class="hljs-comment">/*虽然相邻的行内块元素会放在同一行，但是行内块元素之间有默认空隙，所以要加浮动。*/</span><br>    <span class="hljs-attribute">float</span>: left;<br>    wdith； <span class="hljs-number">50px</span>;<br>    <span class="hljs-attribute">height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-selector-tag">button</span>: <span class="hljs-number">0</span>;<span class="hljs-comment">/*去掉按钮默认的边框*/</span><br>    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">url</span>(<span class="hljs-string">image/button.png</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="登录状态"><a href="#登录状态" class="headerlink" title="登录状态"></a>登录状态</h4><p><img src="https://s1.328888.xyz/2022/05/04/hlga2.png" alt="hlga2.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;user&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">url</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> /&gt;</span><br>    qq-leishui<br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.user</span> &#123;<br>    <span class="hljs-attribute">float</span>: right;<br>    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">42px</span>;<br>    <span class="hljs-attribute">margin-right</span>: <span class="hljs-number">30px</span>;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">14px</span>;<br>    <span class="hljs-attribute">color</span>: <span class="hljs-number">#666</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>图片文字部分居中：之后的课程涉及到。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://www.bilibili.com/video/BV14J4114768?p=1&quot;&gt;黑马程序员pink老师前端入门教程，零基础必看的h5(html5)+css3+移动端前端视频教程_哔哩哔哩_bilibili&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img </summary>
      
    
    
    
    <category term="html+css" scheme="http://example.com/categories/html-css/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
  <entry>
    <title>git_3 版本控制</title>
    <link href="http://example.com/2022/05/03/git_3%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/"/>
    <id>http://example.com/2022/05/03/git_3%20%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</id>
    <published>2022-05-02T16:00:00.000Z</published>
    <updated>2022-05-04T04:23:41.174Z</updated>
    
    <content type="html"><![CDATA[<h1 id="查看历史版本信息"><a href="#查看历史版本信息" class="headerlink" title="查看历史版本信息"></a>查看历史版本信息</h1><p><code>git log</code>查看之前的版本信息。</p><p>其中可以看到 HEAD-&gt;master（或 main），HEAD 是指向当前版本的指针，之后修改版本其实就是移动这个指针。</p><p>如果最下面一行是冒号，说明记录多到一页装不下了。</p><p>多屏显示控制方式：空格向下翻页，b 向上翻页，q退出。</p><p><code>git log --pretty=oneline</code>以每次版本占一行的，漂亮的方式 显示版本信息。</p><p><code>git log --oneline</code>连哈希值也会缩短（被称为局部索引值）。<strong>只能查看之前的版本信息，版本回退后不能看到将来的版本。</strong></p><p><code>git reflog</code>显示 commit 信息，以及从当前版本移动到这个版本需要多少步（如：HEAD@{1}表示差了一个版本，0表示这个版本就是当前版本）<strong>可以查看历史/未来版本。</strong></p><h1 id="版本前进-回退"><a href="#版本前进-回退" class="headerlink" title="版本前进 / 回退"></a>版本前进 / 回退</h1><p>本质就是移动 HEAD 指针。</p><p>方法1：首先通过 <code>git log --oneline</code>找到要跳转的版本的哈希值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git reset --hard Fd83ed9 // 结尾是刚才获取的哈希值，即局部索引值<br></code></pre></td></tr></table></figure><p>不管前进后退都是这种方法。</p><p>方法2：只能后退</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git reset --hard^//回退一个版本。有几个异或符号，回退几个版本。<br></code></pre></td></tr></table></figure><p>方法3：只能后退</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">git reset hard~3//回退3个版本<br></code></pre></td></tr></table></figure><p>soft：修改本地库的指针。修改后输入<code>cat good.txt</code> 查看本地库的文件，会发现文件已经变成修改版本后的文件了。</p><p><em>如果输入 <code>git status</code> ，会发现暂存区也被 modified 了。并不是因为暂存区变了，而是本地库指针移动了，和暂存区无法对应了。</em></p><p>mixed：修改本地库的指针，并重置暂存区。</p><p>hard：修改本地库的指针，并重置暂存区和工作区。</p><h1 id="删除及找回删除文件"><a href="#删除及找回删除文件" class="headerlink" title="删除及找回删除文件"></a>删除及找回删除文件</h1><p>如果是删除并提交了删除操作之后：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs git">rm aaa.txt//删除文件<br>git add aaa.txt//添加删除操作<br>git commit -m &quot;&quot; aaa.txt//提交删除操作<br><br>git reflog//查看历代版本及其哈希值<br>git reset --hard abcdef//回退到有这个文件的版本<br>git checkout -- aaa.txt//另一种方法<br></code></pre></td></tr></table></figure><p>如果是删除后把删除操作添加到暂存区后：<code>git reset --hard HEAD</code>。</p><h1 id="比较文件差异"><a href="#比较文件差异" class="headerlink" title="比较文件差异"></a>比较文件差异</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs plaintext">//工作区未提交到暂存区：<br>git diff a.txt//比较该文件做的改动。红色行删除，绿色行新增/修改。<br>//工作区提交到暂存区后：上一种方法查不出差别。<br>git diff HEAD a.txt//比较本地库的版本<br>git diff HEAD^3 a.txt//比较本地库的当前版本和倒退三个版本的区别<br></code></pre></td></tr></table></figure><p>不带文件名就是比较多个文件。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;查看历史版本信息&quot;&gt;&lt;a href=&quot;#查看历史版本信息&quot; class=&quot;headerlink&quot; title=&quot;查看历史版本信息&quot;&gt;&lt;/a&gt;查看历史版本信息&lt;/h1&gt;&lt;p&gt;&lt;code&gt;git log&lt;/code&gt;查看之前的版本信息。&lt;/p&gt;
&lt;p&gt;其中可以看到 H</summary>
      
    
    
    
    <category term="git" scheme="http://example.com/categories/git/"/>
    
    
    <category term="study" scheme="http://example.com/tags/study/"/>
    
  </entry>
  
</feed>
