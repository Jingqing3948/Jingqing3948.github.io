<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-26T16:08:36.509Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Jing Qing</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>大二C语言大作业：订餐系统（总结）</title>
    <link href="http://example.com/2022/02/27/%E5%A4%A7%E4%BA%8CC%E8%AF%AD%E8%A8%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E8%AE%A2%E9%A4%90%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <id>http://example.com/2022/02/27/%E5%A4%A7%E4%BA%8CC%E8%AF%AD%E8%A8%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E8%AE%A2%E9%A4%90%E7%B3%BB%E7%BB%9F%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/</id>
    <published>2022-02-26T16:00:00.000Z</published>
    <updated>2022-02-26T16:08:36.509Z</updated>
    
    <content type="html"><![CDATA[<p>尽管快半年没有学c了，好在回顾起来还是蛮快的。而且也发现比去年的自己熟练了许多。<br>小学期要求5人合作，用C语言做一个订餐系统，能够实现用户的登录、选择餐馆、订餐、按各种规则查询与排序、修改个人信息，管理员的登录、添加菜品、按各种规则查询与排序、修改个人信息。<br>首先，我们调研了几个流行的订餐系统，<del>并解决了午饭</del>分析其页面逻辑顺序，借此设定了我们自己的订餐系统的逻辑顺序。<br>感谢blue、peppa、214、Mar鼎力相助！<br><img src="https://img-blog.csdnimg.cn/d8feaa5c8fab43efb78c7dd073d37419.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>至于写法，主要尝试了两个新知识点：<strong>文件操作与链表</strong>。<br>想要实现这样的订餐系统，必须有地方可以存储其数据。不能说放在程序里吧，每次一关一开又恢复原状了。我们使用FILE文件操作，对存放在指定位置的txt进行读写操作，读取其中的数据。<br>至于数据结构采用结构体数组还是链表，在之前学习翁恺老师的网课时我们认识到了结构体数组的一些弊端。数组大小固定，一旦初始化无法修改，少了可能越界，多了浪费内存空间，链表就可以想用一个结点开辟一个结点。而且对于插入、删除等操作还是链表香啊，数组中间插入或删除一个，后面的都要跟着动。<br>至于如何实现多人合作，可参考翁恺老师网课12.3.1多个源代码文件用devc++创建项目的方法。我们每人负责了几个函数，最后对好接口和返回值合并。其实就像同学说的，在合并之前是最没底的，也没法测试知道自己写的什么样。好在最终完成的还算顺利。</p><p>链表中嵌套链表，是这回我们做的一个非常有意思的尝试。我们发现每次订单中所点的菜品及其数量，和每次订单结束后推荐的菜品数量都是不固定的。对于数据结构还没开始学的我们来说有些困难。后来去问了老师，老师给出了“那你们只能在链表里套一个链表了吧”的解决方案。没想到这个方案真的能做，虽然这铁不是最佳方案。但是也非常有趣。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_dish</span> //订单中的菜品链表</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> dish_id; <span class="hljs-comment">//菜品号</span><br><span class="hljs-type">int</span> number; <span class="hljs-comment">//该菜品数量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list_dish</span> *<span class="hljs-title">next</span>;</span><br>&#125; LISTDISH;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">recommend_d</span></span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">char</span> dish_name[len]; <span class="hljs-comment">//推荐的菜品名称</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">recommend_d</span> *<span class="hljs-title">next</span>;</span><br>&#125; RECOMMEND;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> //订单链表</span><br><span class="hljs-class">&#123;</span><br><span class="hljs-type">int</span> number;<span class="hljs-comment">//订单号</span><br><span class="hljs-type">char</span> user_id[len];<span class="hljs-comment">//用户id，据此可以找到用户地址</span><br><span class="hljs-type">int</span> restaurant_id;<span class="hljs-comment">//餐馆id</span><br><span class="hljs-type">int</span> score;<span class="hljs-comment">//本次订单对餐馆的打分</span><br><span class="hljs-type">int</span> price;<span class="hljs-comment">//本次订单的总价格</span><br>TIME delivery_time_s;<span class="hljs-comment">//起始配送时间。TIME是一个包含月、日、时、分成员的结构体</span><br>TIME delivery_time_e;<span class="hljs-comment">//结束配送时间</span><br>RECOMMEND *recommend_d; <span class="hljs-comment">//本次用户推荐菜品头结点指针 </span><br>LISTDISH *head_ld;<span class="hljs-comment">//本次订单的菜品链表头结点指针</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">list</span> *<span class="hljs-title">next</span>;</span><br>&#125; LIST;<br></code></pre></td></tr></table></figure><p>如上，在订单链表的每个结点中，都包含着一个listdish（存储本次订单所选菜品及其数量）链表的头结点和一个recommend（存储本次订单推荐的菜品）链表的头结点。访问的时候可以通过list-&gt;recommend-&gt;dish_name这样的方法直接得到本次订单中推荐菜品的菜品名称。<br>这样的结构，如何从文件中读取？<br>其他的链表都还好办。至于这三个链表，我们建立了3个txt文件（虽然listdish和recommend有许多链表，但是最好还是都存在一个txt里，不然每次新点订单还要新建txt文件。）其中listdish和recommend文本文档是这样的：<img src="https://img-blog.csdnimg.cn/bcd7964a59194715921f1261517f5d50.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_18,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>每一行代表第几个订单。每两个数字为一组，第一个数字为菜品号，第二个数字为该菜品所点数量。由于不固定长度，我们采用两个-1作为结尾，当读到-1时本订单结束。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c">LIST *<span class="hljs-title function_">read_inf_l</span><span class="hljs-params">()</span><br>&#123;<br>LIST *head = (LIST *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LIST))<br>, *last = head, *p, *temp = (LIST *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LIST));<br>head-&gt;next = <span class="hljs-literal">NULL</span>;<br>FILE *fp_l = fopen(<span class="hljs-string">&quot;D:\\小学期\\list.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">fscanf</span>(fp_l, <span class="hljs-string">&quot;%d %s %d %d %d %d %d %d %d %d %d %d %d &quot;</span><br>, &amp;temp-&gt;number, temp-&gt;user_id, &amp;temp-&gt;restaurant_id<br>, &amp;temp-&gt;score, &amp;temp-&gt;price<br>, &amp;temp-&gt;delivery_time_s.month, &amp;temp-&gt;delivery_time_s.day<br>, &amp;temp-&gt;delivery_time_s.hour, &amp;temp-&gt;delivery_time_s.minute<br>, &amp;temp-&gt;delivery_time_e.month, &amp;temp-&gt;delivery_time_e.day<br>, &amp;temp-&gt;delivery_time_e.hour, &amp;temp-&gt;delivery_time_e.minute) != EOF)<br>&#123;<br>p = (LIST *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LIST));<br>p-&gt;next = <span class="hljs-literal">NULL</span>;<br>p-&gt;head_ld = read_inf_ld(temp-&gt;number);<span class="hljs-comment">//跳转到read_inf_ld(int number)函数中获得本次订单listdish链表的头结点，number是订单号</span><br>p-&gt;recommend_d = read_inf_recommend(temp-&gt;number);<span class="hljs-comment">//跳转到read_inf_recommend(int number)函数中获得本次订单recommend链表的头结点，number是订单号</span><br>p-&gt;number = temp-&gt;number;<br><span class="hljs-built_in">strcpy</span>(p-&gt;user_id, temp-&gt;user_id);<br>p-&gt;restaurant_id = temp-&gt;restaurant_id;<br>p-&gt;score = temp-&gt;score;<br>p-&gt;price = temp-&gt;price;<br>p-&gt;delivery_time_s.month = temp-&gt;delivery_time_s.month;<br>p-&gt;delivery_time_s.day = temp-&gt;delivery_time_s.day;<br>p-&gt;delivery_time_s.hour = temp-&gt;delivery_time_s.hour;<br>p-&gt;delivery_time_s.minute = temp-&gt;delivery_time_s.minute;<br>p-&gt;delivery_time_e.month = temp-&gt;delivery_time_e.month;<br>p-&gt;delivery_time_e.day = temp-&gt;delivery_time_e.day;<br>p-&gt;delivery_time_e.hour = temp-&gt;delivery_time_e.hour;<br>p-&gt;delivery_time_e.minute = temp-&gt;delivery_time_e.minute;<br>last-&gt;next = p;<br>last = last-&gt;next;<br>last-&gt;next = <span class="hljs-literal">NULL</span>;<br>&#125;<br>fclose(fp_l);<br><span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c">LISTDISH *<span class="hljs-title function_">read_inf_ld</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> <span class="hljs-comment">//Read the Information of List-Dish linklist</span><br>&#123;<br>LISTDISH *head = (LISTDISH *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LISTDISH))<br>, *last = head, *p, *temp = (LISTDISH *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LISTDISH));<br>head-&gt;next = <span class="hljs-literal">NULL</span>;<br>FILE *fp_ld;<br>fp_ld = fopen(<span class="hljs-string">&quot;D:\\小学期\\listdish.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (id != <span class="hljs-number">0</span>)<br><span class="hljs-keyword">while</span> (cnt != id)<br>&#123;<br><br>temp-&gt;dish_id = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (temp-&gt;dish_id != <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">fscanf</span>(fp_ld, <span class="hljs-string">&quot;%d %d &quot;</span>, &amp;temp-&gt;dish_id, &amp;temp-&gt;number);<br>&#125;<br>cnt++;<br>&#125;<br><span class="hljs-built_in">fscanf</span>(fp_ld, <span class="hljs-string">&quot;%d %d &quot;</span>, &amp;temp-&gt;dish_id, &amp;temp-&gt;number);<br><span class="hljs-keyword">while</span> (temp-&gt;dish_id != <span class="hljs-number">-1</span>)<br>&#123;<br>p = (LISTDISH *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LISTDISH));<br>p-&gt;dish_id = temp-&gt;dish_id;<br>p-&gt;number = temp-&gt;number;<br>last-&gt;next = p;<br>last = last-&gt;next;<br>last-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">fscanf</span>(fp_ld, <span class="hljs-string">&quot;%d %d &quot;</span>, &amp;temp-&gt;dish_id, &amp;temp-&gt;number);<br>&#125;<br>fclose(fp_ld);<br><span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p>比如要读取第三个订单所点菜品信息，传入read_inf_ld()的number订单号为3.<code>int cnt = 1</code>代表当前文件指针读取的订单号，从1开始计数，每次读到-1 -1证明又读完了一单，cnt++，直到cnt == number为止。然后读取接下来的这个链表，最后返回头结点，作为该订单中的一个成员。<br><img src="https://img-blog.csdnimg.cn/6b66117ee8b641998ea580f57da912ee.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA6JCo56eR5aGU6LWE5rex5bmy5ZGY,size_15,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs c">RECOMMEND *<span class="hljs-title function_">read_inf_recommend</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span><br>&#123;<br>RECOMMEND *head = (RECOMMEND *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(RECOMMEND)),*last=head<br>,*p,*temp = (RECOMMEND *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(RECOMMEND));<br>head-&gt;next=<span class="hljs-literal">NULL</span>;<br>FILE *fp_recommend = fopen(<span class="hljs-string">&quot;D:\\小学期\\recommend.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>); <br><span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (id != <span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">while</span> (cnt != id)<br>        &#123;<br>            <span class="hljs-built_in">strcpy</span>(temp-&gt;dish_name,<span class="hljs-string">&quot;0&quot;</span>);<br>            <span class="hljs-keyword">while</span> (<span class="hljs-built_in">strcmp</span>(temp-&gt;dish_name , <span class="hljs-string">&quot;-1&quot;</span>)!=<span class="hljs-number">0</span>)<br>            &#123;<br>                <span class="hljs-built_in">fscanf</span>(fp_recommend, <span class="hljs-string">&quot;%s &quot;</span>, temp-&gt;dish_name);<br>            &#125;<br>            cnt++;<br>        &#125;<br>    <span class="hljs-built_in">fscanf</span>(fp_recommend, <span class="hljs-string">&quot;%s &quot;</span>, temp-&gt;dish_name);<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">strcmp</span>(temp-&gt;dish_name ,<span class="hljs-string">&quot;-1&quot;</span>)!=<span class="hljs-number">0</span>)<br>    &#123;<br>        p = (RECOMMEND *)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(RECOMMEND));<br>        <span class="hljs-built_in">strcpy</span>(p-&gt;dish_name, temp-&gt;dish_name);<br>        last-&gt;next = p;<br>        last = last-&gt;next;<br>        last-&gt;next=<span class="hljs-literal">NULL</span>;<br>        <span class="hljs-built_in">fscanf</span>(fp_recommend, <span class="hljs-string">&quot;%s &quot;</span>, temp-&gt;dish_name);<br>    &#125;<br>fclose(fp_recommend);<br><span class="hljs-keyword">return</span> head;<br>&#125;<br></code></pre></td></tr></table></figure><p>读取推荐菜品链表也是类似。<br>得到的链表全都包括头结点（里链表也是），不包含结尾的-1，只要通过-&gt;-&gt;就能访问hh。<br>总之，结束了~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;尽管快半年没有学c了，好在回顾起来还是蛮快的。而且也发现比去年的自己熟练了许多。&lt;br&gt;小学期要求5人合作，用C语言做一个订餐系统，能够实现用户的登录、选择餐馆、订餐、按各种规则查询与排序、修改个人信息，管理员的登录、添加菜品、按各种规则查询与排序、修改个人信息。&lt;br&gt;首</summary>
      
    
    
    
    <category term="homework" scheme="http://example.com/categories/homework/"/>
    
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>大一C语言大作业：五子棋（总结）</title>
    <link href="http://example.com/2022/02/26/%E5%A4%A7%E4%B8%80C%E8%AF%AD%E8%A8%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E4%BA%94%E5%AD%90%E6%A3%8B%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/"/>
    <id>http://example.com/2022/02/26/%E5%A4%A7%E4%B8%80C%E8%AF%AD%E8%A8%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E4%BA%94%E5%AD%90%E6%A3%8B%EF%BC%88%E6%80%BB%E7%BB%93%EF%BC%89/</id>
    <published>2022-02-25T16:00:00.000Z</published>
    <updated>2022-02-26T14:32:30.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算与设计思维大作业"><a href="#计算与设计思维大作业" class="headerlink" title="计算与设计思维大作业"></a>计算与设计思维大作业</h1><p>这次看了几位大佬的做法，我们也做了很多修改尝试。算是第一次尝试合作完成项目。<br>我认为学到的东西：</p><ol><li>第一次尝试写项目，把函数分到不同的.c文件中后更好看了一些。</li><li>在研究过程中应该分清主次。代码正确运行才是基础要求，其他什么美化界面，调字体调颜色都并非重点。（8月4日更新：评价算法的五个特性，正确性，简明性，健壮性，效率，最优性）</li><li>从代码中学到的，①是采用落子数来判断该轮到黑方下还是白方下（落子数为2的倍数时黑方下，否则白方下），这样也能判断出是哪一方胜利，而且落子数还可以判断棋盘是否下满（==16*16时棋盘落满，平局） ②是胜利条件的判断，以中间子为参考，看两边的四个子是否和他颜色相同。</li><li>8月4日更新：在这次尝试中在文件中使用了全局变量，不同文件中用extern调用。但是在后来学习中意识到全局变量最好不要写在文件里，会增加耦合性。以后多人合作写不同函数的时候也要注意，尽量不要出现。</li></ol><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><p>在一个16*16的棋盘上，黑白双方交替落子，每次落下子后如果棋盘上出现了五个同色棋子横向/竖向/斜向连接，则该方胜利。如果在棋盘下满后（即下了16*16个子后）仍未分出胜负，则为平局。</p><h2 id="逻辑"><a href="#逻辑" class="headerlink" title="逻辑"></a>逻辑</h2><p>初始化棋盘，是一个<code>16*16</code>的二维数组（定义宏 N=16），一开始每一格都初始化为0。用一个不断++的落子数变量%2来判断本回合是黑方下还是白方下，；每次玩家输入横纵坐标，该处的变量值改变（黑子为1，白子为2）。每次落子判断全盘是否有五子连珠，如果有则结束游戏，如果没有则继续下。当落子数达到<code>N*N</code>即棋盘下满，还没有出现五子连珠时，则判断为平局，结束游戏。</p><h2 id="五子棋胜负条件判断"><a href="#五子棋胜负条件判断" class="headerlink" title="五子棋胜负条件判断"></a>五子棋胜负条件判断</h2><p>判断原理 :<br>胜负的判断是在每颗棋子落下之后进行，所以用这一子的坐标为基准前后左右斜各个方向来看是否取胜。<br>具体思想:<br>按照五子棋规则，当一方的棋子，在横向，纵向或斜向连续五个均为同一用户的棋子时，代表胜利。<br>另外，胜利判断只需要在一个新子落子时判断，且仅需要判断新子所在的四条线上(纵横加两个斜线)是否满足条件即可。<br>所以，可以以新子坐标为基准点，判断四次。<br>比如横向的，需要判断左侧和右侧连续的同类棋子个数，如果左侧+右侧+1（自身）总数&gt;=5，则为胜利。<br>在判断胜利的时候,首先我们要排除空子的情况,然后当两个斜线的时候, 无胜情况下，判断直线,当为两斜线及直线无胜情况下，判断横线。<br>参考代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">win</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> arr[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> k = <span class="hljs-number">0</span>,l = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>; <br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">2</span>;k&lt;N<span class="hljs-number">-2</span>;k++) <br><span class="hljs-keyword">for</span>(l=<span class="hljs-number">2</span>;l&lt;N<span class="hljs-number">-2</span>;l++)<br>&#123;<br><span class="hljs-keyword">if</span>(arr[k][l]!=<span class="hljs-number">0</span>&amp;&amp;arr[k<span class="hljs-number">-2</span>][l<span class="hljs-number">-2</span>]==arr[k][l]&amp;&amp;arr[k<span class="hljs-number">-1</span>][l<span class="hljs-number">-1</span>]==arr[k][l]&amp;&amp;arr[k+<span class="hljs-number">1</span>][l+<span class="hljs-number">1</span>]==arr[k][l]&amp;&amp;arr[k+<span class="hljs-number">2</span>][l+<span class="hljs-number">2</span>]==arr[k][l])<br>&#123;<br>flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(arr[k][l]!=<span class="hljs-number">0</span>&amp;&amp;arr[k+<span class="hljs-number">2</span>][l<span class="hljs-number">-2</span>]==arr[k][l]&amp;&amp;arr[k+<span class="hljs-number">1</span>][l<span class="hljs-number">-1</span>]==arr[k][l]&amp;&amp;arr[k<span class="hljs-number">-1</span>][l+<span class="hljs-number">1</span>]==arr[k][l]&amp;&amp;arr[k<span class="hljs-number">-2</span>][l+<span class="hljs-number">2</span>]==arr[k][l])<br>&#123;<br>flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>) <br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">0</span>;k&lt;N;k++)<br><span class="hljs-keyword">for</span>(l=<span class="hljs-number">2</span>;l&lt;N<span class="hljs-number">-2</span>;l++)<br>&#123;<br><span class="hljs-keyword">if</span>(arr[k][l]!=<span class="hljs-number">0</span>&amp;&amp;arr[k][l<span class="hljs-number">-2</span>]==arr[k][l]&amp;&amp;arr[k][l<span class="hljs-number">-1</span>]==arr[k][l]&amp;&amp;arr[k][l+<span class="hljs-number">1</span>]==arr[k][l]&amp;&amp;arr[k][l+<span class="hljs-number">2</span>]==arr[k][l])<br>&#123;<br>flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">0</span>) <br><span class="hljs-keyword">for</span>(k=<span class="hljs-number">2</span>;k&lt;N<span class="hljs-number">-2</span>;k++)<br><span class="hljs-keyword">for</span>(l=<span class="hljs-number">0</span>;l&lt;N;l++)<br>&#123;<br><span class="hljs-keyword">if</span>(arr[k][l]!=<span class="hljs-number">0</span>&amp;&amp;arr[k+<span class="hljs-number">2</span>][l]==arr[k][l]&amp;&amp;arr[k+<span class="hljs-number">1</span>][l]==arr[k][l]&amp;&amp;arr[k<span class="hljs-number">-1</span>][l]==arr[k][l]&amp;&amp;arr[k<span class="hljs-number">-2</span>][l]==arr[k][l])<br>&#123;<br>flag=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> flag; <br>&#125;<br></code></pre></td></tr></table></figure><p>注:</p><ol><li>   中的arr[k][l]!=0是排除空子的情况。</li><li>最后返回判断结果时, 有胜为1,无为0,谁胜无必要判断，因为，谁尾手了的一定是胜的。<h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3>开始<br><img src="https://img-blog.csdnimg.cn/ae0a75087855494bbde21f978da69805.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p0d3F3cQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li></ol><p>输入坐标<br> <img src="https://img-blog.csdnimg.cn/d5998cff325649e6b674ed2a6051b673.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p0d3F3cQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>第二回合<br> <img src="https://img-blog.csdnimg.cn/20f9995d17b04e17979f8fdc73b65363.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p0d3F3cQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>游戏结束<br> <img src="https://img-blog.csdnimg.cn/500ed64c7833490abfece68802bb8c84.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p0d3F3cQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;计算与设计思维大作业&quot;&gt;&lt;a href=&quot;#计算与设计思维大作业&quot; class=&quot;headerlink&quot; title=&quot;计算与设计思维大作业&quot;&gt;&lt;/a&gt;计算与设计思维大作业&lt;/h1&gt;&lt;p&gt;这次看了几位大佬的做法，我们也做了很多修改尝试。算是第一次尝试合作完成项目。</summary>
      
    
    
    
    <category term="homework" scheme="http://example.com/categories/homework/"/>
    
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>关于gets()和scanf()处理空白字符的问题</title>
    <link href="http://example.com/2022/02/26/gets()%E5%92%8Cscanf()%E5%A4%84%E7%90%86%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://example.com/2022/02/26/gets()%E5%92%8Cscanf()%E5%A4%84%E7%90%86%E7%A9%BA%E7%99%BD%E5%AD%97%E7%AC%A6%E7%9A%84%E9%97%AE%E9%A2%98/</id>
    <published>2022-02-25T16:00:00.000Z</published>
    <updated>2022-02-26T15:40:27.505Z</updated>
    
    <content type="html"><![CDATA[<h2 id="scanf"><a href="#scanf" class="headerlink" title="scanf()"></a>scanf()</h2><p>scanf()如果读入字符、字符串，就要注意回车、空格、制表符（统称为空白符）的问题。<br>字符还比较好处理，比如要输入abc三个字符，中间就直接不加入任何空白符，直接连着输入”abc”即可。<br>scanf()使用%s读入字符串，读到空白符时会自动结束，所以不能读入英文句子(“hello world”中间有空格，一次只能读一个单词)<br>想要读入带有空格的句子，一种方法是用scanf读入一个个字符串（单词）。字符串以空白符结尾，且当空白符在开头时%s是不会读取空白符的，会跳过这里的空白符（和scanf读入整数或浮点数时类似）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s%s&quot;</span>,str1,str2);<span class="hljs-comment">//输入&quot;hello world&quot;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%s\n&quot;</span>,str1,str2);<span class="hljs-comment">//输出&quot;helloworld&quot;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s %s\n&quot;</span>,str1,str2);<span class="hljs-comment">//输出&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p>只要补齐空格就可以了。当然这种方法用来读入输出英文句子时局限性很大，每个单词都要定义一个字符串变量（或许可以定义一个char的二维数组/指向char一维数组的指针/指向指针的指针），而且还要自己补空格。<br>另一个有趣的地方是scanf()里可以放空格，意思是跳过这里的空白符。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s %s&quot;</span>,str1,str2);<span class="hljs-comment">//输入&quot;hello world&quot;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s%s\n&quot;</span>,str1,str2);<span class="hljs-comment">//输出&quot;helloworld&quot;</span><br></code></pre></td></tr></table></figure><p>如果还是上例，其实没有影响，因为就算scanf里没有这个空格，str2也会自动跳过开头的空格从后面的w开始读入。不过这种方法在读入字符的时候处理输入的空白符，以及下文中和gets()的结合中就比较有用。</p><h2 id="gets"><a href="#gets" class="headerlink" title="gets()"></a>gets()</h2><p>gets()就可以读入空白符，空格、回车、制表符都能读入，并且读入回车时结束。因此可以借助gets()读入英文短句式的字符串（带有空格）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">gets(str);<span class="hljs-comment">//输入&quot;hello world\n&quot;</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s&quot;</span>,str);<span class="hljs-comment">//输出&quot;hello world&quot;</span><br></code></pre></td></tr></table></figure><p>但是要注意回车的问题。<br>当gets()读入的第一个数据是回车，则停止继续读入，并且str的内容就是回车。<br>当gets()读入”hello world\n”,回车是不会被gets()读入的，还留在缓冲区。<br>所以连着使用两个gets()，而中间不想办法处理掉回车，就会出错。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c">gets(str1);<span class="hljs-comment">//abc\n</span><br>gets(str2);<span class="hljs-comment">//abc\n</span><br>gets(str3);<span class="hljs-comment">//abc\n</span><br><span class="hljs-comment">//输出的结果是：abc\nabc,str2读到的是回车。</span><br></code></pre></td></tr></table></figure><p>此时可以用getchar()读掉中间的回车。<br>在做翁恺老师C语言程序设计的PTA习题时，碰到了这样一道题：<br><img src="https://img-blog.csdnimg.cn/2bf40d6f06ca4f999f51eefe9bea5cfd.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2p0d3F3cQ==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>要交替输入浮点数和带空格的字符串，一开始没有细想回车的问题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//循环执行：</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf&quot;</span>,book[i].price);<span class="hljs-comment">//读入浮点数</span><br>gets(books[i].name);<span class="hljs-comment">//读入字符串</span><br></code></pre></td></tr></table></figure><p>后来经一番查询理解了两种函数对空白符的处理，也写了这篇博文。<br>这道题有趣的地方是scanf和gets的结合，因此除了getchar()读掉中间的回车的办法，还可以在scanf末尾加空格：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//循环执行：</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lf &quot;</span>,book[i].price);<span class="hljs-comment">//读入浮点数，并读掉结尾的空白符（回车）</span><br>gets(books[i].name);<span class="hljs-comment">//读入字符串</span><br></code></pre></td></tr></table></figure><p>非常巧妙。<br>以上是本人经试验、查询资料后得出的结论，也欢迎读者多多尝试，如有错误，还请读者雅正！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;scanf&quot;&gt;&lt;a href=&quot;#scanf&quot; class=&quot;headerlink&quot; title=&quot;scanf()&quot;&gt;&lt;/a&gt;scanf()&lt;/h2&gt;&lt;p&gt;scanf()如果读入字符、字符串，就要注意回车、空格、制表符（统称为空白符）的问题。&lt;br&gt;字符还比较好处</summary>
      
    
    
    
    <category term="problems" scheme="http://example.com/categories/problems/"/>
    
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>关于C/C++中结构体指针作为形参传入函数，为什么主函数中实参不会被修改的问题</title>
    <link href="http://example.com/2022/02/26/%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E5%9C%A8%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://example.com/2022/02/26/%E7%BB%93%E6%9E%84%E4%BD%93%E6%8C%87%E9%92%88%E5%9C%A8%E5%87%BD%E6%95%B0%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</id>
    <published>2022-02-25T16:00:00.000Z</published>
    <updated>2022-02-26T15:38:33.924Z</updated>
    
    <content type="html"><![CDATA[<p>主函数传入函数的变量叫实参，而函数中的对应变量叫形参。形参实际上是实参的拷贝，所以如果我们修改形参的值，实参不会发生变化。<br>后来学习了指针，指针就相当于钥匙，能打开对应房间（地址）的门。当指针作为函数参数时，实参和形参相当于拷贝的两把钥匙，但他们都指向同一个房间，同一个地址。借由形参访问地址，并改变地址中的值，能够真正修改地址中的值。<br>而在学习结构体、链表时，常常进行的操作是对结构体指针赋值。<br>比如添加新链表结点add函数，传入实参head（要修改的链表的头指针）先将新结点的内容赋给临时结构体指针p，然后将p的值赋给head或last-&gt;next，即挂在链表的结尾。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">head=p;<span class="hljs-comment">//当head为NULL的时候</span><br>last-&gt;next=p;<span class="hljs-comment">//当head不为NULL的时候</span><br></code></pre></td></tr></table></figure><p>最后返回head指针。<br>但是这样做并不会直接对主函数中的head指针进行修改，为什么？<br>因为我们修改的不是指针对应地址中的值，而是直接修改指针的值，改变了指针的指向（对钥匙本身的修改，让这把钥匙指向另一个房间；而不是对钥匙指向房间里的内容的修改）。当我们令head=p时，相当于让head自身的地址值改变，和指针p指向的地址一样。这就和修改普通变量一样，对形参的修改不会影响实参。<br>解决方法：(翁恺老师的建议）</p><ol><li>head定义为全局变量，这样在所有函数中都能访问。但这种方法并不好，只对这个链表的head生效。如果还定义了其他链表，此add函数就不能对其他链表生效了。</li><li>add函数返回新的我们想要的head结构体指针，在原函数中把add函数的返回值赋给head.</li><li>既然可以传递指针对应地址的值，我们就让指针所指的地址中的值是我们要修改的指针，即传入*<em>phead指向指针的指针。这样就可以直接修改</em>phead的值了。</li><li>我们定义一个结构list，其中包含*head。在原函数中定义list，list.head=NULL；然后把list的指针<code>&amp;list</code>传入add函数，add的参数是list的指针，在函数中就可以对list-&gt;head进行修改。</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;主函数传入函数的变量叫实参，而函数中的对应变量叫形参。形参实际上是实参的拷贝，所以如果我们修改形参的值，实参不会发生变化。&lt;br&gt;后来学习了指针，指针就相当于钥匙，能打开对应房间（地址）的门。当指针作为函数参数时，实参和形参相当于拷贝的两把钥匙，但他们都指向同一个房间，同一</summary>
      
    
    
    
    <category term="problems" scheme="http://example.com/categories/problems/"/>
    
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>大一C语言大作业：函数动画</title>
    <link href="http://example.com/2022/02/25/%E5%A4%A7%E4%B8%80C%E8%AF%AD%E8%A8%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E5%87%BD%E6%95%B0%E5%8A%A8%E7%94%BB/"/>
    <id>http://example.com/2022/02/25/%E5%A4%A7%E4%B8%80C%E8%AF%AD%E8%A8%80%E5%A4%A7%E4%BD%9C%E4%B8%9A%20%E5%87%BD%E6%95%B0%E5%8A%A8%E7%94%BB/</id>
    <published>2022-02-24T16:00:00.000Z</published>
    <updated>2022-02-26T14:32:51.562Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绘制一个函数动画。"><a href="#绘制一个函数动画。" class="headerlink" title="绘制一个函数动画。"></a>绘制一个函数动画。</h1><p>要求：1.碰到边界反弹；<br>2.会像贪吃蛇一样消失。</p><p>老师已给出提示代码：三个辅助函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;windows.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-comment">// two functions to clear screen and set cursor position for printing.</span><br><span class="hljs-comment">// one function to take a rest in 10 microseconds.</span><br><br><span class="hljs-comment">// use this function to clear screen</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span><span class="hljs-comment">//清屏</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _WIN32</span><br>    system(<span class="hljs-string">&quot;cls&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined (__LINUX__) || defined(__gnu_linux__) || defined(__linux__)</span><br>    system(<span class="hljs-string">&quot;clear&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined (__APPLE__)</span><br>    system(<span class="hljs-string">&quot;clear&quot;</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _WIN32</span><br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;conio.h&gt;</span></span><br>    <span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;windows.h&gt;</span></span><br>    <span class="hljs-type">void</span> <span class="hljs-title function_">setcursor</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><br>    &#123;<br>        HANDLE hCon = GetStdHandle(STD_OUTPUT_HANDLE);<br>        COORD setps;<br>        setps.X = x; setps.Y = y;<br>        SetConsoleCursorPosition(hCon, setps);<br>    &#125;<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><br><span class="hljs-comment">// use this function to positioning before calling printf  </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">gotoxy</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span><span class="hljs-comment">//光标移动到x,y处</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _WIN32</span><br>    setcursor(y - <span class="hljs-number">1</span>, x - <span class="hljs-number">1</span>);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined (__LINUX__) || defined(__gnu_linux__) || defined(__linux__)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[%d;%dH&quot;</span>, x, y);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined (__APPLE__)</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\033[%d;%dH&quot;</span>, x, y);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br><br><span class="hljs-type">int</span> factor = <span class="hljs-number">10</span>;<br><br><span class="hljs-comment">// rest msec * 10 microseconds</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">rest</span><span class="hljs-params">(<span class="hljs-type">int</span> msec)</span><span class="hljs-comment">//当前画面静止一定时间</span><br>&#123;<br><span class="hljs-meta">#<span class="hljs-keyword">if</span> defined _WIN32</span><br>    Sleep(msec * factor);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined (__LINUX__) || defined(__gnu_linux__) || defined(__linux__)</span><br>    usleep(msec * <span class="hljs-number">1000</span> * factor);<br><span class="hljs-meta">#<span class="hljs-keyword">elif</span> defined (__APPLE__)</span><br>    usleep(msec * <span class="hljs-number">1000</span>* factor);<br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>clear()</code>函数清屏；<code>gotoxy()</code>函数使光标移动到指定位置；<code>rest()</code>当前画面静止。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1.动画绘制<br>动画的原理是一帧帧的图片有短暂的时间间隔，连起来放映之后就产生了会动的感觉。我们可以每打印一个点之后<code>rest()</code>一小段时间来形成动画的效果。</p><p>2.边界反弹<br>即为碰到边界反向输出。我想的方法是纵坐标y1不变，只需要设计分段函数让x反向即可。</p><p>3.延时消失<br>要求的消失是像贪吃蛇一样，前面一边画着点，后面尾巴一边消失。但自己怎么想都只能做到全部绘制完成之后再让它开始消失。<br>请教助教与Mc大佬之后得知他的思路是保留点数。屏幕中最多出现50个点，第51个点之后，打印第x个点时，x-50号点打印空格覆盖，让他消失。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.审题。给定的<code>gotoxy()</code>函数的横纵坐标是反着的，而且从左上角开始为(1,1)。<br>2.<code>rest()</code>的用法非常灵活，比如高人指点：用户可以输入打印速度speed，rest(100-speed)。（妙啊）<br>3.程序中出现几段几乎完全相似的代码（除了字母不同），“代码复制”是程序不良的表现。因为将来做修改、维护的时候要维护很多处。所以比起重复一段好多遍，使用函数会更好。</p><p>感谢Mc、fOrever_jAckY、olinr1222、–_–等人指点！</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> <span class="hljs-title function_">zong</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-comment">//纵坐标y1</span><br>&#123;<br><span class="hljs-type">double</span> x=(i<span class="hljs-number">-51</span>);<br><span class="hljs-type">double</span> y=<span class="hljs-number">12.0</span>*<span class="hljs-built_in">sin</span>(x/<span class="hljs-number">7</span>);<br><span class="hljs-type">int</span> y1=(<span class="hljs-type">int</span>)(<span class="hljs-number">15</span>-y);<br><span class="hljs-keyword">return</span> y1;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">heng</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-comment">//横坐标j</span><br>&#123;<br><span class="hljs-type">int</span> j=i;<br><span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">101</span>&amp;&amp;i&lt;=<span class="hljs-number">202</span>)j=<span class="hljs-number">203</span>-i;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">202</span>&amp;&amp;i&lt;=<span class="hljs-number">303</span>)j=i<span class="hljs-number">-202</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">303</span>&amp;&amp;i&lt;=<span class="hljs-number">404</span>)j=<span class="hljs-number">405</span>-i;<br><span class="hljs-keyword">return</span> j;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dayin</span><span class="hljs-params">(<span class="hljs-type">char</span> ch,<span class="hljs-type">int</span> j,<span class="hljs-type">int</span> y1)</span><span class="hljs-comment">//在(y1,j)处输出给定字符</span><br>&#123;<br>gotoxy(y1,j);<br><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27; &#x27;</span>)<br>&#123;<br><span class="hljs-keyword">if</span>(y1==<span class="hljs-number">15</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(j==<span class="hljs-number">51</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;#&quot;</span>);<br>gotoxy(<span class="hljs-number">29</span>-y1,<span class="hljs-number">102</span>-j);<br><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27; &#x27;</span>)<span class="hljs-comment">//防止坐标点和坐标轴被空格覆盖</span><br>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-number">29</span>-y1==<span class="hljs-number">15</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">102</span>-j==<span class="hljs-number">51</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">29</span>-y1==<span class="hljs-number">26</span>&amp;&amp;<span class="hljs-number">102</span>-j==<span class="hljs-number">49</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-number">29</span>-y1==<span class="hljs-number">26</span>&amp;&amp;<span class="hljs-number">102</span>-j==<span class="hljs-number">50</span>)||(<span class="hljs-number">29</span>-y1==<span class="hljs-number">3</span>&amp;&amp;<span class="hljs-number">102</span>-j==<span class="hljs-number">50</span>))<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-number">29</span>-y1==<span class="hljs-number">16</span>&amp;&amp;<span class="hljs-number">102</span>-j==<span class="hljs-number">100</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;X&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;#&quot;</span>);<br>gotoxy(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>&#125;<br><br><br><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">float</span> x,y;<br><span class="hljs-type">int</span> tim=<span class="hljs-number">20</span>;<br>system(<span class="hljs-string">&quot;color F0&quot;</span>);<br>system(<span class="hljs-string">&quot;mode con cols=101 lines=30&quot;</span>);<br>clear();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=<span class="hljs-number">100</span>;i++)<span class="hljs-comment">//打印x轴 </span><br>&#123;<br>gotoxy(<span class="hljs-number">15</span>,i+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(i!=<span class="hljs-number">50</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+&quot;</span>);<br>gotoxy(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>rest(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">29</span>;i&gt;=<span class="hljs-number">0</span>;i--)<span class="hljs-comment">//打印y轴 </span><br>&#123;<br>gotoxy(i+<span class="hljs-number">1</span>,<span class="hljs-number">51</span>);<br><span class="hljs-keyword">if</span>(i!=<span class="hljs-number">14</span>)<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;|&quot;</span>);<br>gotoxy(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>); <br>rest(<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">//打印轴上的点</span><br>gotoxy(<span class="hljs-number">16</span>,<span class="hljs-number">52</span>); <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;O&quot;</span>);<br><br>gotoxy(<span class="hljs-number">16</span>,<span class="hljs-number">100</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;X&quot;</span>);<br><br>gotoxy(<span class="hljs-number">1</span>,<span class="hljs-number">49</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Y&quot;</span>);<br><br>gotoxy(<span class="hljs-number">3</span>,<span class="hljs-number">50</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br><br>gotoxy(<span class="hljs-number">26</span>,<span class="hljs-number">49</span>);<span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br><br><br><br><br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>,j,y1;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">52</span>;i&lt;=<span class="hljs-number">404</span>;i++)<span class="hljs-comment">//打印函数 </span><br>&#123;<br>j=heng(i),y1=zong(i);<br>dayin(<span class="hljs-string">&#x27;#&#x27;</span>,j,y1);<br>rest(<span class="hljs-number">4</span>);<br><br><span class="hljs-keyword">if</span>(i<span class="hljs-number">-51</span>-tim&gt;<span class="hljs-number">0</span>)<br>&#123;<br>y1=zong(i-tim);<br>j=heng(i-tim);<br>dayin(<span class="hljs-string">&#x27; &#x27;</span>,j,y1);<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> r=i-tim;r&lt;=i;r++)<br>&#123;<br>j=heng(r);<br>y1=zong(r);<br>dayin(<span class="hljs-string">&#x27; &#x27;</span>,j,y1);<br>rest(<span class="hljs-number">4</span>);<br>&#125; <br>gotoxy(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>rest(<span class="hljs-number">1000</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;绘制一个函数动画。&quot;&gt;&lt;a href=&quot;#绘制一个函数动画。&quot; class=&quot;headerlink&quot; title=&quot;绘制一个函数动画。&quot;&gt;&lt;/a&gt;绘制一个函数动画。&lt;/h1&gt;&lt;p&gt;要求：1.碰到边界反弹；&lt;br&gt;2.会像贪吃蛇一样消失。&lt;/p&gt;
&lt;p&gt;老师已给出提</summary>
      
    
    
    
    <category term="homework" scheme="http://example.com/categories/homework/"/>
    
    
    <category term="code" scheme="http://example.com/tags/code/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/02/24/hello-world/"/>
    <id>http://example.com/2022/02/24/hello-world/</id>
    <published>2022-02-23T16:00:00.000Z</published>
    <updated>2022-02-26T14:45:53.870Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
